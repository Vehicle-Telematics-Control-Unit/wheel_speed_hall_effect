
Vehicle_speed_test0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006128  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006238  08006238  00016238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006664  08006664  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006664  08006664  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800666c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200001e0  08006848  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006848  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2f6  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1f  00000000  00000000  0002c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018623  00000000  00000000  0002fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d965  00000000  00000000  000483bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d263  00000000  00000000  00055d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2f83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e3c  00000000  00000000  000e2fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006220 	.word	0x08006220

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006220 	.word	0x08006220

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <HAL_TIM_PeriodElapsedCallback>:
static uint64_t no_magnatic_hits = 0;
static float start_time = 0;
static float speed=0.0;
//this function to unlock the lock after 0.2second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1e>
  {

	  HAL_TIM_Base_Stop_IT(&htim3);
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e44:	f001 fd48 	bl	80028d8 <HAL_TIM_Base_Stop_IT>
	  lock=0;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
  }
  if (htim->Instance == TIM2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e56:	d13e      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0xa6>
   {
	  if(no_magnatic_hits==0)
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	d116      	bne.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>
		  {

		  sprintf(str, "Mag=%d\nspeed=%.2f cm/s\n", no_magnatic_hits,NOTMOVING);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fadb 	bl	8000428 <__aeabi_f2d>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	e9cd 2300 	strd	r2, r3, [sp]
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	462b      	mov	r3, r5
 8000e7e:	491d      	ldr	r1, [pc, #116]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e80:	481d      	ldr	r0, [pc, #116]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e82:	f002 ff53 	bl	8003d2c <siprintf>
		  str[sizeof(str) - 1] = '\0';
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000e8e:	e015      	b.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x8c>
		  }
	  else
	  {

	  	  sprintf(str, "Mag=%d\nspeed=%.2f cm/s\n", no_magnatic_hits,speed);
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fac4 	bl	8000428 <__aeabi_f2d>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	462b      	mov	r3, r5
 8000eac:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000eb0:	f002 ff3c 	bl	8003d2c <siprintf>
	  	  str[sizeof(str) - 1] = '\0';
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	  }
	  HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2232      	movs	r2, #50	; 0x32
 8000ec0:	490d      	ldr	r1, [pc, #52]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ec4:	f002 f935 	bl	8003132 <HAL_UART_Transmit>
	  no_magnatic_hits=0;
 8000ec8:	4908      	ldr	r1, [pc, #32]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9c1 2300 	strd	r2, r3, [r1]
   }

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	2000029c 	.word	0x2000029c
 8000ee8:	20000364 	.word	0x20000364
 8000eec:	20000368 	.word	0x20000368
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	08006238 	.word	0x08006238
 8000ef8:	20000328 	.word	0x20000328
 8000efc:	20000374 	.word	0x20000374
 8000f00:	200002e4 	.word	0x200002e4
 8000f04:	00000000 	.word	0x00000000

08000f08 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
		 //lock is used to prevent bouncing in situations where two falling edges occur in close time
		//so if two edges comes in close time after the first one lock will be one for 0.2 second->(2000*2700)/(72*10^6)
			//The variable "is_timing" is used to determine the order of each magnetic sensor.
			if (GPIO_Pin == GPIO_PIN_1)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d159      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0xc4>
			{
				if(lock==0)
 8000f18:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d155      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0xc4>
				{
					HAL_TIM_Base_Start_IT(&htim3);
 8000f20:	4830      	ldr	r0, [pc, #192]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f22:	f001 fc87 	bl	8002834 <HAL_TIM_Base_Start_IT>
					lock=1;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
					elapsed_time = ( HAL_GetTick() - start_time) / 1000.0;
 8000f2c:	f000 fcc8 	bl	80018c0 <HAL_GetTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff feae 	bl	8000c94 <__aeabi_ui2f>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4610      	mov	r0, r2
 8000f42:	f7ff fdf5 	bl	8000b30 <__aeabi_fsub>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa6d 	bl	8000428 <__aeabi_f2d>
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f54:	f7ff fbea 	bl	800072c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd92 	bl	8000a88 <__aeabi_d2f>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f68:	6013      	str	r3, [r2, #0]
					start_time = HAL_GetTick();
 8000f6a:	f000 fca9 	bl	80018c0 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe8f 	bl	8000c94 <__aeabi_ui2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f7a:	6013      	str	r3, [r2, #0]
					if (elapsed_time!=0)
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f04f 0100 	mov.w	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff21 	bl	8000dcc <__aeabi_fcmpeq>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d114      	bne.n	8000fba <HAL_GPIO_EXTI_Callback+0xb2>
					speed = HALF_OF_CIRCLE / (elapsed_time);
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa47 	bl	8000428 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	a10e      	add	r1, pc, #56	; (adr r1, 8000fd8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fa4:	f7ff fbc2 	bl	800072c <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd6a 	bl	8000a88 <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000fb8:	6013      	str	r3, [r2, #0]
					//is_timing = 0;
					no_magnatic_hits++;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	1c54      	adds	r4, r2, #1
 8000fc2:	f143 0500 	adc.w	r5, r3, #0
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000fc8:	e9c3 4500 	strd	r4, r5, [r3]
				}
			}
	}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	3d70a3d7 	.word	0x3d70a3d7
 8000fdc:	4032d70a 	.word	0x4032d70a
 8000fe0:	20000364 	.word	0x20000364
 8000fe4:	2000029c 	.word	0x2000029c
 8000fe8:	20000370 	.word	0x20000370
 8000fec:	408f4000 	.word	0x408f4000
 8000ff0:	20000360 	.word	0x20000360
 8000ff4:	20000374 	.word	0x20000374
 8000ff8:	20000368 	.word	0x20000368

08000ffc <main>:


int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fc06 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f81a 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 f964 	bl	80012d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800100c:	f000 f938 	bl	8001280 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001010:	f000 f85a 	bl	80010c8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001014:	f000 f8dc 	bl	80011d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001018:	f000 f88c 	bl	8001134 <MX_TIM2_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <main+0x34>)
 800101e:	f001 fc09 	bl	8002834 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit(&huart1, "done spi to eth\n", sizeof("done spi to eth\n"), 100);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2211      	movs	r2, #17
 8001026:	4903      	ldr	r1, [pc, #12]	; (8001034 <main+0x38>)
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <main+0x3c>)
 800102a:	f002 f882 	bl	8003132 <HAL_UART_Transmit>
  while (1)
 800102e:	e7fe      	b.n	800102e <main+0x32>
 8001030:	20000254 	.word	0x20000254
 8001034:	08006250 	.word	0x08006250
 8001038:	200002e4 	.word	0x200002e4

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fa06 	bl	800345c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800107a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fee7 	bl	8001e58 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001090:	f000 f982 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f954 	bl	800235c <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ba:	f000 f96d 	bl	8001398 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3740      	adds	r7, #64	; 0x40
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI1_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_SPI1_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI1_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI1_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI1_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI1_Init+0x64>)
 80010fc:	2210      	movs	r2, #16
 80010fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI1_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI1_Init+0x64>)
 800111a:	f001 fab7 	bl	800268c <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001124:	f000 f938 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200001fc 	.word	0x200001fc
 8001130:	40013000 	.word	0x40013000

08001134 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_TIM2_Init+0x98>)
 8001152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_TIM2_Init+0x98>)
 800115a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800115e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM2_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11000;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_TIM2_Init+0x98>)
 8001168:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_TIM2_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM2_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117a:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_TIM2_Init+0x98>)
 800117c:	f001 fb0a 	bl	8002794 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001186:	f000 f907 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_TIM2_Init+0x98>)
 8001198:	f001 fd2d 	bl	8002bf6 <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011a2:	f000 f8f9 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM2_Init+0x98>)
 80011b4:	f001 ff00 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011be:	f000 f8eb 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000254 	.word	0x20000254

080011d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_TIM3_Init+0xa8>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <MX_TIM3_Init+0xac>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_TIM3_Init+0xa8>)
 80011f4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_TIM3_Init+0xa8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001202:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM3_Init+0xa8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001214:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001216:	f001 fabd 	bl	8002794 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001220:	f000 f8ba 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4619      	mov	r1, r3
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001232:	f001 fce0 	bl	8002bf6 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 f8ac 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001240:	2108      	movs	r1, #8
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001244:	f001 fb76 	bl	8002934 <HAL_TIM_OnePulse_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800124e:	f000 f8a3 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_TIM3_Init+0xa8>)
 8001260:	f001 feaa 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800126a:	f000 f895 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000029c 	.word	0x2000029c
 800127c:	40000400 	.word	0x40000400

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_USART1_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b8:	f001 feee 	bl	8003098 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f869 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002e4 	.word	0x200002e4
 80012d0:	40013800 	.word	0x40013800

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_GPIO_Init+0xb8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0xb8>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0xb8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_GPIO_Init+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <MX_GPIO_Init+0xb8>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_GPIO_Init+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COUNT_LED_Pin|TEST_LED_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	211c      	movs	r1, #28
 800131c:	481c      	ldr	r0, [pc, #112]	; (8001390 <MX_GPIO_Init+0xbc>)
 800131e:	f000 fd6b 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001322:	2302      	movs	r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_GPIO_Init+0xc0>)
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0xbc>)
 8001336:	f000 fbdb 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COUNT_LED_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = COUNT_LED_Pin|TEST_LED_Pin;
 800133a:	230c      	movs	r3, #12
 800133c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2302      	movs	r3, #2
 8001348:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <MX_GPIO_Init+0xbc>)
 8001352:	f000 fbcd 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001356:	2310      	movs	r3, #16
 8001358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <MX_GPIO_Init+0xbc>)
 800136e:	f000 fbbf 	bl	8001af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2007      	movs	r0, #7
 8001378:	f000 fb83 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800137c:	2007      	movs	r0, #7
 800137e:	f000 fb9c 	bl	8001aba <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40010800 	.word	0x40010800
 8001394:	10210000 	.word	0x10210000

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_MspInit+0x5c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x5c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_MspInit+0x60>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_MspInit+0x60>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d12f      	bne.n	8001488 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_SPI_MspInit+0x90>)
 800146c:	f000 fb40 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_SPI_MspInit+0x90>)
 8001484:	f000 fb34 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013000 	.word	0x40013000
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ac:	d114      	bne.n	80014d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201c      	movs	r0, #28
 80014cc:	f000 fad9 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 faf2 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014d6:	e018      	b.n	800150a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_TIM_Base_MspInit+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d113      	bne.n	800150a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x78>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	201d      	movs	r0, #29
 8001500:	f000 fabf 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001504:	201d      	movs	r0, #29
 8001506:	f000 fad8 	bl	8001aba <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40000400 	.word	0x40000400

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_UART_MspInit+0x8c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d131      	bne.n	80015a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x90>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_UART_MspInit+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x90>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_UART_MspInit+0x94>)
 8001582:	f000 fab5 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_MspInit+0x94>)
 800159c:	f000 faa8 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f94f 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001606:	2002      	movs	r0, #2
 8001608:	f000 fc0e 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM2_IRQHandler+0x10>)
 8001616:	f001 f9e6 	bl	80029e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000254 	.word	0x20000254

08001624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM3_IRQHandler+0x10>)
 800162a:	f001 f9dc 	bl	80029e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000029c 	.word	0x2000029c

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <_kill>:

int _kill(int pid, int sig)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001650:	f001 feda 	bl	8003408 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	2216      	movs	r2, #22
 8001658:	601a      	str	r2, [r3, #0]
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_exit>:

void _exit (int status)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffe7 	bl	8001646 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001678:	e7fe      	b.n	8001678 <_exit+0x12>

0800167a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf1      	blt.n	80016c6 <_write+0x12>
  }
  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_close>:

int _close(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001712:	605a      	str	r2, [r3, #4]
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <_isatty>:

int _isatty(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f001 fe44 	bl	8003408 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20005000 	.word	0x20005000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000378 	.word	0x20000378
 80017b4:	20000390 	.word	0x20000390

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ea:	f7ff ffe5 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f001 fe11 	bl	8003414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fc03 	bl	8000ffc <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001800:	0800666c 	.word	0x0800666c
  ldr r2, =_sbss
 8001804:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001808:	20000390 	.word	0x20000390

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x28>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f923 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fdba 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f93b 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f903 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x20>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000008 	.word	0x20000008
 80018bc:	2000037c 	.word	0x2000037c

080018c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	2000037c 	.word	0x2000037c

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4906      	ldr	r1, [pc, #24]	; (800196c <__NVIC_EnableIRQ+0x34>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff90 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff2d 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff42 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff35 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e169      	b.n	8001dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b04:	2201      	movs	r2, #1
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8158 	bne.w	8001dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a9a      	ldr	r2, [pc, #616]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d05e      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b2c:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d875      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b32:	4a98      	ldr	r2, [pc, #608]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d058      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b38:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d86f      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b3e:	4a96      	ldr	r2, [pc, #600]	; (8001d98 <HAL_GPIO_Init+0x2a8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d052      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b44:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2a8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d869      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b4a:	4a94      	ldr	r2, [pc, #592]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04c      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b50:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d863      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b56:	4a92      	ldr	r2, [pc, #584]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d046      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b5c:	4a90      	ldr	r2, [pc, #576]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d85d      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d82a      	bhi.n	8001bbc <HAL_GPIO_Init+0xcc>
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d859      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_GPIO_Init+0x80>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001beb 	.word	0x08001beb
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bd7 	.word	0x08001bd7
 8001b7c:	08001c19 	.word	0x08001c19
 8001b80:	08001c1f 	.word	0x08001c1f
 8001b84:	08001c1f 	.word	0x08001c1f
 8001b88:	08001c1f 	.word	0x08001c1f
 8001b8c:	08001c1f 	.word	0x08001c1f
 8001b90:	08001c1f 	.word	0x08001c1f
 8001b94:	08001c1f 	.word	0x08001c1f
 8001b98:	08001c1f 	.word	0x08001c1f
 8001b9c:	08001c1f 	.word	0x08001c1f
 8001ba0:	08001c1f 	.word	0x08001c1f
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001c1f 	.word	0x08001c1f
 8001bac:	08001c1f 	.word	0x08001c1f
 8001bb0:	08001c1f 	.word	0x08001c1f
 8001bb4:	08001bcd 	.word	0x08001bcd
 8001bb8:	08001be1 	.word	0x08001be1
 8001bbc:	4a79      	ldr	r2, [pc, #484]	; (8001da4 <HAL_GPIO_Init+0x2b4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bc2:	e02c      	b.n	8001c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e029      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e024      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	3308      	adds	r3, #8
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e01f      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	330c      	adds	r3, #12
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e01a      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e013      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	611a      	str	r2, [r3, #16]
          break;
 8001c0a:	e009      	b.n	8001c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	615a      	str	r2, [r3, #20]
          break;
 8001c16:	e003      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          break;
 8001c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2bff      	cmp	r3, #255	; 0xff
 8001c24:	d801      	bhi.n	8001c2a <HAL_GPIO_Init+0x13a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e001      	b.n	8001c2e <HAL_GPIO_Init+0x13e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d802      	bhi.n	8001c3c <HAL_GPIO_Init+0x14c>
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x152>
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3b08      	subs	r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	210f      	movs	r1, #15
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80b1 	beq.w	8001dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c70:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c88:	4a48      	ldr	r2, [pc, #288]	; (8001dac <HAL_GPIO_Init+0x2bc>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1ec>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	; (8001db4 <HAL_GPIO_Init+0x2c4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1e8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3d      	ldr	r2, [pc, #244]	; (8001dbc <HAL_GPIO_Init+0x2cc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1e0>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cee:	492f      	ldr	r1, [pc, #188]	; (8001dac <HAL_GPIO_Init+0x2bc>)
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	492c      	ldr	r1, [pc, #176]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4928      	ldr	r1, [pc, #160]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	491e      	ldr	r1, [pc, #120]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4914      	ldr	r1, [pc, #80]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d021      	beq.n	8001dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
 8001d8c:	e021      	b.n	8001dd2 <HAL_GPIO_Init+0x2e2>
 8001d8e:	bf00      	nop
 8001d90:	10320000 	.word	0x10320000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	10220000 	.word	0x10220000
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	10120000 	.word	0x10120000
 8001da4:	10110000 	.word	0x10110000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f47f ae8e 	bne.w	8001b04 <HAL_GPIO_Init+0x14>
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	372c      	adds	r7, #44	; 0x2c
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f85e 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fcc4 	bl	80018c0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fcc0 	bl	80018c0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcb0 	bl	80018c0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcac 	bl	80018c0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fc65 	bl	80018c0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fc61 	bl	80018c0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc44 	bl	80018c0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff fc40 	bl	80018c0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fc24 	bl	80018c0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fc20 	bl	80018c0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fad8 	bl	8002650 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff fc0a 	bl	80018c0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff fc06 	bl	80018c0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fbc7 	bl	80018c0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fbc3 	bl	80018c0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb77 	bl	80018c0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb73 	bl	80018c0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fb61 	bl	80018c0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fb5d 	bl	80018c0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fb31 	bl	80018c0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fb2d 	bl	80018c0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fb01 	bl	80018c0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fafd 	bl	80018c0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff faea 	bl	80018c0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fae6 	bl	80018c0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7ff fa38 	bl	80018c0 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff fa34 	bl	80018c0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f996 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08006274 	.word	0x08006274
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b490      	push	{r4, r7}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002538:	1d3c      	adds	r4, r7, #4
 800253a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002540:	f240 2301 	movw	r3, #513	; 0x201
 8002544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x46>
 800256e:	e02b      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	e02b      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3328      	adds	r3, #40	; 0x28
 8002580:	443b      	add	r3, r7
 8002582:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002586:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0c5b      	lsrs	r3, r3, #17
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	3328      	adds	r3, #40	; 0x28
 800259e:	443b      	add	r3, r7
 80025a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	623b      	str	r3, [r7, #32]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ca:	623b      	str	r3, [r7, #32]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc90      	pop	{r4, r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	08006264 	.word	0x08006264
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	003d0900 	.word	0x003d0900

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_RCC_GetHCLKFreq+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff2 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08006284 	.word	0x08006284

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffde 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0adb      	lsrs	r3, r3, #11
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08006284 	.word	0x08006284

08002650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCC_Delay+0x34>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <RCC_Delay+0x38>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a5b      	lsrs	r3, r3, #9
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800266c:	bf00      	nop
  }
  while (Delay --);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <RCC_Delay+0x1c>
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e076      	b.n	800278c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ae:	d009      	beq.n	80026c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
 80026b6:	e005      	b.n	80026c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fe92 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	0c1a      	lsrs	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f002 0204 	and.w	r2, r2, #4
 800276a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e041      	b.n	800282a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fe6e 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 faf8 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e03a      	b.n	80028c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_TIM_Base_Start_IT+0x98>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d009      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d111      	bne.n	80028b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b06      	cmp	r3, #6
 800289c:	d010      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	e007      	b.n	80028c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <HAL_TIM_Base_Stop_IT+0x48>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	f240 4344 	movw	r3, #1092	; 0x444
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_TIM_Base_Stop_IT+0x48>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e041      	b.n	80029cc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f839 	bl	80029d4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 fa27 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0208 	bic.w	r2, r2, #8
 8002988:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d122      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11b      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0202 	mvn.w	r2, #2
 8002a12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f9b1 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002a2e:	e005      	b.n	8002a3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f9a4 	bl	8002d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f9b3 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d122      	bne.n	8002a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d11b      	bne.n	8002a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0204 	mvn.w	r2, #4
 8002a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f987 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002a82:	e005      	b.n	8002a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f97a 	bl	8002d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f989 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d122      	bne.n	8002aea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11b      	bne.n	8002aea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0208 	mvn.w	r2, #8
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f95d 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002ad6:	e005      	b.n	8002ae4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f950 	bl	8002d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f95f 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d122      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d11b      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 0210 	mvn.w	r2, #16
 8002b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2208      	movs	r2, #8
 8002b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f933 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002b2a:	e005      	b.n	8002b38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f926 	bl	8002d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f935 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10e      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0201 	mvn.w	r2, #1
 8002b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe f963 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d10e      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b80      	cmp	r3, #128	; 0x80
 8002b84:	d107      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa78 	bl	8003086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8f9 	bl	8002db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d10e      	bne.n	8002bee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d107      	bne.n	8002bee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0220 	mvn.w	r2, #32
 8002be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa43 	bl	8003074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_ConfigClockSource+0x18>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0b3      	b.n	8002d76 <HAL_TIM_ConfigClockSource+0x180>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	d03e      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0xd0>
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	f200 8087 	bhi.w	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	f000 8085 	beq.w	8002d62 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d87f      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c5e:	2b70      	cmp	r3, #112	; 0x70
 8002c60:	d01a      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xa2>
 8002c62:	2b70      	cmp	r3, #112	; 0x70
 8002c64:	d87b      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c66:	2b60      	cmp	r3, #96	; 0x60
 8002c68:	d050      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0x116>
 8002c6a:	2b60      	cmp	r3, #96	; 0x60
 8002c6c:	d877      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c6e:	2b50      	cmp	r3, #80	; 0x50
 8002c70:	d03c      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0xf6>
 8002c72:	2b50      	cmp	r3, #80	; 0x50
 8002c74:	d873      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d058      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0x136>
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d86f      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c7e:	2b30      	cmp	r3, #48	; 0x30
 8002c80:	d064      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x156>
 8002c82:	2b30      	cmp	r3, #48	; 0x30
 8002c84:	d86b      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d060      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x156>
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d867      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d05c      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x156>
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d05a      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c96:	e062      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f000 f967 	bl	8002f7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]
      break;
 8002cc4:	e04e      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f000 f950 	bl	8002f7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce8:	609a      	str	r2, [r3, #8]
      break;
 8002cea:	e03b      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f000 f8c7 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2150      	movs	r1, #80	; 0x50
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f91e 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d0a:	e02b      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f000 f8e5 	bl	8002ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2160      	movs	r1, #96	; 0x60
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 f90e 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d2a:	e01b      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f000 f8a7 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 f8fe 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d4a:	e00b      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 f8f5 	bl	8002f46 <TIM_ITRx_SetConfig>
        break;
 8002d5c:	e002      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d103      	bne.n	8002e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	615a      	str	r2, [r3, #20]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f023 0210 	bic.w	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f043 0307 	orr.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e046      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d009      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800

08003074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e03f      	b.n	800312a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fa2c 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f905 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b08a      	sub	sp, #40	; 0x28
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	d17c      	bne.n	800324c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_Transmit+0x2c>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e075      	b.n	800324e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_UART_Transmit+0x3e>
 800316c:	2302      	movs	r3, #2
 800316e:	e06e      	b.n	800324e <HAL_UART_Transmit+0x11c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2221      	movs	r2, #33	; 0x21
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003186:	f7fe fb9b 	bl	80018c0 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	d108      	bne.n	80031b4 <HAL_UART_Transmit+0x82>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e003      	b.n	80031bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031c4:	e02a      	b.n	800321c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f840 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e036      	b.n	800324e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3302      	adds	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e007      	b.n	800320e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3301      	adds	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cf      	bne.n	80031c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f810 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e006      	b.n	800324e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	e02c      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d028      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	f7fe fb23 	bl	80018c0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	d21d      	bcs.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003294:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d0c3      	beq.n	8003268 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003326:	f023 030c 	bic.w	r3, r3, #12
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	430b      	orrs	r3, r1
 8003332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <UART_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7ff f968 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff f950 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <UART_SetConfig+0x118>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	0119      	lsls	r1, r3, #4
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <UART_SetConfig+0x118>)
 800339a:	fba3 0302 	umull	r0, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2064      	movs	r0, #100	; 0x64
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a15      	ldr	r2, [pc, #84]	; (8003404 <UART_SetConfig+0x118>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b8:	4419      	add	r1, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <UART_SetConfig+0x118>)
 80033d2:	fba3 0302 	umull	r0, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <UART_SetConfig+0x118>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	440a      	add	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40013800 	.word	0x40013800
 8003404:	51eb851f 	.word	0x51eb851f

08003408 <__errno>:
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <__errno+0x8>)
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <__libc_init_array>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	2600      	movs	r6, #0
 8003418:	4d0c      	ldr	r5, [pc, #48]	; (800344c <__libc_init_array+0x38>)
 800341a:	4c0d      	ldr	r4, [pc, #52]	; (8003450 <__libc_init_array+0x3c>)
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	42a6      	cmp	r6, r4
 8003422:	d109      	bne.n	8003438 <__libc_init_array+0x24>
 8003424:	f002 fefc 	bl	8006220 <_init>
 8003428:	2600      	movs	r6, #0
 800342a:	4d0a      	ldr	r5, [pc, #40]	; (8003454 <__libc_init_array+0x40>)
 800342c:	4c0a      	ldr	r4, [pc, #40]	; (8003458 <__libc_init_array+0x44>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	42a6      	cmp	r6, r4
 8003434:	d105      	bne.n	8003442 <__libc_init_array+0x2e>
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 8003438:	f855 3b04 	ldr.w	r3, [r5], #4
 800343c:	4798      	blx	r3
 800343e:	3601      	adds	r6, #1
 8003440:	e7ee      	b.n	8003420 <__libc_init_array+0xc>
 8003442:	f855 3b04 	ldr.w	r3, [r5], #4
 8003446:	4798      	blx	r3
 8003448:	3601      	adds	r6, #1
 800344a:	e7f2      	b.n	8003432 <__libc_init_array+0x1e>
 800344c:	08006664 	.word	0x08006664
 8003450:	08006664 	.word	0x08006664
 8003454:	08006664 	.word	0x08006664
 8003458:	08006668 	.word	0x08006668

0800345c <memset>:
 800345c:	4603      	mov	r3, r0
 800345e:	4402      	add	r2, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	f803 1b01 	strb.w	r1, [r3], #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <__cvt>:
 800346c:	2b00      	cmp	r3, #0
 800346e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003472:	461f      	mov	r7, r3
 8003474:	bfbb      	ittet	lt
 8003476:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800347a:	461f      	movlt	r7, r3
 800347c:	2300      	movge	r3, #0
 800347e:	232d      	movlt	r3, #45	; 0x2d
 8003480:	b088      	sub	sp, #32
 8003482:	4614      	mov	r4, r2
 8003484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003486:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003488:	7013      	strb	r3, [r2, #0]
 800348a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800348c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003490:	f023 0820 	bic.w	r8, r3, #32
 8003494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003498:	d005      	beq.n	80034a6 <__cvt+0x3a>
 800349a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800349e:	d100      	bne.n	80034a2 <__cvt+0x36>
 80034a0:	3501      	adds	r5, #1
 80034a2:	2302      	movs	r3, #2
 80034a4:	e000      	b.n	80034a8 <__cvt+0x3c>
 80034a6:	2303      	movs	r3, #3
 80034a8:	aa07      	add	r2, sp, #28
 80034aa:	9204      	str	r2, [sp, #16]
 80034ac:	aa06      	add	r2, sp, #24
 80034ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034b2:	e9cd 3500 	strd	r3, r5, [sp]
 80034b6:	4622      	mov	r2, r4
 80034b8:	463b      	mov	r3, r7
 80034ba:	f000 fce5 	bl	8003e88 <_dtoa_r>
 80034be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034c2:	4606      	mov	r6, r0
 80034c4:	d102      	bne.n	80034cc <__cvt+0x60>
 80034c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034c8:	07db      	lsls	r3, r3, #31
 80034ca:	d522      	bpl.n	8003512 <__cvt+0xa6>
 80034cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034d0:	eb06 0905 	add.w	r9, r6, r5
 80034d4:	d110      	bne.n	80034f8 <__cvt+0x8c>
 80034d6:	7833      	ldrb	r3, [r6, #0]
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d10a      	bne.n	80034f2 <__cvt+0x86>
 80034dc:	2200      	movs	r2, #0
 80034de:	2300      	movs	r3, #0
 80034e0:	4620      	mov	r0, r4
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fd fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80034e8:	b918      	cbnz	r0, 80034f2 <__cvt+0x86>
 80034ea:	f1c5 0501 	rsb	r5, r5, #1
 80034ee:	f8ca 5000 	str.w	r5, [sl]
 80034f2:	f8da 3000 	ldr.w	r3, [sl]
 80034f6:	4499      	add	r9, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	2300      	movs	r3, #0
 80034fc:	4620      	mov	r0, r4
 80034fe:	4639      	mov	r1, r7
 8003500:	f7fd fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8003504:	b108      	cbz	r0, 800350a <__cvt+0x9e>
 8003506:	f8cd 901c 	str.w	r9, [sp, #28]
 800350a:	2230      	movs	r2, #48	; 0x30
 800350c:	9b07      	ldr	r3, [sp, #28]
 800350e:	454b      	cmp	r3, r9
 8003510:	d307      	bcc.n	8003522 <__cvt+0xb6>
 8003512:	4630      	mov	r0, r6
 8003514:	9b07      	ldr	r3, [sp, #28]
 8003516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003518:	1b9b      	subs	r3, r3, r6
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	b008      	add	sp, #32
 800351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	9107      	str	r1, [sp, #28]
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e7f0      	b.n	800350c <__cvt+0xa0>

0800352a <__exponent>:
 800352a:	4603      	mov	r3, r0
 800352c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800352e:	2900      	cmp	r1, #0
 8003530:	f803 2b02 	strb.w	r2, [r3], #2
 8003534:	bfb6      	itet	lt
 8003536:	222d      	movlt	r2, #45	; 0x2d
 8003538:	222b      	movge	r2, #43	; 0x2b
 800353a:	4249      	neglt	r1, r1
 800353c:	2909      	cmp	r1, #9
 800353e:	7042      	strb	r2, [r0, #1]
 8003540:	dd2b      	ble.n	800359a <__exponent+0x70>
 8003542:	f10d 0407 	add.w	r4, sp, #7
 8003546:	46a4      	mov	ip, r4
 8003548:	270a      	movs	r7, #10
 800354a:	fb91 f6f7 	sdiv	r6, r1, r7
 800354e:	460a      	mov	r2, r1
 8003550:	46a6      	mov	lr, r4
 8003552:	fb07 1516 	mls	r5, r7, r6, r1
 8003556:	2a63      	cmp	r2, #99	; 0x63
 8003558:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800355c:	4631      	mov	r1, r6
 800355e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003562:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003566:	dcf0      	bgt.n	800354a <__exponent+0x20>
 8003568:	3130      	adds	r1, #48	; 0x30
 800356a:	f1ae 0502 	sub.w	r5, lr, #2
 800356e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003572:	4629      	mov	r1, r5
 8003574:	1c44      	adds	r4, r0, #1
 8003576:	4561      	cmp	r1, ip
 8003578:	d30a      	bcc.n	8003590 <__exponent+0x66>
 800357a:	f10d 0209 	add.w	r2, sp, #9
 800357e:	eba2 020e 	sub.w	r2, r2, lr
 8003582:	4565      	cmp	r5, ip
 8003584:	bf88      	it	hi
 8003586:	2200      	movhi	r2, #0
 8003588:	4413      	add	r3, r2
 800358a:	1a18      	subs	r0, r3, r0
 800358c:	b003      	add	sp, #12
 800358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003590:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003594:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003598:	e7ed      	b.n	8003576 <__exponent+0x4c>
 800359a:	2330      	movs	r3, #48	; 0x30
 800359c:	3130      	adds	r1, #48	; 0x30
 800359e:	7083      	strb	r3, [r0, #2]
 80035a0:	70c1      	strb	r1, [r0, #3]
 80035a2:	1d03      	adds	r3, r0, #4
 80035a4:	e7f1      	b.n	800358a <__exponent+0x60>
	...

080035a8 <_printf_float>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	b091      	sub	sp, #68	; 0x44
 80035ae:	460c      	mov	r4, r1
 80035b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80035b4:	4616      	mov	r6, r2
 80035b6:	461f      	mov	r7, r3
 80035b8:	4605      	mov	r5, r0
 80035ba:	f001 fa53 	bl	8004a64 <_localeconv_r>
 80035be:	6803      	ldr	r3, [r0, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	9309      	str	r3, [sp, #36]	; 0x24
 80035c4:	f7fc fdc4 	bl	8000150 <strlen>
 80035c8:	2300      	movs	r3, #0
 80035ca:	930e      	str	r3, [sp, #56]	; 0x38
 80035cc:	f8d8 3000 	ldr.w	r3, [r8]
 80035d0:	900a      	str	r0, [sp, #40]	; 0x28
 80035d2:	3307      	adds	r3, #7
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	f103 0208 	add.w	r2, r3, #8
 80035dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80035e0:	f8d4 b000 	ldr.w	fp, [r4]
 80035e4:	f8c8 2000 	str.w	r2, [r8]
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80035f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80035f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295
 80035fe:	4640      	mov	r0, r8
 8003600:	4b9c      	ldr	r3, [pc, #624]	; (8003874 <_printf_float+0x2cc>)
 8003602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003604:	f7fd fa02 	bl	8000a0c <__aeabi_dcmpun>
 8003608:	bb70      	cbnz	r0, 8003668 <_printf_float+0xc0>
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	4640      	mov	r0, r8
 8003610:	4b98      	ldr	r3, [pc, #608]	; (8003874 <_printf_float+0x2cc>)
 8003612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003614:	f7fd f9dc 	bl	80009d0 <__aeabi_dcmple>
 8003618:	bb30      	cbnz	r0, 8003668 <_printf_float+0xc0>
 800361a:	2200      	movs	r2, #0
 800361c:	2300      	movs	r3, #0
 800361e:	4640      	mov	r0, r8
 8003620:	4651      	mov	r1, sl
 8003622:	f7fd f9cb 	bl	80009bc <__aeabi_dcmplt>
 8003626:	b110      	cbz	r0, 800362e <_printf_float+0x86>
 8003628:	232d      	movs	r3, #45	; 0x2d
 800362a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362e:	4b92      	ldr	r3, [pc, #584]	; (8003878 <_printf_float+0x2d0>)
 8003630:	4892      	ldr	r0, [pc, #584]	; (800387c <_printf_float+0x2d4>)
 8003632:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003636:	bf94      	ite	ls
 8003638:	4698      	movls	r8, r3
 800363a:	4680      	movhi	r8, r0
 800363c:	2303      	movs	r3, #3
 800363e:	f04f 0a00 	mov.w	sl, #0
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	f02b 0304 	bic.w	r3, fp, #4
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	4633      	mov	r3, r6
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	9700      	str	r7, [sp, #0]
 8003652:	aa0f      	add	r2, sp, #60	; 0x3c
 8003654:	f000 f9d4 	bl	8003a00 <_printf_common>
 8003658:	3001      	adds	r0, #1
 800365a:	f040 8090 	bne.w	800377e <_printf_float+0x1d6>
 800365e:	f04f 30ff 	mov.w	r0, #4294967295
 8003662:	b011      	add	sp, #68	; 0x44
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	4642      	mov	r2, r8
 800366a:	4653      	mov	r3, sl
 800366c:	4640      	mov	r0, r8
 800366e:	4651      	mov	r1, sl
 8003670:	f7fd f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8003674:	b148      	cbz	r0, 800368a <_printf_float+0xe2>
 8003676:	f1ba 0f00 	cmp.w	sl, #0
 800367a:	bfb8      	it	lt
 800367c:	232d      	movlt	r3, #45	; 0x2d
 800367e:	4880      	ldr	r0, [pc, #512]	; (8003880 <_printf_float+0x2d8>)
 8003680:	bfb8      	it	lt
 8003682:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003686:	4b7f      	ldr	r3, [pc, #508]	; (8003884 <_printf_float+0x2dc>)
 8003688:	e7d3      	b.n	8003632 <_printf_float+0x8a>
 800368a:	6863      	ldr	r3, [r4, #4]
 800368c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	d142      	bne.n	800371a <_printf_float+0x172>
 8003694:	2306      	movs	r3, #6
 8003696:	6063      	str	r3, [r4, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	9206      	str	r2, [sp, #24]
 800369c:	aa0e      	add	r2, sp, #56	; 0x38
 800369e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80036a2:	aa0d      	add	r2, sp, #52	; 0x34
 80036a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80036a8:	9203      	str	r2, [sp, #12]
 80036aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80036ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	4642      	mov	r2, r8
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4628      	mov	r0, r5
 80036bc:	4653      	mov	r3, sl
 80036be:	910b      	str	r1, [sp, #44]	; 0x2c
 80036c0:	f7ff fed4 	bl	800346c <__cvt>
 80036c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036c6:	4680      	mov	r8, r0
 80036c8:	2947      	cmp	r1, #71	; 0x47
 80036ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036cc:	d108      	bne.n	80036e0 <_printf_float+0x138>
 80036ce:	1cc8      	adds	r0, r1, #3
 80036d0:	db02      	blt.n	80036d8 <_printf_float+0x130>
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	4299      	cmp	r1, r3
 80036d6:	dd40      	ble.n	800375a <_printf_float+0x1b2>
 80036d8:	f1a9 0902 	sub.w	r9, r9, #2
 80036dc:	fa5f f989 	uxtb.w	r9, r9
 80036e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80036e4:	d81f      	bhi.n	8003726 <_printf_float+0x17e>
 80036e6:	464a      	mov	r2, r9
 80036e8:	3901      	subs	r1, #1
 80036ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80036ee:	910d      	str	r1, [sp, #52]	; 0x34
 80036f0:	f7ff ff1b 	bl	800352a <__exponent>
 80036f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036f6:	4682      	mov	sl, r0
 80036f8:	1813      	adds	r3, r2, r0
 80036fa:	2a01      	cmp	r2, #1
 80036fc:	6123      	str	r3, [r4, #16]
 80036fe:	dc02      	bgt.n	8003706 <_printf_float+0x15e>
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	07d2      	lsls	r2, r2, #31
 8003704:	d501      	bpl.n	800370a <_printf_float+0x162>
 8003706:	3301      	adds	r3, #1
 8003708:	6123      	str	r3, [r4, #16]
 800370a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800370e:	2b00      	cmp	r3, #0
 8003710:	d09b      	beq.n	800364a <_printf_float+0xa2>
 8003712:	232d      	movs	r3, #45	; 0x2d
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003718:	e797      	b.n	800364a <_printf_float+0xa2>
 800371a:	2947      	cmp	r1, #71	; 0x47
 800371c:	d1bc      	bne.n	8003698 <_printf_float+0xf0>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ba      	bne.n	8003698 <_printf_float+0xf0>
 8003722:	2301      	movs	r3, #1
 8003724:	e7b7      	b.n	8003696 <_printf_float+0xee>
 8003726:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800372a:	d118      	bne.n	800375e <_printf_float+0x1b6>
 800372c:	2900      	cmp	r1, #0
 800372e:	6863      	ldr	r3, [r4, #4]
 8003730:	dd0b      	ble.n	800374a <_printf_float+0x1a2>
 8003732:	6121      	str	r1, [r4, #16]
 8003734:	b913      	cbnz	r3, 800373c <_printf_float+0x194>
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	07d0      	lsls	r0, r2, #31
 800373a:	d502      	bpl.n	8003742 <_printf_float+0x19a>
 800373c:	3301      	adds	r3, #1
 800373e:	440b      	add	r3, r1
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	f04f 0a00 	mov.w	sl, #0
 8003746:	65a1      	str	r1, [r4, #88]	; 0x58
 8003748:	e7df      	b.n	800370a <_printf_float+0x162>
 800374a:	b913      	cbnz	r3, 8003752 <_printf_float+0x1aa>
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	07d2      	lsls	r2, r2, #31
 8003750:	d501      	bpl.n	8003756 <_printf_float+0x1ae>
 8003752:	3302      	adds	r3, #2
 8003754:	e7f4      	b.n	8003740 <_printf_float+0x198>
 8003756:	2301      	movs	r3, #1
 8003758:	e7f2      	b.n	8003740 <_printf_float+0x198>
 800375a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800375e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003760:	4299      	cmp	r1, r3
 8003762:	db05      	blt.n	8003770 <_printf_float+0x1c8>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	6121      	str	r1, [r4, #16]
 8003768:	07d8      	lsls	r0, r3, #31
 800376a:	d5ea      	bpl.n	8003742 <_printf_float+0x19a>
 800376c:	1c4b      	adds	r3, r1, #1
 800376e:	e7e7      	b.n	8003740 <_printf_float+0x198>
 8003770:	2900      	cmp	r1, #0
 8003772:	bfcc      	ite	gt
 8003774:	2201      	movgt	r2, #1
 8003776:	f1c1 0202 	rsble	r2, r1, #2
 800377a:	4413      	add	r3, r2
 800377c:	e7e0      	b.n	8003740 <_printf_float+0x198>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	055a      	lsls	r2, r3, #21
 8003782:	d407      	bmi.n	8003794 <_printf_float+0x1ec>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	4642      	mov	r2, r8
 8003788:	4631      	mov	r1, r6
 800378a:	4628      	mov	r0, r5
 800378c:	47b8      	blx	r7
 800378e:	3001      	adds	r0, #1
 8003790:	d12b      	bne.n	80037ea <_printf_float+0x242>
 8003792:	e764      	b.n	800365e <_printf_float+0xb6>
 8003794:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003798:	f240 80dd 	bls.w	8003956 <_printf_float+0x3ae>
 800379c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a0:	2200      	movs	r2, #0
 80037a2:	2300      	movs	r3, #0
 80037a4:	f7fd f900 	bl	80009a8 <__aeabi_dcmpeq>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d033      	beq.n	8003814 <_printf_float+0x26c>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	4a35      	ldr	r2, [pc, #212]	; (8003888 <_printf_float+0x2e0>)
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f af51 	beq.w	800365e <_printf_float+0xb6>
 80037bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037c0:	429a      	cmp	r2, r3
 80037c2:	db02      	blt.n	80037ca <_printf_float+0x222>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	07d8      	lsls	r0, r3, #31
 80037c8:	d50f      	bpl.n	80037ea <_printf_float+0x242>
 80037ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	f43f af42 	beq.w	800365e <_printf_float+0xb6>
 80037da:	f04f 0800 	mov.w	r8, #0
 80037de:	f104 091a 	add.w	r9, r4, #26
 80037e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037e4:	3b01      	subs	r3, #1
 80037e6:	4543      	cmp	r3, r8
 80037e8:	dc09      	bgt.n	80037fe <_printf_float+0x256>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	079b      	lsls	r3, r3, #30
 80037ee:	f100 8102 	bmi.w	80039f6 <_printf_float+0x44e>
 80037f2:	68e0      	ldr	r0, [r4, #12]
 80037f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037f6:	4298      	cmp	r0, r3
 80037f8:	bfb8      	it	lt
 80037fa:	4618      	movlt	r0, r3
 80037fc:	e731      	b.n	8003662 <_printf_float+0xba>
 80037fe:	2301      	movs	r3, #1
 8003800:	464a      	mov	r2, r9
 8003802:	4631      	mov	r1, r6
 8003804:	4628      	mov	r0, r5
 8003806:	47b8      	blx	r7
 8003808:	3001      	adds	r0, #1
 800380a:	f43f af28 	beq.w	800365e <_printf_float+0xb6>
 800380e:	f108 0801 	add.w	r8, r8, #1
 8003812:	e7e6      	b.n	80037e2 <_printf_float+0x23a>
 8003814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	dc38      	bgt.n	800388c <_printf_float+0x2e4>
 800381a:	2301      	movs	r3, #1
 800381c:	4631      	mov	r1, r6
 800381e:	4628      	mov	r0, r5
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <_printf_float+0x2e0>)
 8003822:	47b8      	blx	r7
 8003824:	3001      	adds	r0, #1
 8003826:	f43f af1a 	beq.w	800365e <_printf_float+0xb6>
 800382a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800382e:	4313      	orrs	r3, r2
 8003830:	d102      	bne.n	8003838 <_printf_float+0x290>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	07d9      	lsls	r1, r3, #31
 8003836:	d5d8      	bpl.n	80037ea <_printf_float+0x242>
 8003838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800383c:	4631      	mov	r1, r6
 800383e:	4628      	mov	r0, r5
 8003840:	47b8      	blx	r7
 8003842:	3001      	adds	r0, #1
 8003844:	f43f af0b 	beq.w	800365e <_printf_float+0xb6>
 8003848:	f04f 0900 	mov.w	r9, #0
 800384c:	f104 0a1a 	add.w	sl, r4, #26
 8003850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003852:	425b      	negs	r3, r3
 8003854:	454b      	cmp	r3, r9
 8003856:	dc01      	bgt.n	800385c <_printf_float+0x2b4>
 8003858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800385a:	e794      	b.n	8003786 <_printf_float+0x1de>
 800385c:	2301      	movs	r3, #1
 800385e:	4652      	mov	r2, sl
 8003860:	4631      	mov	r1, r6
 8003862:	4628      	mov	r0, r5
 8003864:	47b8      	blx	r7
 8003866:	3001      	adds	r0, #1
 8003868:	f43f aef9 	beq.w	800365e <_printf_float+0xb6>
 800386c:	f109 0901 	add.w	r9, r9, #1
 8003870:	e7ee      	b.n	8003850 <_printf_float+0x2a8>
 8003872:	bf00      	nop
 8003874:	7fefffff 	.word	0x7fefffff
 8003878:	08006290 	.word	0x08006290
 800387c:	08006294 	.word	0x08006294
 8003880:	0800629c 	.word	0x0800629c
 8003884:	08006298 	.word	0x08006298
 8003888:	080062a0 	.word	0x080062a0
 800388c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800388e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003890:	429a      	cmp	r2, r3
 8003892:	bfa8      	it	ge
 8003894:	461a      	movge	r2, r3
 8003896:	2a00      	cmp	r2, #0
 8003898:	4691      	mov	r9, r2
 800389a:	dc37      	bgt.n	800390c <_printf_float+0x364>
 800389c:	f04f 0b00 	mov.w	fp, #0
 80038a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038a4:	f104 021a 	add.w	r2, r4, #26
 80038a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80038ac:	ebaa 0309 	sub.w	r3, sl, r9
 80038b0:	455b      	cmp	r3, fp
 80038b2:	dc33      	bgt.n	800391c <_printf_float+0x374>
 80038b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038b8:	429a      	cmp	r2, r3
 80038ba:	db3b      	blt.n	8003934 <_printf_float+0x38c>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	07da      	lsls	r2, r3, #31
 80038c0:	d438      	bmi.n	8003934 <_printf_float+0x38c>
 80038c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038c6:	eba3 020a 	sub.w	r2, r3, sl
 80038ca:	eba3 0901 	sub.w	r9, r3, r1
 80038ce:	4591      	cmp	r9, r2
 80038d0:	bfa8      	it	ge
 80038d2:	4691      	movge	r9, r2
 80038d4:	f1b9 0f00 	cmp.w	r9, #0
 80038d8:	dc34      	bgt.n	8003944 <_printf_float+0x39c>
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038e2:	f104 0a1a 	add.w	sl, r4, #26
 80038e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	eba3 0309 	sub.w	r3, r3, r9
 80038f0:	4543      	cmp	r3, r8
 80038f2:	f77f af7a 	ble.w	80037ea <_printf_float+0x242>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4652      	mov	r2, sl
 80038fa:	4631      	mov	r1, r6
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b8      	blx	r7
 8003900:	3001      	adds	r0, #1
 8003902:	f43f aeac 	beq.w	800365e <_printf_float+0xb6>
 8003906:	f108 0801 	add.w	r8, r8, #1
 800390a:	e7ec      	b.n	80038e6 <_printf_float+0x33e>
 800390c:	4613      	mov	r3, r2
 800390e:	4631      	mov	r1, r6
 8003910:	4642      	mov	r2, r8
 8003912:	4628      	mov	r0, r5
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	d1c0      	bne.n	800389c <_printf_float+0x2f4>
 800391a:	e6a0      	b.n	800365e <_printf_float+0xb6>
 800391c:	2301      	movs	r3, #1
 800391e:	4631      	mov	r1, r6
 8003920:	4628      	mov	r0, r5
 8003922:	920b      	str	r2, [sp, #44]	; 0x2c
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f ae99 	beq.w	800365e <_printf_float+0xb6>
 800392c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800392e:	f10b 0b01 	add.w	fp, fp, #1
 8003932:	e7b9      	b.n	80038a8 <_printf_float+0x300>
 8003934:	4631      	mov	r1, r6
 8003936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800393a:	4628      	mov	r0, r5
 800393c:	47b8      	blx	r7
 800393e:	3001      	adds	r0, #1
 8003940:	d1bf      	bne.n	80038c2 <_printf_float+0x31a>
 8003942:	e68c      	b.n	800365e <_printf_float+0xb6>
 8003944:	464b      	mov	r3, r9
 8003946:	4631      	mov	r1, r6
 8003948:	4628      	mov	r0, r5
 800394a:	eb08 020a 	add.w	r2, r8, sl
 800394e:	47b8      	blx	r7
 8003950:	3001      	adds	r0, #1
 8003952:	d1c2      	bne.n	80038da <_printf_float+0x332>
 8003954:	e683      	b.n	800365e <_printf_float+0xb6>
 8003956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003958:	2a01      	cmp	r2, #1
 800395a:	dc01      	bgt.n	8003960 <_printf_float+0x3b8>
 800395c:	07db      	lsls	r3, r3, #31
 800395e:	d537      	bpl.n	80039d0 <_printf_float+0x428>
 8003960:	2301      	movs	r3, #1
 8003962:	4642      	mov	r2, r8
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	f43f ae77 	beq.w	800365e <_printf_float+0xb6>
 8003970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003974:	4631      	mov	r1, r6
 8003976:	4628      	mov	r0, r5
 8003978:	47b8      	blx	r7
 800397a:	3001      	adds	r0, #1
 800397c:	f43f ae6f 	beq.w	800365e <_printf_float+0xb6>
 8003980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003984:	2200      	movs	r2, #0
 8003986:	2300      	movs	r3, #0
 8003988:	f7fd f80e 	bl	80009a8 <__aeabi_dcmpeq>
 800398c:	b9d8      	cbnz	r0, 80039c6 <_printf_float+0x41e>
 800398e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003990:	f108 0201 	add.w	r2, r8, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	4631      	mov	r1, r6
 8003998:	4628      	mov	r0, r5
 800399a:	47b8      	blx	r7
 800399c:	3001      	adds	r0, #1
 800399e:	d10e      	bne.n	80039be <_printf_float+0x416>
 80039a0:	e65d      	b.n	800365e <_printf_float+0xb6>
 80039a2:	2301      	movs	r3, #1
 80039a4:	464a      	mov	r2, r9
 80039a6:	4631      	mov	r1, r6
 80039a8:	4628      	mov	r0, r5
 80039aa:	47b8      	blx	r7
 80039ac:	3001      	adds	r0, #1
 80039ae:	f43f ae56 	beq.w	800365e <_printf_float+0xb6>
 80039b2:	f108 0801 	add.w	r8, r8, #1
 80039b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4543      	cmp	r3, r8
 80039bc:	dcf1      	bgt.n	80039a2 <_printf_float+0x3fa>
 80039be:	4653      	mov	r3, sl
 80039c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039c4:	e6e0      	b.n	8003788 <_printf_float+0x1e0>
 80039c6:	f04f 0800 	mov.w	r8, #0
 80039ca:	f104 091a 	add.w	r9, r4, #26
 80039ce:	e7f2      	b.n	80039b6 <_printf_float+0x40e>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4642      	mov	r2, r8
 80039d4:	e7df      	b.n	8003996 <_printf_float+0x3ee>
 80039d6:	2301      	movs	r3, #1
 80039d8:	464a      	mov	r2, r9
 80039da:	4631      	mov	r1, r6
 80039dc:	4628      	mov	r0, r5
 80039de:	47b8      	blx	r7
 80039e0:	3001      	adds	r0, #1
 80039e2:	f43f ae3c 	beq.w	800365e <_printf_float+0xb6>
 80039e6:	f108 0801 	add.w	r8, r8, #1
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80039ee:	1a5b      	subs	r3, r3, r1
 80039f0:	4543      	cmp	r3, r8
 80039f2:	dcf0      	bgt.n	80039d6 <_printf_float+0x42e>
 80039f4:	e6fd      	b.n	80037f2 <_printf_float+0x24a>
 80039f6:	f04f 0800 	mov.w	r8, #0
 80039fa:	f104 0919 	add.w	r9, r4, #25
 80039fe:	e7f4      	b.n	80039ea <_printf_float+0x442>

08003a00 <_printf_common>:
 8003a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	4616      	mov	r6, r2
 8003a06:	4699      	mov	r9, r3
 8003a08:	688a      	ldr	r2, [r1, #8]
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bfb8      	it	lt
 8003a12:	4613      	movlt	r3, r2
 8003a14:	6033      	str	r3, [r6, #0]
 8003a16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a20:	b10a      	cbz	r2, 8003a26 <_printf_common+0x26>
 8003a22:	3301      	adds	r3, #1
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	0699      	lsls	r1, r3, #26
 8003a2a:	bf42      	ittt	mi
 8003a2c:	6833      	ldrmi	r3, [r6, #0]
 8003a2e:	3302      	addmi	r3, #2
 8003a30:	6033      	strmi	r3, [r6, #0]
 8003a32:	6825      	ldr	r5, [r4, #0]
 8003a34:	f015 0506 	ands.w	r5, r5, #6
 8003a38:	d106      	bne.n	8003a48 <_printf_common+0x48>
 8003a3a:	f104 0a19 	add.w	sl, r4, #25
 8003a3e:	68e3      	ldr	r3, [r4, #12]
 8003a40:	6832      	ldr	r2, [r6, #0]
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	42ab      	cmp	r3, r5
 8003a46:	dc28      	bgt.n	8003a9a <_printf_common+0x9a>
 8003a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a4c:	1e13      	subs	r3, r2, #0
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	bf18      	it	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	0692      	lsls	r2, r2, #26
 8003a56:	d42d      	bmi.n	8003ab4 <_printf_common+0xb4>
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a60:	47c0      	blx	r8
 8003a62:	3001      	adds	r0, #1
 8003a64:	d020      	beq.n	8003aa8 <_printf_common+0xa8>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	68e5      	ldr	r5, [r4, #12]
 8003a6a:	f003 0306 	and.w	r3, r3, #6
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf18      	it	ne
 8003a72:	2500      	movne	r5, #0
 8003a74:	6832      	ldr	r2, [r6, #0]
 8003a76:	f04f 0600 	mov.w	r6, #0
 8003a7a:	68a3      	ldr	r3, [r4, #8]
 8003a7c:	bf08      	it	eq
 8003a7e:	1aad      	subeq	r5, r5, r2
 8003a80:	6922      	ldr	r2, [r4, #16]
 8003a82:	bf08      	it	eq
 8003a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bfc4      	itt	gt
 8003a8c:	1a9b      	subgt	r3, r3, r2
 8003a8e:	18ed      	addgt	r5, r5, r3
 8003a90:	341a      	adds	r4, #26
 8003a92:	42b5      	cmp	r5, r6
 8003a94:	d11a      	bne.n	8003acc <_printf_common+0xcc>
 8003a96:	2000      	movs	r0, #0
 8003a98:	e008      	b.n	8003aac <_printf_common+0xac>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4652      	mov	r2, sl
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	47c0      	blx	r8
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d103      	bne.n	8003ab0 <_printf_common+0xb0>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	3501      	adds	r5, #1
 8003ab2:	e7c4      	b.n	8003a3e <_printf_common+0x3e>
 8003ab4:	2030      	movs	r0, #48	; 0x30
 8003ab6:	18e1      	adds	r1, r4, r3
 8003ab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ac2:	4422      	add	r2, r4
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aca:	e7c5      	b.n	8003a58 <_printf_common+0x58>
 8003acc:	2301      	movs	r3, #1
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	47c0      	blx	r8
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d0e6      	beq.n	8003aa8 <_printf_common+0xa8>
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7d9      	b.n	8003a92 <_printf_common+0x92>
	...

08003ae0 <_printf_i>:
 8003ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	7e0f      	ldrb	r7, [r1, #24]
 8003ae6:	4691      	mov	r9, r2
 8003ae8:	2f78      	cmp	r7, #120	; 0x78
 8003aea:	4680      	mov	r8, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	469a      	mov	sl, r3
 8003af0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003af6:	d807      	bhi.n	8003b08 <_printf_i+0x28>
 8003af8:	2f62      	cmp	r7, #98	; 0x62
 8003afa:	d80a      	bhi.n	8003b12 <_printf_i+0x32>
 8003afc:	2f00      	cmp	r7, #0
 8003afe:	f000 80d9 	beq.w	8003cb4 <_printf_i+0x1d4>
 8003b02:	2f58      	cmp	r7, #88	; 0x58
 8003b04:	f000 80a4 	beq.w	8003c50 <_printf_i+0x170>
 8003b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b10:	e03a      	b.n	8003b88 <_printf_i+0xa8>
 8003b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b16:	2b15      	cmp	r3, #21
 8003b18:	d8f6      	bhi.n	8003b08 <_printf_i+0x28>
 8003b1a:	a101      	add	r1, pc, #4	; (adr r1, 8003b20 <_printf_i+0x40>)
 8003b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b20:	08003b79 	.word	0x08003b79
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003b09 	.word	0x08003b09
 8003b2c:	08003b09 	.word	0x08003b09
 8003b30:	08003b09 	.word	0x08003b09
 8003b34:	08003b09 	.word	0x08003b09
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003b09 	.word	0x08003b09
 8003b40:	08003b09 	.word	0x08003b09
 8003b44:	08003b09 	.word	0x08003b09
 8003b48:	08003b09 	.word	0x08003b09
 8003b4c:	08003c9b 	.word	0x08003c9b
 8003b50:	08003bbd 	.word	0x08003bbd
 8003b54:	08003c7d 	.word	0x08003c7d
 8003b58:	08003b09 	.word	0x08003b09
 8003b5c:	08003b09 	.word	0x08003b09
 8003b60:	08003cbd 	.word	0x08003cbd
 8003b64:	08003b09 	.word	0x08003b09
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003b09 	.word	0x08003b09
 8003b70:	08003b09 	.word	0x08003b09
 8003b74:	08003c85 	.word	0x08003c85
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	1d1a      	adds	r2, r3, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	602a      	str	r2, [r5, #0]
 8003b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0a4      	b.n	8003cd6 <_printf_i+0x1f6>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	6829      	ldr	r1, [r5, #0]
 8003b90:	0606      	lsls	r6, r0, #24
 8003b92:	f101 0304 	add.w	r3, r1, #4
 8003b96:	d50a      	bpl.n	8003bae <_printf_i+0xce>
 8003b98:	680e      	ldr	r6, [r1, #0]
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	2e00      	cmp	r6, #0
 8003b9e:	da03      	bge.n	8003ba8 <_printf_i+0xc8>
 8003ba0:	232d      	movs	r3, #45	; 0x2d
 8003ba2:	4276      	negs	r6, r6
 8003ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba8:	230a      	movs	r3, #10
 8003baa:	485e      	ldr	r0, [pc, #376]	; (8003d24 <_printf_i+0x244>)
 8003bac:	e019      	b.n	8003be2 <_printf_i+0x102>
 8003bae:	680e      	ldr	r6, [r1, #0]
 8003bb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	bf18      	it	ne
 8003bb8:	b236      	sxthne	r6, r6
 8003bba:	e7ef      	b.n	8003b9c <_printf_i+0xbc>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	6820      	ldr	r0, [r4, #0]
 8003bc0:	1d19      	adds	r1, r3, #4
 8003bc2:	6029      	str	r1, [r5, #0]
 8003bc4:	0601      	lsls	r1, r0, #24
 8003bc6:	d501      	bpl.n	8003bcc <_printf_i+0xec>
 8003bc8:	681e      	ldr	r6, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <_printf_i+0xf2>
 8003bcc:	0646      	lsls	r6, r0, #25
 8003bce:	d5fb      	bpl.n	8003bc8 <_printf_i+0xe8>
 8003bd0:	881e      	ldrh	r6, [r3, #0]
 8003bd2:	2f6f      	cmp	r7, #111	; 0x6f
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2308      	moveq	r3, #8
 8003bd8:	230a      	movne	r3, #10
 8003bda:	4852      	ldr	r0, [pc, #328]	; (8003d24 <_printf_i+0x244>)
 8003bdc:	2100      	movs	r1, #0
 8003bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003be2:	6865      	ldr	r5, [r4, #4]
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	bfa8      	it	ge
 8003be8:	6821      	ldrge	r1, [r4, #0]
 8003bea:	60a5      	str	r5, [r4, #8]
 8003bec:	bfa4      	itt	ge
 8003bee:	f021 0104 	bicge.w	r1, r1, #4
 8003bf2:	6021      	strge	r1, [r4, #0]
 8003bf4:	b90e      	cbnz	r6, 8003bfa <_printf_i+0x11a>
 8003bf6:	2d00      	cmp	r5, #0
 8003bf8:	d04d      	beq.n	8003c96 <_printf_i+0x1b6>
 8003bfa:	4615      	mov	r5, r2
 8003bfc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c00:	fb03 6711 	mls	r7, r3, r1, r6
 8003c04:	5dc7      	ldrb	r7, [r0, r7]
 8003c06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c0a:	4637      	mov	r7, r6
 8003c0c:	42bb      	cmp	r3, r7
 8003c0e:	460e      	mov	r6, r1
 8003c10:	d9f4      	bls.n	8003bfc <_printf_i+0x11c>
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d10b      	bne.n	8003c2e <_printf_i+0x14e>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	07de      	lsls	r6, r3, #31
 8003c1a:	d508      	bpl.n	8003c2e <_printf_i+0x14e>
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	6861      	ldr	r1, [r4, #4]
 8003c20:	4299      	cmp	r1, r3
 8003c22:	bfde      	ittt	le
 8003c24:	2330      	movle	r3, #48	; 0x30
 8003c26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c2e:	1b52      	subs	r2, r2, r5
 8003c30:	6122      	str	r2, [r4, #16]
 8003c32:	464b      	mov	r3, r9
 8003c34:	4621      	mov	r1, r4
 8003c36:	4640      	mov	r0, r8
 8003c38:	f8cd a000 	str.w	sl, [sp]
 8003c3c:	aa03      	add	r2, sp, #12
 8003c3e:	f7ff fedf 	bl	8003a00 <_printf_common>
 8003c42:	3001      	adds	r0, #1
 8003c44:	d14c      	bne.n	8003ce0 <_printf_i+0x200>
 8003c46:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4a:	b004      	add	sp, #16
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	4834      	ldr	r0, [pc, #208]	; (8003d24 <_printf_i+0x244>)
 8003c52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c56:	6829      	ldr	r1, [r5, #0]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c5e:	6029      	str	r1, [r5, #0]
 8003c60:	061d      	lsls	r5, r3, #24
 8003c62:	d514      	bpl.n	8003c8e <_printf_i+0x1ae>
 8003c64:	07df      	lsls	r7, r3, #31
 8003c66:	bf44      	itt	mi
 8003c68:	f043 0320 	orrmi.w	r3, r3, #32
 8003c6c:	6023      	strmi	r3, [r4, #0]
 8003c6e:	b91e      	cbnz	r6, 8003c78 <_printf_i+0x198>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f023 0320 	bic.w	r3, r3, #32
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	2310      	movs	r3, #16
 8003c7a:	e7af      	b.n	8003bdc <_printf_i+0xfc>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	6023      	str	r3, [r4, #0]
 8003c84:	2378      	movs	r3, #120	; 0x78
 8003c86:	4828      	ldr	r0, [pc, #160]	; (8003d28 <_printf_i+0x248>)
 8003c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c8c:	e7e3      	b.n	8003c56 <_printf_i+0x176>
 8003c8e:	0659      	lsls	r1, r3, #25
 8003c90:	bf48      	it	mi
 8003c92:	b2b6      	uxthmi	r6, r6
 8003c94:	e7e6      	b.n	8003c64 <_printf_i+0x184>
 8003c96:	4615      	mov	r5, r2
 8003c98:	e7bb      	b.n	8003c12 <_printf_i+0x132>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	6826      	ldr	r6, [r4, #0]
 8003c9e:	1d18      	adds	r0, r3, #4
 8003ca0:	6961      	ldr	r1, [r4, #20]
 8003ca2:	6028      	str	r0, [r5, #0]
 8003ca4:	0635      	lsls	r5, r6, #24
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	d501      	bpl.n	8003cae <_printf_i+0x1ce>
 8003caa:	6019      	str	r1, [r3, #0]
 8003cac:	e002      	b.n	8003cb4 <_printf_i+0x1d4>
 8003cae:	0670      	lsls	r0, r6, #25
 8003cb0:	d5fb      	bpl.n	8003caa <_printf_i+0x1ca>
 8003cb2:	8019      	strh	r1, [r3, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4615      	mov	r5, r2
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	e7ba      	b.n	8003c32 <_printf_i+0x152>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	1d1a      	adds	r2, r3, #4
 8003cc2:	602a      	str	r2, [r5, #0]
 8003cc4:	681d      	ldr	r5, [r3, #0]
 8003cc6:	6862      	ldr	r2, [r4, #4]
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fed7 	bl	8004a7c <memchr>
 8003cce:	b108      	cbz	r0, 8003cd4 <_printf_i+0x1f4>
 8003cd0:	1b40      	subs	r0, r0, r5
 8003cd2:	6060      	str	r0, [r4, #4]
 8003cd4:	6863      	ldr	r3, [r4, #4]
 8003cd6:	6123      	str	r3, [r4, #16]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cde:	e7a8      	b.n	8003c32 <_printf_i+0x152>
 8003ce0:	462a      	mov	r2, r5
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	47d0      	blx	sl
 8003cea:	3001      	adds	r0, #1
 8003cec:	d0ab      	beq.n	8003c46 <_printf_i+0x166>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	079b      	lsls	r3, r3, #30
 8003cf2:	d413      	bmi.n	8003d1c <_printf_i+0x23c>
 8003cf4:	68e0      	ldr	r0, [r4, #12]
 8003cf6:	9b03      	ldr	r3, [sp, #12]
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	bfb8      	it	lt
 8003cfc:	4618      	movlt	r0, r3
 8003cfe:	e7a4      	b.n	8003c4a <_printf_i+0x16a>
 8003d00:	2301      	movs	r3, #1
 8003d02:	4632      	mov	r2, r6
 8003d04:	4649      	mov	r1, r9
 8003d06:	4640      	mov	r0, r8
 8003d08:	47d0      	blx	sl
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d09b      	beq.n	8003c46 <_printf_i+0x166>
 8003d0e:	3501      	adds	r5, #1
 8003d10:	68e3      	ldr	r3, [r4, #12]
 8003d12:	9903      	ldr	r1, [sp, #12]
 8003d14:	1a5b      	subs	r3, r3, r1
 8003d16:	42ab      	cmp	r3, r5
 8003d18:	dcf2      	bgt.n	8003d00 <_printf_i+0x220>
 8003d1a:	e7eb      	b.n	8003cf4 <_printf_i+0x214>
 8003d1c:	2500      	movs	r5, #0
 8003d1e:	f104 0619 	add.w	r6, r4, #25
 8003d22:	e7f5      	b.n	8003d10 <_printf_i+0x230>
 8003d24:	080062a2 	.word	0x080062a2
 8003d28:	080062b3 	.word	0x080062b3

08003d2c <siprintf>:
 8003d2c:	b40e      	push	{r1, r2, r3}
 8003d2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d32:	b500      	push	{lr}
 8003d34:	b09c      	sub	sp, #112	; 0x70
 8003d36:	ab1d      	add	r3, sp, #116	; 0x74
 8003d38:	9002      	str	r0, [sp, #8]
 8003d3a:	9006      	str	r0, [sp, #24]
 8003d3c:	9107      	str	r1, [sp, #28]
 8003d3e:	9104      	str	r1, [sp, #16]
 8003d40:	4808      	ldr	r0, [pc, #32]	; (8003d64 <siprintf+0x38>)
 8003d42:	4909      	ldr	r1, [pc, #36]	; (8003d68 <siprintf+0x3c>)
 8003d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d48:	9105      	str	r1, [sp, #20]
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	a902      	add	r1, sp, #8
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	f001 fb7e 	bl	8005450 <_svfiprintf_r>
 8003d54:	2200      	movs	r2, #0
 8003d56:	9b02      	ldr	r3, [sp, #8]
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	b01c      	add	sp, #112	; 0x70
 8003d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d60:	b003      	add	sp, #12
 8003d62:	4770      	bx	lr
 8003d64:	2000000c 	.word	0x2000000c
 8003d68:	ffff0208 	.word	0xffff0208

08003d6c <quorem>:
 8003d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	6903      	ldr	r3, [r0, #16]
 8003d72:	690c      	ldr	r4, [r1, #16]
 8003d74:	4607      	mov	r7, r0
 8003d76:	42a3      	cmp	r3, r4
 8003d78:	f2c0 8082 	blt.w	8003e80 <quorem+0x114>
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	f100 0514 	add.w	r5, r0, #20
 8003d82:	f101 0814 	add.w	r8, r1, #20
 8003d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d94:	3301      	adds	r3, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003da4:	d331      	bcc.n	8003e0a <quorem+0x9e>
 8003da6:	f04f 0e00 	mov.w	lr, #0
 8003daa:	4640      	mov	r0, r8
 8003dac:	46ac      	mov	ip, r5
 8003dae:	46f2      	mov	sl, lr
 8003db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003db4:	b293      	uxth	r3, r2
 8003db6:	fb06 e303 	mla	r3, r6, r3, lr
 8003dba:	0c12      	lsrs	r2, r2, #16
 8003dbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8003dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8003dca:	f8dc a000 	ldr.w	sl, [ip]
 8003dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dd2:	fa1f fa8a 	uxth.w	sl, sl
 8003dd6:	4453      	add	r3, sl
 8003dd8:	f8dc a000 	ldr.w	sl, [ip]
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dec:	4581      	cmp	r9, r0
 8003dee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003df2:	f84c 3b04 	str.w	r3, [ip], #4
 8003df6:	d2db      	bcs.n	8003db0 <quorem+0x44>
 8003df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003dfc:	b92b      	cbnz	r3, 8003e0a <quorem+0x9e>
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	3b04      	subs	r3, #4
 8003e02:	429d      	cmp	r5, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	d32f      	bcc.n	8003e68 <quorem+0xfc>
 8003e08:	613c      	str	r4, [r7, #16]
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f001 f8d0 	bl	8004fb0 <__mcmp>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	db25      	blt.n	8003e60 <quorem+0xf4>
 8003e14:	4628      	mov	r0, r5
 8003e16:	f04f 0c00 	mov.w	ip, #0
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003e20:	f8d0 e000 	ldr.w	lr, [r0]
 8003e24:	b28b      	uxth	r3, r1
 8003e26:	ebac 0303 	sub.w	r3, ip, r3
 8003e2a:	fa1f f28e 	uxth.w	r2, lr
 8003e2e:	4413      	add	r3, r2
 8003e30:	0c0a      	lsrs	r2, r1, #16
 8003e32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e40:	45c1      	cmp	r9, r8
 8003e42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e46:	f840 3b04 	str.w	r3, [r0], #4
 8003e4a:	d2e7      	bcs.n	8003e1c <quorem+0xb0>
 8003e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e54:	b922      	cbnz	r2, 8003e60 <quorem+0xf4>
 8003e56:	3b04      	subs	r3, #4
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	d30a      	bcc.n	8003e74 <quorem+0x108>
 8003e5e:	613c      	str	r4, [r7, #16]
 8003e60:	4630      	mov	r0, r6
 8003e62:	b003      	add	sp, #12
 8003e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	2a00      	cmp	r2, #0
 8003e6e:	d1cb      	bne.n	8003e08 <quorem+0x9c>
 8003e70:	3c01      	subs	r4, #1
 8003e72:	e7c6      	b.n	8003e02 <quorem+0x96>
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d1f0      	bne.n	8003e5e <quorem+0xf2>
 8003e7c:	3c01      	subs	r4, #1
 8003e7e:	e7eb      	b.n	8003e58 <quorem+0xec>
 8003e80:	2000      	movs	r0, #0
 8003e82:	e7ee      	b.n	8003e62 <quorem+0xf6>
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <_dtoa_r>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	461f      	mov	r7, r3
 8003e90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003e92:	b099      	sub	sp, #100	; 0x64
 8003e94:	4605      	mov	r5, r0
 8003e96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003e9e:	b974      	cbnz	r4, 8003ebe <_dtoa_r+0x36>
 8003ea0:	2010      	movs	r0, #16
 8003ea2:	f000 fde3 	bl	8004a6c <malloc>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6268      	str	r0, [r5, #36]	; 0x24
 8003eaa:	b920      	cbnz	r0, 8003eb6 <_dtoa_r+0x2e>
 8003eac:	21ea      	movs	r1, #234	; 0xea
 8003eae:	4ba8      	ldr	r3, [pc, #672]	; (8004150 <_dtoa_r+0x2c8>)
 8003eb0:	48a8      	ldr	r0, [pc, #672]	; (8004154 <_dtoa_r+0x2cc>)
 8003eb2:	f001 fbdd 	bl	8005670 <__assert_func>
 8003eb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003eba:	6004      	str	r4, [r0, #0]
 8003ebc:	60c4      	str	r4, [r0, #12]
 8003ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	b151      	cbz	r1, 8003eda <_dtoa_r+0x52>
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	604a      	str	r2, [r1, #4]
 8003ecc:	608b      	str	r3, [r1, #8]
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 fe30 	bl	8004b34 <_Bfree>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	1e3b      	subs	r3, r7, #0
 8003edc:	bfaf      	iteee	ge
 8003ede:	2300      	movge	r3, #0
 8003ee0:	2201      	movlt	r2, #1
 8003ee2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ee6:	9305      	strlt	r3, [sp, #20]
 8003ee8:	bfa8      	it	ge
 8003eea:	f8c8 3000 	strge.w	r3, [r8]
 8003eee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ef2:	4b99      	ldr	r3, [pc, #612]	; (8004158 <_dtoa_r+0x2d0>)
 8003ef4:	bfb8      	it	lt
 8003ef6:	f8c8 2000 	strlt.w	r2, [r8]
 8003efa:	ea33 0309 	bics.w	r3, r3, r9
 8003efe:	d119      	bne.n	8003f34 <_dtoa_r+0xac>
 8003f00:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f0c:	4333      	orrs	r3, r6
 8003f0e:	f000 857f 	beq.w	8004a10 <_dtoa_r+0xb88>
 8003f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f14:	b953      	cbnz	r3, 8003f2c <_dtoa_r+0xa4>
 8003f16:	4b91      	ldr	r3, [pc, #580]	; (800415c <_dtoa_r+0x2d4>)
 8003f18:	e022      	b.n	8003f60 <_dtoa_r+0xd8>
 8003f1a:	4b91      	ldr	r3, [pc, #580]	; (8004160 <_dtoa_r+0x2d8>)
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	9803      	ldr	r0, [sp, #12]
 8003f26:	b019      	add	sp, #100	; 0x64
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	4b8b      	ldr	r3, [pc, #556]	; (800415c <_dtoa_r+0x2d4>)
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	3303      	adds	r3, #3
 8003f32:	e7f5      	b.n	8003f20 <_dtoa_r+0x98>
 8003f34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003f3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	2300      	movs	r3, #0
 8003f44:	f7fc fd30 	bl	80009a8 <__aeabi_dcmpeq>
 8003f48:	4680      	mov	r8, r0
 8003f4a:	b158      	cbz	r0, 8003f64 <_dtoa_r+0xdc>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8558 	beq.w	8004a0a <_dtoa_r+0xb82>
 8003f5a:	4882      	ldr	r0, [pc, #520]	; (8004164 <_dtoa_r+0x2dc>)
 8003f5c:	6018      	str	r0, [r3, #0]
 8003f5e:	1e43      	subs	r3, r0, #1
 8003f60:	9303      	str	r3, [sp, #12]
 8003f62:	e7df      	b.n	8003f24 <_dtoa_r+0x9c>
 8003f64:	ab16      	add	r3, sp, #88	; 0x58
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	ab17      	add	r3, sp, #92	; 0x5c
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f72:	f001 f8c5 	bl	8005100 <__d2b>
 8003f76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003f7a:	4683      	mov	fp, r0
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	d07f      	beq.n	8004080 <_dtoa_r+0x1f8>
 8003f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4b72      	ldr	r3, [pc, #456]	; (8004168 <_dtoa_r+0x2e0>)
 8003f9e:	f7fc f8e3 	bl	8000168 <__aeabi_dsub>
 8003fa2:	a365      	add	r3, pc, #404	; (adr r3, 8004138 <_dtoa_r+0x2b0>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fa96 	bl	80004d8 <__aeabi_dmul>
 8003fac:	a364      	add	r3, pc, #400	; (adr r3, 8004140 <_dtoa_r+0x2b8>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc f8db 	bl	800016c <__adddf3>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	460f      	mov	r7, r1
 8003fbc:	f7fc fa22 	bl	8000404 <__aeabi_i2d>
 8003fc0:	a361      	add	r3, pc, #388	; (adr r3, 8004148 <_dtoa_r+0x2c0>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f7fc fa87 	bl	80004d8 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4630      	mov	r0, r6
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	f7fc f8cb 	bl	800016c <__adddf3>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460f      	mov	r7, r1
 8003fda:	f7fc fd2d 	bl	8000a38 <__aeabi_d2iz>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4682      	mov	sl, r0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	f7fc fce8 	bl	80009bc <__aeabi_dcmplt>
 8003fec:	b148      	cbz	r0, 8004002 <_dtoa_r+0x17a>
 8003fee:	4650      	mov	r0, sl
 8003ff0:	f7fc fa08 	bl	8000404 <__aeabi_i2d>
 8003ff4:	4632      	mov	r2, r6
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	f7fc fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8003ffc:	b908      	cbnz	r0, 8004002 <_dtoa_r+0x17a>
 8003ffe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004002:	f1ba 0f16 	cmp.w	sl, #22
 8004006:	d858      	bhi.n	80040ba <_dtoa_r+0x232>
 8004008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <_dtoa_r+0x2e4>)
 800400e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	f7fc fcd1 	bl	80009bc <__aeabi_dcmplt>
 800401a:	2800      	cmp	r0, #0
 800401c:	d04f      	beq.n	80040be <_dtoa_r+0x236>
 800401e:	2300      	movs	r3, #0
 8004020:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004024:	930f      	str	r3, [sp, #60]	; 0x3c
 8004026:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004028:	1b1c      	subs	r4, r3, r4
 800402a:	1e63      	subs	r3, r4, #1
 800402c:	9309      	str	r3, [sp, #36]	; 0x24
 800402e:	bf49      	itett	mi
 8004030:	f1c4 0301 	rsbmi	r3, r4, #1
 8004034:	2300      	movpl	r3, #0
 8004036:	9306      	strmi	r3, [sp, #24]
 8004038:	2300      	movmi	r3, #0
 800403a:	bf54      	ite	pl
 800403c:	9306      	strpl	r3, [sp, #24]
 800403e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004040:	f1ba 0f00 	cmp.w	sl, #0
 8004044:	db3d      	blt.n	80040c2 <_dtoa_r+0x23a>
 8004046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004048:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800404c:	4453      	add	r3, sl
 800404e:	9309      	str	r3, [sp, #36]	; 0x24
 8004050:	2300      	movs	r3, #0
 8004052:	930a      	str	r3, [sp, #40]	; 0x28
 8004054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004056:	2b09      	cmp	r3, #9
 8004058:	f200 808c 	bhi.w	8004174 <_dtoa_r+0x2ec>
 800405c:	2b05      	cmp	r3, #5
 800405e:	bfc4      	itt	gt
 8004060:	3b04      	subgt	r3, #4
 8004062:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004064:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004066:	bfc8      	it	gt
 8004068:	2400      	movgt	r4, #0
 800406a:	f1a3 0302 	sub.w	r3, r3, #2
 800406e:	bfd8      	it	le
 8004070:	2401      	movle	r4, #1
 8004072:	2b03      	cmp	r3, #3
 8004074:	f200 808a 	bhi.w	800418c <_dtoa_r+0x304>
 8004078:	e8df f003 	tbb	[pc, r3]
 800407c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004080:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004084:	441c      	add	r4, r3
 8004086:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800408a:	2b20      	cmp	r3, #32
 800408c:	bfc3      	ittte	gt
 800408e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004092:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004096:	fa09 f303 	lslgt.w	r3, r9, r3
 800409a:	f1c3 0320 	rsble	r3, r3, #32
 800409e:	bfc6      	itte	gt
 80040a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80040a4:	4318      	orrgt	r0, r3
 80040a6:	fa06 f003 	lslle.w	r0, r6, r3
 80040aa:	f7fc f99b 	bl	80003e4 <__aeabi_ui2d>
 80040ae:	2301      	movs	r3, #1
 80040b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80040b4:	3c01      	subs	r4, #1
 80040b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80040b8:	e76f      	b.n	8003f9a <_dtoa_r+0x112>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e7b2      	b.n	8004024 <_dtoa_r+0x19c>
 80040be:	900f      	str	r0, [sp, #60]	; 0x3c
 80040c0:	e7b1      	b.n	8004026 <_dtoa_r+0x19e>
 80040c2:	9b06      	ldr	r3, [sp, #24]
 80040c4:	eba3 030a 	sub.w	r3, r3, sl
 80040c8:	9306      	str	r3, [sp, #24]
 80040ca:	f1ca 0300 	rsb	r3, sl, #0
 80040ce:	930a      	str	r3, [sp, #40]	; 0x28
 80040d0:	2300      	movs	r3, #0
 80040d2:	930e      	str	r3, [sp, #56]	; 0x38
 80040d4:	e7be      	b.n	8004054 <_dtoa_r+0x1cc>
 80040d6:	2300      	movs	r3, #0
 80040d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80040da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dc58      	bgt.n	8004192 <_dtoa_r+0x30a>
 80040e0:	f04f 0901 	mov.w	r9, #1
 80040e4:	464b      	mov	r3, r9
 80040e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80040ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80040ee:	2200      	movs	r2, #0
 80040f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80040f2:	6042      	str	r2, [r0, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	f102 0614 	add.w	r6, r2, #20
 80040fa:	429e      	cmp	r6, r3
 80040fc:	6841      	ldr	r1, [r0, #4]
 80040fe:	d94e      	bls.n	800419e <_dtoa_r+0x316>
 8004100:	4628      	mov	r0, r5
 8004102:	f000 fcd7 	bl	8004ab4 <_Balloc>
 8004106:	9003      	str	r0, [sp, #12]
 8004108:	2800      	cmp	r0, #0
 800410a:	d14c      	bne.n	80041a6 <_dtoa_r+0x31e>
 800410c:	4602      	mov	r2, r0
 800410e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <_dtoa_r+0x2e8>)
 8004114:	e6cc      	b.n	8003eb0 <_dtoa_r+0x28>
 8004116:	2301      	movs	r3, #1
 8004118:	e7de      	b.n	80040d8 <_dtoa_r+0x250>
 800411a:	2300      	movs	r3, #0
 800411c:	930b      	str	r3, [sp, #44]	; 0x2c
 800411e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004120:	eb0a 0903 	add.w	r9, sl, r3
 8004124:	f109 0301 	add.w	r3, r9, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	9308      	str	r3, [sp, #32]
 800412c:	bfb8      	it	lt
 800412e:	2301      	movlt	r3, #1
 8004130:	e7dd      	b.n	80040ee <_dtoa_r+0x266>
 8004132:	2301      	movs	r3, #1
 8004134:	e7f2      	b.n	800411c <_dtoa_r+0x294>
 8004136:	bf00      	nop
 8004138:	636f4361 	.word	0x636f4361
 800413c:	3fd287a7 	.word	0x3fd287a7
 8004140:	8b60c8b3 	.word	0x8b60c8b3
 8004144:	3fc68a28 	.word	0x3fc68a28
 8004148:	509f79fb 	.word	0x509f79fb
 800414c:	3fd34413 	.word	0x3fd34413
 8004150:	080062d1 	.word	0x080062d1
 8004154:	080062e8 	.word	0x080062e8
 8004158:	7ff00000 	.word	0x7ff00000
 800415c:	080062cd 	.word	0x080062cd
 8004160:	080062c4 	.word	0x080062c4
 8004164:	080062a1 	.word	0x080062a1
 8004168:	3ff80000 	.word	0x3ff80000
 800416c:	080063d8 	.word	0x080063d8
 8004170:	08006343 	.word	0x08006343
 8004174:	2401      	movs	r4, #1
 8004176:	2300      	movs	r3, #0
 8004178:	940b      	str	r4, [sp, #44]	; 0x2c
 800417a:	9322      	str	r3, [sp, #136]	; 0x88
 800417c:	f04f 39ff 	mov.w	r9, #4294967295
 8004180:	2200      	movs	r2, #0
 8004182:	2312      	movs	r3, #18
 8004184:	f8cd 9020 	str.w	r9, [sp, #32]
 8004188:	9223      	str	r2, [sp, #140]	; 0x8c
 800418a:	e7b0      	b.n	80040ee <_dtoa_r+0x266>
 800418c:	2301      	movs	r3, #1
 800418e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004190:	e7f4      	b.n	800417c <_dtoa_r+0x2f4>
 8004192:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004196:	464b      	mov	r3, r9
 8004198:	f8cd 9020 	str.w	r9, [sp, #32]
 800419c:	e7a7      	b.n	80040ee <_dtoa_r+0x266>
 800419e:	3101      	adds	r1, #1
 80041a0:	6041      	str	r1, [r0, #4]
 80041a2:	0052      	lsls	r2, r2, #1
 80041a4:	e7a7      	b.n	80040f6 <_dtoa_r+0x26e>
 80041a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041a8:	9a03      	ldr	r2, [sp, #12]
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	9b08      	ldr	r3, [sp, #32]
 80041ae:	2b0e      	cmp	r3, #14
 80041b0:	f200 80a8 	bhi.w	8004304 <_dtoa_r+0x47c>
 80041b4:	2c00      	cmp	r4, #0
 80041b6:	f000 80a5 	beq.w	8004304 <_dtoa_r+0x47c>
 80041ba:	f1ba 0f00 	cmp.w	sl, #0
 80041be:	dd34      	ble.n	800422a <_dtoa_r+0x3a2>
 80041c0:	4a9a      	ldr	r2, [pc, #616]	; (800442c <_dtoa_r+0x5a4>)
 80041c2:	f00a 030f 	and.w	r3, sl, #15
 80041c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80041ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80041d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80041da:	d016      	beq.n	800420a <_dtoa_r+0x382>
 80041dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041e0:	4b93      	ldr	r3, [pc, #588]	; (8004430 <_dtoa_r+0x5a8>)
 80041e2:	2703      	movs	r7, #3
 80041e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041e8:	f7fc faa0 	bl	800072c <__aeabi_ddiv>
 80041ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041f0:	f004 040f 	and.w	r4, r4, #15
 80041f4:	4e8e      	ldr	r6, [pc, #568]	; (8004430 <_dtoa_r+0x5a8>)
 80041f6:	b954      	cbnz	r4, 800420e <_dtoa_r+0x386>
 80041f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004200:	f7fc fa94 	bl	800072c <__aeabi_ddiv>
 8004204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004208:	e029      	b.n	800425e <_dtoa_r+0x3d6>
 800420a:	2702      	movs	r7, #2
 800420c:	e7f2      	b.n	80041f4 <_dtoa_r+0x36c>
 800420e:	07e1      	lsls	r1, r4, #31
 8004210:	d508      	bpl.n	8004224 <_dtoa_r+0x39c>
 8004212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004216:	e9d6 2300 	ldrd	r2, r3, [r6]
 800421a:	f7fc f95d 	bl	80004d8 <__aeabi_dmul>
 800421e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004222:	3701      	adds	r7, #1
 8004224:	1064      	asrs	r4, r4, #1
 8004226:	3608      	adds	r6, #8
 8004228:	e7e5      	b.n	80041f6 <_dtoa_r+0x36e>
 800422a:	f000 80a5 	beq.w	8004378 <_dtoa_r+0x4f0>
 800422e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004232:	f1ca 0400 	rsb	r4, sl, #0
 8004236:	4b7d      	ldr	r3, [pc, #500]	; (800442c <_dtoa_r+0x5a4>)
 8004238:	f004 020f 	and.w	r2, r4, #15
 800423c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f7fc f948 	bl	80004d8 <__aeabi_dmul>
 8004248:	2702      	movs	r7, #2
 800424a:	2300      	movs	r3, #0
 800424c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004250:	4e77      	ldr	r6, [pc, #476]	; (8004430 <_dtoa_r+0x5a8>)
 8004252:	1124      	asrs	r4, r4, #4
 8004254:	2c00      	cmp	r4, #0
 8004256:	f040 8084 	bne.w	8004362 <_dtoa_r+0x4da>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1d2      	bne.n	8004204 <_dtoa_r+0x37c>
 800425e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 808b 	beq.w	800437c <_dtoa_r+0x4f4>
 8004266:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800426a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800426e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004272:	2200      	movs	r2, #0
 8004274:	4b6f      	ldr	r3, [pc, #444]	; (8004434 <_dtoa_r+0x5ac>)
 8004276:	f7fc fba1 	bl	80009bc <__aeabi_dcmplt>
 800427a:	2800      	cmp	r0, #0
 800427c:	d07e      	beq.n	800437c <_dtoa_r+0x4f4>
 800427e:	9b08      	ldr	r3, [sp, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d07b      	beq.n	800437c <_dtoa_r+0x4f4>
 8004284:	f1b9 0f00 	cmp.w	r9, #0
 8004288:	dd38      	ble.n	80042fc <_dtoa_r+0x474>
 800428a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800428e:	2200      	movs	r2, #0
 8004290:	4b69      	ldr	r3, [pc, #420]	; (8004438 <_dtoa_r+0x5b0>)
 8004292:	f7fc f921 	bl	80004d8 <__aeabi_dmul>
 8004296:	464c      	mov	r4, r9
 8004298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800429c:	f10a 38ff 	add.w	r8, sl, #4294967295
 80042a0:	3701      	adds	r7, #1
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7fc f8ae 	bl	8000404 <__aeabi_i2d>
 80042a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ac:	f7fc f914 	bl	80004d8 <__aeabi_dmul>
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b62      	ldr	r3, [pc, #392]	; (800443c <_dtoa_r+0x5b4>)
 80042b4:	f7fb ff5a 	bl	800016c <__adddf3>
 80042b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80042bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042c0:	9611      	str	r6, [sp, #68]	; 0x44
 80042c2:	2c00      	cmp	r4, #0
 80042c4:	d15d      	bne.n	8004382 <_dtoa_r+0x4fa>
 80042c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ca:	2200      	movs	r2, #0
 80042cc:	4b5c      	ldr	r3, [pc, #368]	; (8004440 <_dtoa_r+0x5b8>)
 80042ce:	f7fb ff4b 	bl	8000168 <__aeabi_dsub>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042da:	4633      	mov	r3, r6
 80042dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042de:	f7fc fb8b 	bl	80009f8 <__aeabi_dcmpgt>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	f040 829c 	bne.w	8004820 <_dtoa_r+0x998>
 80042e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80042f2:	f7fc fb63 	bl	80009bc <__aeabi_dcmplt>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f040 8290 	bne.w	800481c <_dtoa_r+0x994>
 80042fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004300:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004306:	2b00      	cmp	r3, #0
 8004308:	f2c0 8152 	blt.w	80045b0 <_dtoa_r+0x728>
 800430c:	f1ba 0f0e 	cmp.w	sl, #14
 8004310:	f300 814e 	bgt.w	80045b0 <_dtoa_r+0x728>
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <_dtoa_r+0x5a4>)
 8004316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800431a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800431e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004324:	2b00      	cmp	r3, #0
 8004326:	f280 80db 	bge.w	80044e0 <_dtoa_r+0x658>
 800432a:	9b08      	ldr	r3, [sp, #32]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f300 80d7 	bgt.w	80044e0 <_dtoa_r+0x658>
 8004332:	f040 8272 	bne.w	800481a <_dtoa_r+0x992>
 8004336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800433a:	2200      	movs	r2, #0
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <_dtoa_r+0x5b8>)
 800433e:	f7fc f8cb 	bl	80004d8 <__aeabi_dmul>
 8004342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004346:	f7fc fb4d 	bl	80009e4 <__aeabi_dcmpge>
 800434a:	9c08      	ldr	r4, [sp, #32]
 800434c:	4626      	mov	r6, r4
 800434e:	2800      	cmp	r0, #0
 8004350:	f040 8248 	bne.w	80047e4 <_dtoa_r+0x95c>
 8004354:	2331      	movs	r3, #49	; 0x31
 8004356:	9f03      	ldr	r7, [sp, #12]
 8004358:	f10a 0a01 	add.w	sl, sl, #1
 800435c:	f807 3b01 	strb.w	r3, [r7], #1
 8004360:	e244      	b.n	80047ec <_dtoa_r+0x964>
 8004362:	07e2      	lsls	r2, r4, #31
 8004364:	d505      	bpl.n	8004372 <_dtoa_r+0x4ea>
 8004366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800436a:	f7fc f8b5 	bl	80004d8 <__aeabi_dmul>
 800436e:	2301      	movs	r3, #1
 8004370:	3701      	adds	r7, #1
 8004372:	1064      	asrs	r4, r4, #1
 8004374:	3608      	adds	r6, #8
 8004376:	e76d      	b.n	8004254 <_dtoa_r+0x3cc>
 8004378:	2702      	movs	r7, #2
 800437a:	e770      	b.n	800425e <_dtoa_r+0x3d6>
 800437c:	46d0      	mov	r8, sl
 800437e:	9c08      	ldr	r4, [sp, #32]
 8004380:	e78f      	b.n	80042a2 <_dtoa_r+0x41a>
 8004382:	9903      	ldr	r1, [sp, #12]
 8004384:	4b29      	ldr	r3, [pc, #164]	; (800442c <_dtoa_r+0x5a4>)
 8004386:	4421      	add	r1, r4
 8004388:	9112      	str	r1, [sp, #72]	; 0x48
 800438a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800438c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004390:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004394:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004398:	2900      	cmp	r1, #0
 800439a:	d055      	beq.n	8004448 <_dtoa_r+0x5c0>
 800439c:	2000      	movs	r0, #0
 800439e:	4929      	ldr	r1, [pc, #164]	; (8004444 <_dtoa_r+0x5bc>)
 80043a0:	f7fc f9c4 	bl	800072c <__aeabi_ddiv>
 80043a4:	463b      	mov	r3, r7
 80043a6:	4632      	mov	r2, r6
 80043a8:	f7fb fede 	bl	8000168 <__aeabi_dsub>
 80043ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043b0:	9f03      	ldr	r7, [sp, #12]
 80043b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043b6:	f7fc fb3f 	bl	8000a38 <__aeabi_d2iz>
 80043ba:	4604      	mov	r4, r0
 80043bc:	f7fc f822 	bl	8000404 <__aeabi_i2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c8:	f7fb fece 	bl	8000168 <__aeabi_dsub>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	3430      	adds	r4, #48	; 0x30
 80043d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043da:	f807 4b01 	strb.w	r4, [r7], #1
 80043de:	f7fc faed 	bl	80009bc <__aeabi_dcmplt>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d174      	bne.n	80044d0 <_dtoa_r+0x648>
 80043e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ea:	2000      	movs	r0, #0
 80043ec:	4911      	ldr	r1, [pc, #68]	; (8004434 <_dtoa_r+0x5ac>)
 80043ee:	f7fb febb 	bl	8000168 <__aeabi_dsub>
 80043f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043f6:	f7fc fae1 	bl	80009bc <__aeabi_dcmplt>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	f040 80b7 	bne.w	800456e <_dtoa_r+0x6e6>
 8004400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004402:	429f      	cmp	r7, r3
 8004404:	f43f af7a 	beq.w	80042fc <_dtoa_r+0x474>
 8004408:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800440c:	2200      	movs	r2, #0
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <_dtoa_r+0x5b0>)
 8004410:	f7fc f862 	bl	80004d8 <__aeabi_dmul>
 8004414:	2200      	movs	r2, #0
 8004416:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800441a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <_dtoa_r+0x5b0>)
 8004420:	f7fc f85a 	bl	80004d8 <__aeabi_dmul>
 8004424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004428:	e7c3      	b.n	80043b2 <_dtoa_r+0x52a>
 800442a:	bf00      	nop
 800442c:	080063d8 	.word	0x080063d8
 8004430:	080063b0 	.word	0x080063b0
 8004434:	3ff00000 	.word	0x3ff00000
 8004438:	40240000 	.word	0x40240000
 800443c:	401c0000 	.word	0x401c0000
 8004440:	40140000 	.word	0x40140000
 8004444:	3fe00000 	.word	0x3fe00000
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc f844 	bl	80004d8 <__aeabi_dmul>
 8004450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004452:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004456:	9c03      	ldr	r4, [sp, #12]
 8004458:	9314      	str	r3, [sp, #80]	; 0x50
 800445a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800445e:	f7fc faeb 	bl	8000a38 <__aeabi_d2iz>
 8004462:	9015      	str	r0, [sp, #84]	; 0x54
 8004464:	f7fb ffce 	bl	8000404 <__aeabi_i2d>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004470:	f7fb fe7a 	bl	8000168 <__aeabi_dsub>
 8004474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004476:	4606      	mov	r6, r0
 8004478:	3330      	adds	r3, #48	; 0x30
 800447a:	f804 3b01 	strb.w	r3, [r4], #1
 800447e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004480:	460f      	mov	r7, r1
 8004482:	429c      	cmp	r4, r3
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	d124      	bne.n	80044d4 <_dtoa_r+0x64c>
 800448a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800448e:	4bb0      	ldr	r3, [pc, #704]	; (8004750 <_dtoa_r+0x8c8>)
 8004490:	f7fb fe6c 	bl	800016c <__adddf3>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4630      	mov	r0, r6
 800449a:	4639      	mov	r1, r7
 800449c:	f7fc faac 	bl	80009f8 <__aeabi_dcmpgt>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d163      	bne.n	800456c <_dtoa_r+0x6e4>
 80044a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044a8:	2000      	movs	r0, #0
 80044aa:	49a9      	ldr	r1, [pc, #676]	; (8004750 <_dtoa_r+0x8c8>)
 80044ac:	f7fb fe5c 	bl	8000168 <__aeabi_dsub>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fc fa80 	bl	80009bc <__aeabi_dcmplt>
 80044bc:	2800      	cmp	r0, #0
 80044be:	f43f af1d 	beq.w	80042fc <_dtoa_r+0x474>
 80044c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044c4:	1e7b      	subs	r3, r7, #1
 80044c6:	9314      	str	r3, [sp, #80]	; 0x50
 80044c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80044cc:	2b30      	cmp	r3, #48	; 0x30
 80044ce:	d0f8      	beq.n	80044c2 <_dtoa_r+0x63a>
 80044d0:	46c2      	mov	sl, r8
 80044d2:	e03b      	b.n	800454c <_dtoa_r+0x6c4>
 80044d4:	4b9f      	ldr	r3, [pc, #636]	; (8004754 <_dtoa_r+0x8cc>)
 80044d6:	f7fb ffff 	bl	80004d8 <__aeabi_dmul>
 80044da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044de:	e7bc      	b.n	800445a <_dtoa_r+0x5d2>
 80044e0:	9f03      	ldr	r7, [sp, #12]
 80044e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80044e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044ea:	4640      	mov	r0, r8
 80044ec:	4649      	mov	r1, r9
 80044ee:	f7fc f91d 	bl	800072c <__aeabi_ddiv>
 80044f2:	f7fc faa1 	bl	8000a38 <__aeabi_d2iz>
 80044f6:	4604      	mov	r4, r0
 80044f8:	f7fb ff84 	bl	8000404 <__aeabi_i2d>
 80044fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004500:	f7fb ffea 	bl	80004d8 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fe2c 	bl	8000168 <__aeabi_dsub>
 8004510:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004514:	f807 6b01 	strb.w	r6, [r7], #1
 8004518:	9e03      	ldr	r6, [sp, #12]
 800451a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800451e:	1bbe      	subs	r6, r7, r6
 8004520:	45b4      	cmp	ip, r6
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	d136      	bne.n	8004596 <_dtoa_r+0x70e>
 8004528:	f7fb fe20 	bl	800016c <__adddf3>
 800452c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004530:	4680      	mov	r8, r0
 8004532:	4689      	mov	r9, r1
 8004534:	f7fc fa60 	bl	80009f8 <__aeabi_dcmpgt>
 8004538:	bb58      	cbnz	r0, 8004592 <_dtoa_r+0x70a>
 800453a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800453e:	4640      	mov	r0, r8
 8004540:	4649      	mov	r1, r9
 8004542:	f7fc fa31 	bl	80009a8 <__aeabi_dcmpeq>
 8004546:	b108      	cbz	r0, 800454c <_dtoa_r+0x6c4>
 8004548:	07e1      	lsls	r1, r4, #31
 800454a:	d422      	bmi.n	8004592 <_dtoa_r+0x70a>
 800454c:	4628      	mov	r0, r5
 800454e:	4659      	mov	r1, fp
 8004550:	f000 faf0 	bl	8004b34 <_Bfree>
 8004554:	2300      	movs	r3, #0
 8004556:	703b      	strb	r3, [r7, #0]
 8004558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800455a:	f10a 0001 	add.w	r0, sl, #1
 800455e:	6018      	str	r0, [r3, #0]
 8004560:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004562:	2b00      	cmp	r3, #0
 8004564:	f43f acde 	beq.w	8003f24 <_dtoa_r+0x9c>
 8004568:	601f      	str	r7, [r3, #0]
 800456a:	e4db      	b.n	8003f24 <_dtoa_r+0x9c>
 800456c:	4627      	mov	r7, r4
 800456e:	463b      	mov	r3, r7
 8004570:	461f      	mov	r7, r3
 8004572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004576:	2a39      	cmp	r2, #57	; 0x39
 8004578:	d107      	bne.n	800458a <_dtoa_r+0x702>
 800457a:	9a03      	ldr	r2, [sp, #12]
 800457c:	429a      	cmp	r2, r3
 800457e:	d1f7      	bne.n	8004570 <_dtoa_r+0x6e8>
 8004580:	2230      	movs	r2, #48	; 0x30
 8004582:	9903      	ldr	r1, [sp, #12]
 8004584:	f108 0801 	add.w	r8, r8, #1
 8004588:	700a      	strb	r2, [r1, #0]
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	3201      	adds	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e79e      	b.n	80044d0 <_dtoa_r+0x648>
 8004592:	46d0      	mov	r8, sl
 8004594:	e7eb      	b.n	800456e <_dtoa_r+0x6e6>
 8004596:	2200      	movs	r2, #0
 8004598:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <_dtoa_r+0x8cc>)
 800459a:	f7fb ff9d 	bl	80004d8 <__aeabi_dmul>
 800459e:	2200      	movs	r2, #0
 80045a0:	2300      	movs	r3, #0
 80045a2:	4680      	mov	r8, r0
 80045a4:	4689      	mov	r9, r1
 80045a6:	f7fc f9ff 	bl	80009a8 <__aeabi_dcmpeq>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d09b      	beq.n	80044e6 <_dtoa_r+0x65e>
 80045ae:	e7cd      	b.n	800454c <_dtoa_r+0x6c4>
 80045b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045b2:	2a00      	cmp	r2, #0
 80045b4:	f000 80d0 	beq.w	8004758 <_dtoa_r+0x8d0>
 80045b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80045ba:	2a01      	cmp	r2, #1
 80045bc:	f300 80ae 	bgt.w	800471c <_dtoa_r+0x894>
 80045c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	f000 80a6 	beq.w	8004714 <_dtoa_r+0x88c>
 80045c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045ce:	9f06      	ldr	r7, [sp, #24]
 80045d0:	9a06      	ldr	r2, [sp, #24]
 80045d2:	2101      	movs	r1, #1
 80045d4:	441a      	add	r2, r3
 80045d6:	9206      	str	r2, [sp, #24]
 80045d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045da:	4628      	mov	r0, r5
 80045dc:	441a      	add	r2, r3
 80045de:	9209      	str	r2, [sp, #36]	; 0x24
 80045e0:	f000 fb5e 	bl	8004ca0 <__i2b>
 80045e4:	4606      	mov	r6, r0
 80045e6:	2f00      	cmp	r7, #0
 80045e8:	dd0c      	ble.n	8004604 <_dtoa_r+0x77c>
 80045ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dd09      	ble.n	8004604 <_dtoa_r+0x77c>
 80045f0:	42bb      	cmp	r3, r7
 80045f2:	bfa8      	it	ge
 80045f4:	463b      	movge	r3, r7
 80045f6:	9a06      	ldr	r2, [sp, #24]
 80045f8:	1aff      	subs	r7, r7, r3
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	9206      	str	r2, [sp, #24]
 80045fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	9309      	str	r3, [sp, #36]	; 0x24
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	b1f3      	cbz	r3, 8004646 <_dtoa_r+0x7be>
 8004608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a8 	beq.w	8004760 <_dtoa_r+0x8d8>
 8004610:	2c00      	cmp	r4, #0
 8004612:	dd10      	ble.n	8004636 <_dtoa_r+0x7ae>
 8004614:	4631      	mov	r1, r6
 8004616:	4622      	mov	r2, r4
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fbff 	bl	8004e1c <__pow5mult>
 800461e:	465a      	mov	r2, fp
 8004620:	4601      	mov	r1, r0
 8004622:	4606      	mov	r6, r0
 8004624:	4628      	mov	r0, r5
 8004626:	f000 fb51 	bl	8004ccc <__multiply>
 800462a:	4680      	mov	r8, r0
 800462c:	4659      	mov	r1, fp
 800462e:	4628      	mov	r0, r5
 8004630:	f000 fa80 	bl	8004b34 <_Bfree>
 8004634:	46c3      	mov	fp, r8
 8004636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004638:	1b1a      	subs	r2, r3, r4
 800463a:	d004      	beq.n	8004646 <_dtoa_r+0x7be>
 800463c:	4659      	mov	r1, fp
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fbec 	bl	8004e1c <__pow5mult>
 8004644:	4683      	mov	fp, r0
 8004646:	2101      	movs	r1, #1
 8004648:	4628      	mov	r0, r5
 800464a:	f000 fb29 	bl	8004ca0 <__i2b>
 800464e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004650:	4604      	mov	r4, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f340 8086 	ble.w	8004764 <_dtoa_r+0x8dc>
 8004658:	461a      	mov	r2, r3
 800465a:	4601      	mov	r1, r0
 800465c:	4628      	mov	r0, r5
 800465e:	f000 fbdd 	bl	8004e1c <__pow5mult>
 8004662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004664:	4604      	mov	r4, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	dd7f      	ble.n	800476a <_dtoa_r+0x8e2>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004674:	6918      	ldr	r0, [r3, #16]
 8004676:	f000 fac5 	bl	8004c04 <__hi0bits>
 800467a:	f1c0 0020 	rsb	r0, r0, #32
 800467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004680:	4418      	add	r0, r3
 8004682:	f010 001f 	ands.w	r0, r0, #31
 8004686:	f000 8092 	beq.w	80047ae <_dtoa_r+0x926>
 800468a:	f1c0 0320 	rsb	r3, r0, #32
 800468e:	2b04      	cmp	r3, #4
 8004690:	f340 808a 	ble.w	80047a8 <_dtoa_r+0x920>
 8004694:	f1c0 001c 	rsb	r0, r0, #28
 8004698:	9b06      	ldr	r3, [sp, #24]
 800469a:	4407      	add	r7, r0
 800469c:	4403      	add	r3, r0
 800469e:	9306      	str	r3, [sp, #24]
 80046a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a2:	4403      	add	r3, r0
 80046a4:	9309      	str	r3, [sp, #36]	; 0x24
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	dd05      	ble.n	80046b8 <_dtoa_r+0x830>
 80046ac:	4659      	mov	r1, fp
 80046ae:	461a      	mov	r2, r3
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 fc0d 	bl	8004ed0 <__lshift>
 80046b6:	4683      	mov	fp, r0
 80046b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dd05      	ble.n	80046ca <_dtoa_r+0x842>
 80046be:	4621      	mov	r1, r4
 80046c0:	461a      	mov	r2, r3
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 fc04 	bl	8004ed0 <__lshift>
 80046c8:	4604      	mov	r4, r0
 80046ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d070      	beq.n	80047b2 <_dtoa_r+0x92a>
 80046d0:	4621      	mov	r1, r4
 80046d2:	4658      	mov	r0, fp
 80046d4:	f000 fc6c 	bl	8004fb0 <__mcmp>
 80046d8:	2800      	cmp	r0, #0
 80046da:	da6a      	bge.n	80047b2 <_dtoa_r+0x92a>
 80046dc:	2300      	movs	r3, #0
 80046de:	4659      	mov	r1, fp
 80046e0:	220a      	movs	r2, #10
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fa48 	bl	8004b78 <__multadd>
 80046e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ea:	4683      	mov	fp, r0
 80046ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8194 	beq.w	8004a1e <_dtoa_r+0xb96>
 80046f6:	4631      	mov	r1, r6
 80046f8:	2300      	movs	r3, #0
 80046fa:	220a      	movs	r2, #10
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 fa3b 	bl	8004b78 <__multadd>
 8004702:	f1b9 0f00 	cmp.w	r9, #0
 8004706:	4606      	mov	r6, r0
 8004708:	f300 8093 	bgt.w	8004832 <_dtoa_r+0x9aa>
 800470c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800470e:	2b02      	cmp	r3, #2
 8004710:	dc57      	bgt.n	80047c2 <_dtoa_r+0x93a>
 8004712:	e08e      	b.n	8004832 <_dtoa_r+0x9aa>
 8004714:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800471a:	e757      	b.n	80045cc <_dtoa_r+0x744>
 800471c:	9b08      	ldr	r3, [sp, #32]
 800471e:	1e5c      	subs	r4, r3, #1
 8004720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004722:	42a3      	cmp	r3, r4
 8004724:	bfb7      	itett	lt
 8004726:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004728:	1b1c      	subge	r4, r3, r4
 800472a:	1ae2      	sublt	r2, r4, r3
 800472c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800472e:	bfbe      	ittt	lt
 8004730:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004732:	189b      	addlt	r3, r3, r2
 8004734:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004736:	9b08      	ldr	r3, [sp, #32]
 8004738:	bfb8      	it	lt
 800473a:	2400      	movlt	r4, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	bfbb      	ittet	lt
 8004740:	9b06      	ldrlt	r3, [sp, #24]
 8004742:	9a08      	ldrlt	r2, [sp, #32]
 8004744:	9f06      	ldrge	r7, [sp, #24]
 8004746:	1a9f      	sublt	r7, r3, r2
 8004748:	bfac      	ite	ge
 800474a:	9b08      	ldrge	r3, [sp, #32]
 800474c:	2300      	movlt	r3, #0
 800474e:	e73f      	b.n	80045d0 <_dtoa_r+0x748>
 8004750:	3fe00000 	.word	0x3fe00000
 8004754:	40240000 	.word	0x40240000
 8004758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800475a:	9f06      	ldr	r7, [sp, #24]
 800475c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800475e:	e742      	b.n	80045e6 <_dtoa_r+0x75e>
 8004760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004762:	e76b      	b.n	800463c <_dtoa_r+0x7b4>
 8004764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004766:	2b01      	cmp	r3, #1
 8004768:	dc19      	bgt.n	800479e <_dtoa_r+0x916>
 800476a:	9b04      	ldr	r3, [sp, #16]
 800476c:	b9bb      	cbnz	r3, 800479e <_dtoa_r+0x916>
 800476e:	9b05      	ldr	r3, [sp, #20]
 8004770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004774:	b99b      	cbnz	r3, 800479e <_dtoa_r+0x916>
 8004776:	9b05      	ldr	r3, [sp, #20]
 8004778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800477c:	0d1b      	lsrs	r3, r3, #20
 800477e:	051b      	lsls	r3, r3, #20
 8004780:	b183      	cbz	r3, 80047a4 <_dtoa_r+0x91c>
 8004782:	f04f 0801 	mov.w	r8, #1
 8004786:	9b06      	ldr	r3, [sp, #24]
 8004788:	3301      	adds	r3, #1
 800478a:	9306      	str	r3, [sp, #24]
 800478c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478e:	3301      	adds	r3, #1
 8004790:	9309      	str	r3, [sp, #36]	; 0x24
 8004792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af6a 	bne.w	800466e <_dtoa_r+0x7e6>
 800479a:	2001      	movs	r0, #1
 800479c:	e76f      	b.n	800467e <_dtoa_r+0x7f6>
 800479e:	f04f 0800 	mov.w	r8, #0
 80047a2:	e7f6      	b.n	8004792 <_dtoa_r+0x90a>
 80047a4:	4698      	mov	r8, r3
 80047a6:	e7f4      	b.n	8004792 <_dtoa_r+0x90a>
 80047a8:	f43f af7d 	beq.w	80046a6 <_dtoa_r+0x81e>
 80047ac:	4618      	mov	r0, r3
 80047ae:	301c      	adds	r0, #28
 80047b0:	e772      	b.n	8004698 <_dtoa_r+0x810>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc36      	bgt.n	8004826 <_dtoa_r+0x99e>
 80047b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	dd33      	ble.n	8004826 <_dtoa_r+0x99e>
 80047be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047c2:	f1b9 0f00 	cmp.w	r9, #0
 80047c6:	d10d      	bne.n	80047e4 <_dtoa_r+0x95c>
 80047c8:	4621      	mov	r1, r4
 80047ca:	464b      	mov	r3, r9
 80047cc:	2205      	movs	r2, #5
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f9d2 	bl	8004b78 <__multadd>
 80047d4:	4601      	mov	r1, r0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4658      	mov	r0, fp
 80047da:	f000 fbe9 	bl	8004fb0 <__mcmp>
 80047de:	2800      	cmp	r0, #0
 80047e0:	f73f adb8 	bgt.w	8004354 <_dtoa_r+0x4cc>
 80047e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047e6:	9f03      	ldr	r7, [sp, #12]
 80047e8:	ea6f 0a03 	mvn.w	sl, r3
 80047ec:	f04f 0800 	mov.w	r8, #0
 80047f0:	4621      	mov	r1, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f99e 	bl	8004b34 <_Bfree>
 80047f8:	2e00      	cmp	r6, #0
 80047fa:	f43f aea7 	beq.w	800454c <_dtoa_r+0x6c4>
 80047fe:	f1b8 0f00 	cmp.w	r8, #0
 8004802:	d005      	beq.n	8004810 <_dtoa_r+0x988>
 8004804:	45b0      	cmp	r8, r6
 8004806:	d003      	beq.n	8004810 <_dtoa_r+0x988>
 8004808:	4641      	mov	r1, r8
 800480a:	4628      	mov	r0, r5
 800480c:	f000 f992 	bl	8004b34 <_Bfree>
 8004810:	4631      	mov	r1, r6
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f98e 	bl	8004b34 <_Bfree>
 8004818:	e698      	b.n	800454c <_dtoa_r+0x6c4>
 800481a:	2400      	movs	r4, #0
 800481c:	4626      	mov	r6, r4
 800481e:	e7e1      	b.n	80047e4 <_dtoa_r+0x95c>
 8004820:	46c2      	mov	sl, r8
 8004822:	4626      	mov	r6, r4
 8004824:	e596      	b.n	8004354 <_dtoa_r+0x4cc>
 8004826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80fd 	beq.w	8004a2c <_dtoa_r+0xba4>
 8004832:	2f00      	cmp	r7, #0
 8004834:	dd05      	ble.n	8004842 <_dtoa_r+0x9ba>
 8004836:	4631      	mov	r1, r6
 8004838:	463a      	mov	r2, r7
 800483a:	4628      	mov	r0, r5
 800483c:	f000 fb48 	bl	8004ed0 <__lshift>
 8004840:	4606      	mov	r6, r0
 8004842:	f1b8 0f00 	cmp.w	r8, #0
 8004846:	d05c      	beq.n	8004902 <_dtoa_r+0xa7a>
 8004848:	4628      	mov	r0, r5
 800484a:	6871      	ldr	r1, [r6, #4]
 800484c:	f000 f932 	bl	8004ab4 <_Balloc>
 8004850:	4607      	mov	r7, r0
 8004852:	b928      	cbnz	r0, 8004860 <_dtoa_r+0x9d8>
 8004854:	4602      	mov	r2, r0
 8004856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800485a:	4b7f      	ldr	r3, [pc, #508]	; (8004a58 <_dtoa_r+0xbd0>)
 800485c:	f7ff bb28 	b.w	8003eb0 <_dtoa_r+0x28>
 8004860:	6932      	ldr	r2, [r6, #16]
 8004862:	f106 010c 	add.w	r1, r6, #12
 8004866:	3202      	adds	r2, #2
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	300c      	adds	r0, #12
 800486c:	f000 f914 	bl	8004a98 <memcpy>
 8004870:	2201      	movs	r2, #1
 8004872:	4639      	mov	r1, r7
 8004874:	4628      	mov	r0, r5
 8004876:	f000 fb2b 	bl	8004ed0 <__lshift>
 800487a:	46b0      	mov	r8, r6
 800487c:	4606      	mov	r6, r0
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	9308      	str	r3, [sp, #32]
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	444b      	add	r3, r9
 8004888:	930a      	str	r3, [sp, #40]	; 0x28
 800488a:	9b04      	ldr	r3, [sp, #16]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	9309      	str	r3, [sp, #36]	; 0x24
 8004892:	9b08      	ldr	r3, [sp, #32]
 8004894:	4621      	mov	r1, r4
 8004896:	3b01      	subs	r3, #1
 8004898:	4658      	mov	r0, fp
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	f7ff fa66 	bl	8003d6c <quorem>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4641      	mov	r1, r8
 80048a4:	3330      	adds	r3, #48	; 0x30
 80048a6:	9006      	str	r0, [sp, #24]
 80048a8:	4658      	mov	r0, fp
 80048aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ac:	f000 fb80 	bl	8004fb0 <__mcmp>
 80048b0:	4632      	mov	r2, r6
 80048b2:	4681      	mov	r9, r0
 80048b4:	4621      	mov	r1, r4
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 fb96 	bl	8004fe8 <__mdiff>
 80048bc:	68c2      	ldr	r2, [r0, #12]
 80048be:	4607      	mov	r7, r0
 80048c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048c2:	bb02      	cbnz	r2, 8004906 <_dtoa_r+0xa7e>
 80048c4:	4601      	mov	r1, r0
 80048c6:	4658      	mov	r0, fp
 80048c8:	f000 fb72 	bl	8004fb0 <__mcmp>
 80048cc:	4602      	mov	r2, r0
 80048ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048d0:	4639      	mov	r1, r7
 80048d2:	4628      	mov	r0, r5
 80048d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80048d8:	f000 f92c 	bl	8004b34 <_Bfree>
 80048dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e0:	9f08      	ldr	r7, [sp, #32]
 80048e2:	ea43 0102 	orr.w	r1, r3, r2
 80048e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e8:	430b      	orrs	r3, r1
 80048ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048ec:	d10d      	bne.n	800490a <_dtoa_r+0xa82>
 80048ee:	2b39      	cmp	r3, #57	; 0x39
 80048f0:	d029      	beq.n	8004946 <_dtoa_r+0xabe>
 80048f2:	f1b9 0f00 	cmp.w	r9, #0
 80048f6:	dd01      	ble.n	80048fc <_dtoa_r+0xa74>
 80048f8:	9b06      	ldr	r3, [sp, #24]
 80048fa:	3331      	adds	r3, #49	; 0x31
 80048fc:	9a04      	ldr	r2, [sp, #16]
 80048fe:	7013      	strb	r3, [r2, #0]
 8004900:	e776      	b.n	80047f0 <_dtoa_r+0x968>
 8004902:	4630      	mov	r0, r6
 8004904:	e7b9      	b.n	800487a <_dtoa_r+0x9f2>
 8004906:	2201      	movs	r2, #1
 8004908:	e7e2      	b.n	80048d0 <_dtoa_r+0xa48>
 800490a:	f1b9 0f00 	cmp.w	r9, #0
 800490e:	db06      	blt.n	800491e <_dtoa_r+0xa96>
 8004910:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004912:	ea41 0909 	orr.w	r9, r1, r9
 8004916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004918:	ea59 0101 	orrs.w	r1, r9, r1
 800491c:	d120      	bne.n	8004960 <_dtoa_r+0xad8>
 800491e:	2a00      	cmp	r2, #0
 8004920:	ddec      	ble.n	80048fc <_dtoa_r+0xa74>
 8004922:	4659      	mov	r1, fp
 8004924:	2201      	movs	r2, #1
 8004926:	4628      	mov	r0, r5
 8004928:	9308      	str	r3, [sp, #32]
 800492a:	f000 fad1 	bl	8004ed0 <__lshift>
 800492e:	4621      	mov	r1, r4
 8004930:	4683      	mov	fp, r0
 8004932:	f000 fb3d 	bl	8004fb0 <__mcmp>
 8004936:	2800      	cmp	r0, #0
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	dc02      	bgt.n	8004942 <_dtoa_r+0xaba>
 800493c:	d1de      	bne.n	80048fc <_dtoa_r+0xa74>
 800493e:	07da      	lsls	r2, r3, #31
 8004940:	d5dc      	bpl.n	80048fc <_dtoa_r+0xa74>
 8004942:	2b39      	cmp	r3, #57	; 0x39
 8004944:	d1d8      	bne.n	80048f8 <_dtoa_r+0xa70>
 8004946:	2339      	movs	r3, #57	; 0x39
 8004948:	9a04      	ldr	r2, [sp, #16]
 800494a:	7013      	strb	r3, [r2, #0]
 800494c:	463b      	mov	r3, r7
 800494e:	461f      	mov	r7, r3
 8004950:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004954:	3b01      	subs	r3, #1
 8004956:	2a39      	cmp	r2, #57	; 0x39
 8004958:	d050      	beq.n	80049fc <_dtoa_r+0xb74>
 800495a:	3201      	adds	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e747      	b.n	80047f0 <_dtoa_r+0x968>
 8004960:	2a00      	cmp	r2, #0
 8004962:	dd03      	ble.n	800496c <_dtoa_r+0xae4>
 8004964:	2b39      	cmp	r3, #57	; 0x39
 8004966:	d0ee      	beq.n	8004946 <_dtoa_r+0xabe>
 8004968:	3301      	adds	r3, #1
 800496a:	e7c7      	b.n	80048fc <_dtoa_r+0xa74>
 800496c:	9a08      	ldr	r2, [sp, #32]
 800496e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004970:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004974:	428a      	cmp	r2, r1
 8004976:	d02a      	beq.n	80049ce <_dtoa_r+0xb46>
 8004978:	4659      	mov	r1, fp
 800497a:	2300      	movs	r3, #0
 800497c:	220a      	movs	r2, #10
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f8fa 	bl	8004b78 <__multadd>
 8004984:	45b0      	cmp	r8, r6
 8004986:	4683      	mov	fp, r0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	f04f 020a 	mov.w	r2, #10
 8004990:	4641      	mov	r1, r8
 8004992:	4628      	mov	r0, r5
 8004994:	d107      	bne.n	80049a6 <_dtoa_r+0xb1e>
 8004996:	f000 f8ef 	bl	8004b78 <__multadd>
 800499a:	4680      	mov	r8, r0
 800499c:	4606      	mov	r6, r0
 800499e:	9b08      	ldr	r3, [sp, #32]
 80049a0:	3301      	adds	r3, #1
 80049a2:	9308      	str	r3, [sp, #32]
 80049a4:	e775      	b.n	8004892 <_dtoa_r+0xa0a>
 80049a6:	f000 f8e7 	bl	8004b78 <__multadd>
 80049aa:	4631      	mov	r1, r6
 80049ac:	4680      	mov	r8, r0
 80049ae:	2300      	movs	r3, #0
 80049b0:	220a      	movs	r2, #10
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 f8e0 	bl	8004b78 <__multadd>
 80049b8:	4606      	mov	r6, r0
 80049ba:	e7f0      	b.n	800499e <_dtoa_r+0xb16>
 80049bc:	f1b9 0f00 	cmp.w	r9, #0
 80049c0:	bfcc      	ite	gt
 80049c2:	464f      	movgt	r7, r9
 80049c4:	2701      	movle	r7, #1
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	9a03      	ldr	r2, [sp, #12]
 80049cc:	4417      	add	r7, r2
 80049ce:	4659      	mov	r1, fp
 80049d0:	2201      	movs	r2, #1
 80049d2:	4628      	mov	r0, r5
 80049d4:	9308      	str	r3, [sp, #32]
 80049d6:	f000 fa7b 	bl	8004ed0 <__lshift>
 80049da:	4621      	mov	r1, r4
 80049dc:	4683      	mov	fp, r0
 80049de:	f000 fae7 	bl	8004fb0 <__mcmp>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	dcb2      	bgt.n	800494c <_dtoa_r+0xac4>
 80049e6:	d102      	bne.n	80049ee <_dtoa_r+0xb66>
 80049e8:	9b08      	ldr	r3, [sp, #32]
 80049ea:	07db      	lsls	r3, r3, #31
 80049ec:	d4ae      	bmi.n	800494c <_dtoa_r+0xac4>
 80049ee:	463b      	mov	r3, r7
 80049f0:	461f      	mov	r7, r3
 80049f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049f6:	2a30      	cmp	r2, #48	; 0x30
 80049f8:	d0fa      	beq.n	80049f0 <_dtoa_r+0xb68>
 80049fa:	e6f9      	b.n	80047f0 <_dtoa_r+0x968>
 80049fc:	9a03      	ldr	r2, [sp, #12]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d1a5      	bne.n	800494e <_dtoa_r+0xac6>
 8004a02:	2331      	movs	r3, #49	; 0x31
 8004a04:	f10a 0a01 	add.w	sl, sl, #1
 8004a08:	e779      	b.n	80048fe <_dtoa_r+0xa76>
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <_dtoa_r+0xbd4>)
 8004a0c:	f7ff baa8 	b.w	8003f60 <_dtoa_r+0xd8>
 8004a10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f47f aa81 	bne.w	8003f1a <_dtoa_r+0x92>
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <_dtoa_r+0xbd8>)
 8004a1a:	f7ff baa1 	b.w	8003f60 <_dtoa_r+0xd8>
 8004a1e:	f1b9 0f00 	cmp.w	r9, #0
 8004a22:	dc03      	bgt.n	8004a2c <_dtoa_r+0xba4>
 8004a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	f73f aecb 	bgt.w	80047c2 <_dtoa_r+0x93a>
 8004a2c:	9f03      	ldr	r7, [sp, #12]
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4658      	mov	r0, fp
 8004a32:	f7ff f99b 	bl	8003d6c <quorem>
 8004a36:	9a03      	ldr	r2, [sp, #12]
 8004a38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004a3c:	f807 3b01 	strb.w	r3, [r7], #1
 8004a40:	1aba      	subs	r2, r7, r2
 8004a42:	4591      	cmp	r9, r2
 8004a44:	ddba      	ble.n	80049bc <_dtoa_r+0xb34>
 8004a46:	4659      	mov	r1, fp
 8004a48:	2300      	movs	r3, #0
 8004a4a:	220a      	movs	r2, #10
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f893 	bl	8004b78 <__multadd>
 8004a52:	4683      	mov	fp, r0
 8004a54:	e7eb      	b.n	8004a2e <_dtoa_r+0xba6>
 8004a56:	bf00      	nop
 8004a58:	08006343 	.word	0x08006343
 8004a5c:	080062a0 	.word	0x080062a0
 8004a60:	080062c4 	.word	0x080062c4

08004a64 <_localeconv_r>:
 8004a64:	4800      	ldr	r0, [pc, #0]	; (8004a68 <_localeconv_r+0x4>)
 8004a66:	4770      	bx	lr
 8004a68:	20000160 	.word	0x20000160

08004a6c <malloc>:
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <malloc+0xc>)
 8004a6e:	4601      	mov	r1, r0
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f000 bc1d 	b.w	80052b0 <_malloc_r>
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <memchr>:
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	b2c9      	uxtb	r1, r1
 8004a82:	4402      	add	r2, r0
 8004a84:	4293      	cmp	r3, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	d101      	bne.n	8004a8e <memchr+0x12>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e003      	b.n	8004a96 <memchr+0x1a>
 8004a8e:	7804      	ldrb	r4, [r0, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	428c      	cmp	r4, r1
 8004a94:	d1f6      	bne.n	8004a84 <memchr+0x8>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memcpy>:
 8004a98:	440a      	add	r2, r1
 8004a9a:	4291      	cmp	r1, r2
 8004a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aa0:	d100      	bne.n	8004aa4 <memcpy+0xc>
 8004aa2:	4770      	bx	lr
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab0:	d1f9      	bne.n	8004aa6 <memcpy+0xe>
 8004ab2:	bd10      	pop	{r4, pc}

08004ab4 <_Balloc>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ab8:	4604      	mov	r4, r0
 8004aba:	460d      	mov	r5, r1
 8004abc:	b976      	cbnz	r6, 8004adc <_Balloc+0x28>
 8004abe:	2010      	movs	r0, #16
 8004ac0:	f7ff ffd4 	bl	8004a6c <malloc>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8004ac8:	b920      	cbnz	r0, 8004ad4 <_Balloc+0x20>
 8004aca:	2166      	movs	r1, #102	; 0x66
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <_Balloc+0x78>)
 8004ace:	4818      	ldr	r0, [pc, #96]	; (8004b30 <_Balloc+0x7c>)
 8004ad0:	f000 fdce 	bl	8005670 <__assert_func>
 8004ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ad8:	6006      	str	r6, [r0, #0]
 8004ada:	60c6      	str	r6, [r0, #12]
 8004adc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ade:	68f3      	ldr	r3, [r6, #12]
 8004ae0:	b183      	cbz	r3, 8004b04 <_Balloc+0x50>
 8004ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aea:	b9b8      	cbnz	r0, 8004b1c <_Balloc+0x68>
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f605 	lsl.w	r6, r1, r5
 8004af2:	1d72      	adds	r2, r6, #5
 8004af4:	4620      	mov	r0, r4
 8004af6:	0092      	lsls	r2, r2, #2
 8004af8:	f000 fb5e 	bl	80051b8 <_calloc_r>
 8004afc:	b160      	cbz	r0, 8004b18 <_Balloc+0x64>
 8004afe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b02:	e00e      	b.n	8004b22 <_Balloc+0x6e>
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	2104      	movs	r1, #4
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 fb55 	bl	80051b8 <_calloc_r>
 8004b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b10:	60f0      	str	r0, [r6, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e4      	bne.n	8004ae2 <_Balloc+0x2e>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	6802      	ldr	r2, [r0, #0]
 8004b1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b22:	2300      	movs	r3, #0
 8004b24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b28:	e7f7      	b.n	8004b1a <_Balloc+0x66>
 8004b2a:	bf00      	nop
 8004b2c:	080062d1 	.word	0x080062d1
 8004b30:	08006354 	.word	0x08006354

08004b34 <_Bfree>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	b976      	cbnz	r6, 8004b5c <_Bfree+0x28>
 8004b3e:	2010      	movs	r0, #16
 8004b40:	f7ff ff94 	bl	8004a6c <malloc>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6268      	str	r0, [r5, #36]	; 0x24
 8004b48:	b920      	cbnz	r0, 8004b54 <_Bfree+0x20>
 8004b4a:	218a      	movs	r1, #138	; 0x8a
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <_Bfree+0x3c>)
 8004b4e:	4809      	ldr	r0, [pc, #36]	; (8004b74 <_Bfree+0x40>)
 8004b50:	f000 fd8e 	bl	8005670 <__assert_func>
 8004b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b58:	6006      	str	r6, [r0, #0]
 8004b5a:	60c6      	str	r6, [r0, #12]
 8004b5c:	b13c      	cbz	r4, 8004b6e <_Bfree+0x3a>
 8004b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b60:	6862      	ldr	r2, [r4, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b68:	6021      	str	r1, [r4, #0]
 8004b6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	080062d1 	.word	0x080062d1
 8004b74:	08006354 	.word	0x08006354

08004b78 <__multadd>:
 8004b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	461e      	mov	r6, r3
 8004b82:	2000      	movs	r0, #0
 8004b84:	690d      	ldr	r5, [r1, #16]
 8004b86:	f101 0c14 	add.w	ip, r1, #20
 8004b8a:	f8dc 3000 	ldr.w	r3, [ip]
 8004b8e:	3001      	adds	r0, #1
 8004b90:	b299      	uxth	r1, r3
 8004b92:	fb02 6101 	mla	r1, r2, r1, r6
 8004b96:	0c1e      	lsrs	r6, r3, #16
 8004b98:	0c0b      	lsrs	r3, r1, #16
 8004b9a:	fb02 3306 	mla	r3, r2, r6, r3
 8004b9e:	b289      	uxth	r1, r1
 8004ba0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ba4:	4285      	cmp	r5, r0
 8004ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004baa:	f84c 1b04 	str.w	r1, [ip], #4
 8004bae:	dcec      	bgt.n	8004b8a <__multadd+0x12>
 8004bb0:	b30e      	cbz	r6, 8004bf6 <__multadd+0x7e>
 8004bb2:	68a3      	ldr	r3, [r4, #8]
 8004bb4:	42ab      	cmp	r3, r5
 8004bb6:	dc19      	bgt.n	8004bec <__multadd+0x74>
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	4638      	mov	r0, r7
 8004bbc:	3101      	adds	r1, #1
 8004bbe:	f7ff ff79 	bl	8004ab4 <_Balloc>
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	b928      	cbnz	r0, 8004bd2 <__multadd+0x5a>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	21b5      	movs	r1, #181	; 0xb5
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <__multadd+0x84>)
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <__multadd+0x88>)
 8004bce:	f000 fd4f 	bl	8005670 <__assert_func>
 8004bd2:	6922      	ldr	r2, [r4, #16]
 8004bd4:	f104 010c 	add.w	r1, r4, #12
 8004bd8:	3202      	adds	r2, #2
 8004bda:	0092      	lsls	r2, r2, #2
 8004bdc:	300c      	adds	r0, #12
 8004bde:	f7ff ff5b 	bl	8004a98 <memcpy>
 8004be2:	4621      	mov	r1, r4
 8004be4:	4638      	mov	r0, r7
 8004be6:	f7ff ffa5 	bl	8004b34 <_Bfree>
 8004bea:	4644      	mov	r4, r8
 8004bec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	615e      	str	r6, [r3, #20]
 8004bf4:	6125      	str	r5, [r4, #16]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfc:	08006343 	.word	0x08006343
 8004c00:	08006354 	.word	0x08006354

08004c04 <__hi0bits>:
 8004c04:	0c02      	lsrs	r2, r0, #16
 8004c06:	0412      	lsls	r2, r2, #16
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b9ca      	cbnz	r2, 8004c40 <__hi0bits+0x3c>
 8004c0c:	0403      	lsls	r3, r0, #16
 8004c0e:	2010      	movs	r0, #16
 8004c10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c14:	bf04      	itt	eq
 8004c16:	021b      	lsleq	r3, r3, #8
 8004c18:	3008      	addeq	r0, #8
 8004c1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c1e:	bf04      	itt	eq
 8004c20:	011b      	lsleq	r3, r3, #4
 8004c22:	3004      	addeq	r0, #4
 8004c24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c28:	bf04      	itt	eq
 8004c2a:	009b      	lsleq	r3, r3, #2
 8004c2c:	3002      	addeq	r0, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	db05      	blt.n	8004c3e <__hi0bits+0x3a>
 8004c32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004c36:	f100 0001 	add.w	r0, r0, #1
 8004c3a:	bf08      	it	eq
 8004c3c:	2020      	moveq	r0, #32
 8004c3e:	4770      	bx	lr
 8004c40:	2000      	movs	r0, #0
 8004c42:	e7e5      	b.n	8004c10 <__hi0bits+0xc>

08004c44 <__lo0bits>:
 8004c44:	6803      	ldr	r3, [r0, #0]
 8004c46:	4602      	mov	r2, r0
 8004c48:	f013 0007 	ands.w	r0, r3, #7
 8004c4c:	d00b      	beq.n	8004c66 <__lo0bits+0x22>
 8004c4e:	07d9      	lsls	r1, r3, #31
 8004c50:	d421      	bmi.n	8004c96 <__lo0bits+0x52>
 8004c52:	0798      	lsls	r0, r3, #30
 8004c54:	bf49      	itett	mi
 8004c56:	085b      	lsrmi	r3, r3, #1
 8004c58:	089b      	lsrpl	r3, r3, #2
 8004c5a:	2001      	movmi	r0, #1
 8004c5c:	6013      	strmi	r3, [r2, #0]
 8004c5e:	bf5c      	itt	pl
 8004c60:	2002      	movpl	r0, #2
 8004c62:	6013      	strpl	r3, [r2, #0]
 8004c64:	4770      	bx	lr
 8004c66:	b299      	uxth	r1, r3
 8004c68:	b909      	cbnz	r1, 8004c6e <__lo0bits+0x2a>
 8004c6a:	2010      	movs	r0, #16
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	b2d9      	uxtb	r1, r3
 8004c70:	b909      	cbnz	r1, 8004c76 <__lo0bits+0x32>
 8004c72:	3008      	adds	r0, #8
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	0719      	lsls	r1, r3, #28
 8004c78:	bf04      	itt	eq
 8004c7a:	091b      	lsreq	r3, r3, #4
 8004c7c:	3004      	addeq	r0, #4
 8004c7e:	0799      	lsls	r1, r3, #30
 8004c80:	bf04      	itt	eq
 8004c82:	089b      	lsreq	r3, r3, #2
 8004c84:	3002      	addeq	r0, #2
 8004c86:	07d9      	lsls	r1, r3, #31
 8004c88:	d403      	bmi.n	8004c92 <__lo0bits+0x4e>
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	f100 0001 	add.w	r0, r0, #1
 8004c90:	d003      	beq.n	8004c9a <__lo0bits+0x56>
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4770      	bx	lr
 8004c96:	2000      	movs	r0, #0
 8004c98:	4770      	bx	lr
 8004c9a:	2020      	movs	r0, #32
 8004c9c:	4770      	bx	lr
	...

08004ca0 <__i2b>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	f7ff ff05 	bl	8004ab4 <_Balloc>
 8004caa:	4602      	mov	r2, r0
 8004cac:	b928      	cbnz	r0, 8004cba <__i2b+0x1a>
 8004cae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <__i2b+0x24>)
 8004cb4:	4804      	ldr	r0, [pc, #16]	; (8004cc8 <__i2b+0x28>)
 8004cb6:	f000 fcdb 	bl	8005670 <__assert_func>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	6144      	str	r4, [r0, #20]
 8004cbe:	6103      	str	r3, [r0, #16]
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08006343 	.word	0x08006343
 8004cc8:	08006354 	.word	0x08006354

08004ccc <__multiply>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	4691      	mov	r9, r2
 8004cd2:	690a      	ldr	r2, [r1, #16]
 8004cd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004cd8:	460c      	mov	r4, r1
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bfbe      	ittt	lt
 8004cde:	460b      	movlt	r3, r1
 8004ce0:	464c      	movlt	r4, r9
 8004ce2:	4699      	movlt	r9, r3
 8004ce4:	6927      	ldr	r7, [r4, #16]
 8004ce6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	6861      	ldr	r1, [r4, #4]
 8004cee:	eb07 060a 	add.w	r6, r7, sl
 8004cf2:	42b3      	cmp	r3, r6
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	bfb8      	it	lt
 8004cf8:	3101      	addlt	r1, #1
 8004cfa:	f7ff fedb 	bl	8004ab4 <_Balloc>
 8004cfe:	b930      	cbnz	r0, 8004d0e <__multiply+0x42>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f240 115d 	movw	r1, #349	; 0x15d
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <__multiply+0x148>)
 8004d08:	4843      	ldr	r0, [pc, #268]	; (8004e18 <__multiply+0x14c>)
 8004d0a:	f000 fcb1 	bl	8005670 <__assert_func>
 8004d0e:	f100 0514 	add.w	r5, r0, #20
 8004d12:	462b      	mov	r3, r5
 8004d14:	2200      	movs	r2, #0
 8004d16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d1a:	4543      	cmp	r3, r8
 8004d1c:	d321      	bcc.n	8004d62 <__multiply+0x96>
 8004d1e:	f104 0314 	add.w	r3, r4, #20
 8004d22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d26:	f109 0314 	add.w	r3, r9, #20
 8004d2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004d2e:	9202      	str	r2, [sp, #8]
 8004d30:	1b3a      	subs	r2, r7, r4
 8004d32:	3a15      	subs	r2, #21
 8004d34:	f022 0203 	bic.w	r2, r2, #3
 8004d38:	3204      	adds	r2, #4
 8004d3a:	f104 0115 	add.w	r1, r4, #21
 8004d3e:	428f      	cmp	r7, r1
 8004d40:	bf38      	it	cc
 8004d42:	2204      	movcc	r2, #4
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	9a02      	ldr	r2, [sp, #8]
 8004d48:	9303      	str	r3, [sp, #12]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d80c      	bhi.n	8004d68 <__multiply+0x9c>
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	dd03      	ble.n	8004d5a <__multiply+0x8e>
 8004d52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d059      	beq.n	8004e0e <__multiply+0x142>
 8004d5a:	6106      	str	r6, [r0, #16]
 8004d5c:	b005      	add	sp, #20
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	f843 2b04 	str.w	r2, [r3], #4
 8004d66:	e7d8      	b.n	8004d1a <__multiply+0x4e>
 8004d68:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	d023      	beq.n	8004dba <__multiply+0xee>
 8004d72:	46a9      	mov	r9, r5
 8004d74:	f04f 0c00 	mov.w	ip, #0
 8004d78:	f104 0e14 	add.w	lr, r4, #20
 8004d7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d80:	f8d9 1000 	ldr.w	r1, [r9]
 8004d84:	fa1f fb82 	uxth.w	fp, r2
 8004d88:	b289      	uxth	r1, r1
 8004d8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d8e:	4461      	add	r1, ip
 8004d90:	f8d9 c000 	ldr.w	ip, [r9]
 8004d94:	0c12      	lsrs	r2, r2, #16
 8004d96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d9a:	fb0a c202 	mla	r2, sl, r2, ip
 8004d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004da2:	b289      	uxth	r1, r1
 8004da4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004da8:	4577      	cmp	r7, lr
 8004daa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004dae:	f849 1b04 	str.w	r1, [r9], #4
 8004db2:	d8e3      	bhi.n	8004d7c <__multiply+0xb0>
 8004db4:	9a01      	ldr	r2, [sp, #4]
 8004db6:	f845 c002 	str.w	ip, [r5, r2]
 8004dba:	9a03      	ldr	r2, [sp, #12]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	d020      	beq.n	8004e0a <__multiply+0x13e>
 8004dc8:	46ae      	mov	lr, r5
 8004dca:	f04f 0a00 	mov.w	sl, #0
 8004dce:	6829      	ldr	r1, [r5, #0]
 8004dd0:	f104 0c14 	add.w	ip, r4, #20
 8004dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8004dd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004ddc:	b289      	uxth	r1, r1
 8004dde:	fb09 220b 	mla	r2, r9, fp, r2
 8004de2:	4492      	add	sl, r2
 8004de4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004de8:	f84e 1b04 	str.w	r1, [lr], #4
 8004dec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004df0:	f8be 1000 	ldrh.w	r1, [lr]
 8004df4:	0c12      	lsrs	r2, r2, #16
 8004df6:	fb09 1102 	mla	r1, r9, r2, r1
 8004dfa:	4567      	cmp	r7, ip
 8004dfc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004e00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e04:	d8e6      	bhi.n	8004dd4 <__multiply+0x108>
 8004e06:	9a01      	ldr	r2, [sp, #4]
 8004e08:	50a9      	str	r1, [r5, r2]
 8004e0a:	3504      	adds	r5, #4
 8004e0c:	e79b      	b.n	8004d46 <__multiply+0x7a>
 8004e0e:	3e01      	subs	r6, #1
 8004e10:	e79d      	b.n	8004d4e <__multiply+0x82>
 8004e12:	bf00      	nop
 8004e14:	08006343 	.word	0x08006343
 8004e18:	08006354 	.word	0x08006354

08004e1c <__pow5mult>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	4615      	mov	r5, r2
 8004e22:	f012 0203 	ands.w	r2, r2, #3
 8004e26:	4606      	mov	r6, r0
 8004e28:	460f      	mov	r7, r1
 8004e2a:	d007      	beq.n	8004e3c <__pow5mult+0x20>
 8004e2c:	4c25      	ldr	r4, [pc, #148]	; (8004ec4 <__pow5mult+0xa8>)
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	2300      	movs	r3, #0
 8004e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e36:	f7ff fe9f 	bl	8004b78 <__multadd>
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	10ad      	asrs	r5, r5, #2
 8004e3e:	d03d      	beq.n	8004ebc <__pow5mult+0xa0>
 8004e40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004e42:	b97c      	cbnz	r4, 8004e64 <__pow5mult+0x48>
 8004e44:	2010      	movs	r0, #16
 8004e46:	f7ff fe11 	bl	8004a6c <malloc>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6270      	str	r0, [r6, #36]	; 0x24
 8004e4e:	b928      	cbnz	r0, 8004e5c <__pow5mult+0x40>
 8004e50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004e54:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <__pow5mult+0xac>)
 8004e56:	481d      	ldr	r0, [pc, #116]	; (8004ecc <__pow5mult+0xb0>)
 8004e58:	f000 fc0a 	bl	8005670 <__assert_func>
 8004e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e60:	6004      	str	r4, [r0, #0]
 8004e62:	60c4      	str	r4, [r0, #12]
 8004e64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e6c:	b94c      	cbnz	r4, 8004e82 <__pow5mult+0x66>
 8004e6e:	f240 2171 	movw	r1, #625	; 0x271
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7ff ff14 	bl	8004ca0 <__i2b>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e80:	6003      	str	r3, [r0, #0]
 8004e82:	f04f 0900 	mov.w	r9, #0
 8004e86:	07eb      	lsls	r3, r5, #31
 8004e88:	d50a      	bpl.n	8004ea0 <__pow5mult+0x84>
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f7ff ff1c 	bl	8004ccc <__multiply>
 8004e94:	4680      	mov	r8, r0
 8004e96:	4639      	mov	r1, r7
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7ff fe4b 	bl	8004b34 <_Bfree>
 8004e9e:	4647      	mov	r7, r8
 8004ea0:	106d      	asrs	r5, r5, #1
 8004ea2:	d00b      	beq.n	8004ebc <__pow5mult+0xa0>
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	b938      	cbnz	r0, 8004eb8 <__pow5mult+0x9c>
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4621      	mov	r1, r4
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff ff0d 	bl	8004ccc <__multiply>
 8004eb2:	6020      	str	r0, [r4, #0]
 8004eb4:	f8c0 9000 	str.w	r9, [r0]
 8004eb8:	4604      	mov	r4, r0
 8004eba:	e7e4      	b.n	8004e86 <__pow5mult+0x6a>
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec2:	bf00      	nop
 8004ec4:	080064a0 	.word	0x080064a0
 8004ec8:	080062d1 	.word	0x080062d1
 8004ecc:	08006354 	.word	0x08006354

08004ed0 <__lshift>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4607      	mov	r7, r0
 8004ed8:	4691      	mov	r9, r2
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	6849      	ldr	r1, [r1, #4]
 8004ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ee8:	f108 0601 	add.w	r6, r8, #1
 8004eec:	42b3      	cmp	r3, r6
 8004eee:	db0b      	blt.n	8004f08 <__lshift+0x38>
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff fddf 	bl	8004ab4 <_Balloc>
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	b948      	cbnz	r0, 8004f0e <__lshift+0x3e>
 8004efa:	4602      	mov	r2, r0
 8004efc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004f00:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <__lshift+0xd8>)
 8004f02:	482a      	ldr	r0, [pc, #168]	; (8004fac <__lshift+0xdc>)
 8004f04:	f000 fbb4 	bl	8005670 <__assert_func>
 8004f08:	3101      	adds	r1, #1
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	e7ee      	b.n	8004eec <__lshift+0x1c>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f100 0114 	add.w	r1, r0, #20
 8004f14:	f100 0210 	add.w	r2, r0, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4553      	cmp	r3, sl
 8004f1c:	db37      	blt.n	8004f8e <__lshift+0xbe>
 8004f1e:	6920      	ldr	r0, [r4, #16]
 8004f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f24:	f104 0314 	add.w	r3, r4, #20
 8004f28:	f019 091f 	ands.w	r9, r9, #31
 8004f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004f34:	d02f      	beq.n	8004f96 <__lshift+0xc6>
 8004f36:	468a      	mov	sl, r1
 8004f38:	f04f 0c00 	mov.w	ip, #0
 8004f3c:	f1c9 0e20 	rsb	lr, r9, #32
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	fa02 f209 	lsl.w	r2, r2, r9
 8004f46:	ea42 020c 	orr.w	r2, r2, ip
 8004f4a:	f84a 2b04 	str.w	r2, [sl], #4
 8004f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f52:	4298      	cmp	r0, r3
 8004f54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004f58:	d8f2      	bhi.n	8004f40 <__lshift+0x70>
 8004f5a:	1b03      	subs	r3, r0, r4
 8004f5c:	3b15      	subs	r3, #21
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	3304      	adds	r3, #4
 8004f64:	f104 0215 	add.w	r2, r4, #21
 8004f68:	4290      	cmp	r0, r2
 8004f6a:	bf38      	it	cc
 8004f6c:	2304      	movcc	r3, #4
 8004f6e:	f841 c003 	str.w	ip, [r1, r3]
 8004f72:	f1bc 0f00 	cmp.w	ip, #0
 8004f76:	d001      	beq.n	8004f7c <__lshift+0xac>
 8004f78:	f108 0602 	add.w	r6, r8, #2
 8004f7c:	3e01      	subs	r6, #1
 8004f7e:	4638      	mov	r0, r7
 8004f80:	4621      	mov	r1, r4
 8004f82:	612e      	str	r6, [r5, #16]
 8004f84:	f7ff fdd6 	bl	8004b34 <_Bfree>
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f92:	3301      	adds	r3, #1
 8004f94:	e7c1      	b.n	8004f1a <__lshift+0x4a>
 8004f96:	3904      	subs	r1, #4
 8004f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fa2:	d8f9      	bhi.n	8004f98 <__lshift+0xc8>
 8004fa4:	e7ea      	b.n	8004f7c <__lshift+0xac>
 8004fa6:	bf00      	nop
 8004fa8:	08006343 	.word	0x08006343
 8004fac:	08006354 	.word	0x08006354

08004fb0 <__mcmp>:
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	690a      	ldr	r2, [r1, #16]
 8004fb4:	6900      	ldr	r0, [r0, #16]
 8004fb6:	b530      	push	{r4, r5, lr}
 8004fb8:	1a80      	subs	r0, r0, r2
 8004fba:	d10d      	bne.n	8004fd8 <__mcmp+0x28>
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	3114      	adds	r1, #20
 8004fc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fd0:	4295      	cmp	r5, r2
 8004fd2:	d002      	beq.n	8004fda <__mcmp+0x2a>
 8004fd4:	d304      	bcc.n	8004fe0 <__mcmp+0x30>
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	bd30      	pop	{r4, r5, pc}
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	d3f4      	bcc.n	8004fc8 <__mcmp+0x18>
 8004fde:	e7fb      	b.n	8004fd8 <__mcmp+0x28>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e7f8      	b.n	8004fd8 <__mcmp+0x28>
	...

08004fe8 <__mdiff>:
 8004fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	460d      	mov	r5, r1
 8004fee:	4607      	mov	r7, r0
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	f7ff ffdb 	bl	8004fb0 <__mcmp>
 8004ffa:	1e06      	subs	r6, r0, #0
 8004ffc:	d111      	bne.n	8005022 <__mdiff+0x3a>
 8004ffe:	4631      	mov	r1, r6
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff fd57 	bl	8004ab4 <_Balloc>
 8005006:	4602      	mov	r2, r0
 8005008:	b928      	cbnz	r0, 8005016 <__mdiff+0x2e>
 800500a:	f240 2132 	movw	r1, #562	; 0x232
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <__mdiff+0x110>)
 8005010:	483a      	ldr	r0, [pc, #232]	; (80050fc <__mdiff+0x114>)
 8005012:	f000 fb2d 	bl	8005670 <__assert_func>
 8005016:	2301      	movs	r3, #1
 8005018:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800501c:	4610      	mov	r0, r2
 800501e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	bfa4      	itt	ge
 8005024:	4623      	movge	r3, r4
 8005026:	462c      	movge	r4, r5
 8005028:	4638      	mov	r0, r7
 800502a:	6861      	ldr	r1, [r4, #4]
 800502c:	bfa6      	itte	ge
 800502e:	461d      	movge	r5, r3
 8005030:	2600      	movge	r6, #0
 8005032:	2601      	movlt	r6, #1
 8005034:	f7ff fd3e 	bl	8004ab4 <_Balloc>
 8005038:	4602      	mov	r2, r0
 800503a:	b918      	cbnz	r0, 8005044 <__mdiff+0x5c>
 800503c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <__mdiff+0x110>)
 8005042:	e7e5      	b.n	8005010 <__mdiff+0x28>
 8005044:	f102 0814 	add.w	r8, r2, #20
 8005048:	46c2      	mov	sl, r8
 800504a:	f04f 0c00 	mov.w	ip, #0
 800504e:	6927      	ldr	r7, [r4, #16]
 8005050:	60c6      	str	r6, [r0, #12]
 8005052:	692e      	ldr	r6, [r5, #16]
 8005054:	f104 0014 	add.w	r0, r4, #20
 8005058:	f105 0914 	add.w	r9, r5, #20
 800505c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005060:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005064:	3410      	adds	r4, #16
 8005066:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800506a:	f859 3b04 	ldr.w	r3, [r9], #4
 800506e:	fa1f f18b 	uxth.w	r1, fp
 8005072:	448c      	add	ip, r1
 8005074:	b299      	uxth	r1, r3
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	ebac 0101 	sub.w	r1, ip, r1
 800507c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005080:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005084:	b289      	uxth	r1, r1
 8005086:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800508a:	454e      	cmp	r6, r9
 800508c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005090:	f84a 3b04 	str.w	r3, [sl], #4
 8005094:	d8e7      	bhi.n	8005066 <__mdiff+0x7e>
 8005096:	1b73      	subs	r3, r6, r5
 8005098:	3b15      	subs	r3, #21
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	3515      	adds	r5, #21
 80050a0:	3304      	adds	r3, #4
 80050a2:	42ae      	cmp	r6, r5
 80050a4:	bf38      	it	cc
 80050a6:	2304      	movcc	r3, #4
 80050a8:	4418      	add	r0, r3
 80050aa:	4443      	add	r3, r8
 80050ac:	461e      	mov	r6, r3
 80050ae:	4605      	mov	r5, r0
 80050b0:	4575      	cmp	r5, lr
 80050b2:	d30e      	bcc.n	80050d2 <__mdiff+0xea>
 80050b4:	f10e 0103 	add.w	r1, lr, #3
 80050b8:	1a09      	subs	r1, r1, r0
 80050ba:	f021 0103 	bic.w	r1, r1, #3
 80050be:	3803      	subs	r0, #3
 80050c0:	4586      	cmp	lr, r0
 80050c2:	bf38      	it	cc
 80050c4:	2100      	movcc	r1, #0
 80050c6:	4419      	add	r1, r3
 80050c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80050cc:	b18b      	cbz	r3, 80050f2 <__mdiff+0x10a>
 80050ce:	6117      	str	r7, [r2, #16]
 80050d0:	e7a4      	b.n	800501c <__mdiff+0x34>
 80050d2:	f855 8b04 	ldr.w	r8, [r5], #4
 80050d6:	fa1f f188 	uxth.w	r1, r8
 80050da:	4461      	add	r1, ip
 80050dc:	140c      	asrs	r4, r1, #16
 80050de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80050e2:	b289      	uxth	r1, r1
 80050e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80050e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80050ec:	f846 1b04 	str.w	r1, [r6], #4
 80050f0:	e7de      	b.n	80050b0 <__mdiff+0xc8>
 80050f2:	3f01      	subs	r7, #1
 80050f4:	e7e8      	b.n	80050c8 <__mdiff+0xe0>
 80050f6:	bf00      	nop
 80050f8:	08006343 	.word	0x08006343
 80050fc:	08006354 	.word	0x08006354

08005100 <__d2b>:
 8005100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005104:	2101      	movs	r1, #1
 8005106:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800510a:	4690      	mov	r8, r2
 800510c:	461d      	mov	r5, r3
 800510e:	f7ff fcd1 	bl	8004ab4 <_Balloc>
 8005112:	4604      	mov	r4, r0
 8005114:	b930      	cbnz	r0, 8005124 <__d2b+0x24>
 8005116:	4602      	mov	r2, r0
 8005118:	f240 310a 	movw	r1, #778	; 0x30a
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <__d2b+0xb0>)
 800511e:	4825      	ldr	r0, [pc, #148]	; (80051b4 <__d2b+0xb4>)
 8005120:	f000 faa6 	bl	8005670 <__assert_func>
 8005124:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005128:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800512c:	bb2d      	cbnz	r5, 800517a <__d2b+0x7a>
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	f1b8 0300 	subs.w	r3, r8, #0
 8005134:	d026      	beq.n	8005184 <__d2b+0x84>
 8005136:	4668      	mov	r0, sp
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	f7ff fd83 	bl	8004c44 <__lo0bits>
 800513e:	9900      	ldr	r1, [sp, #0]
 8005140:	b1f0      	cbz	r0, 8005180 <__d2b+0x80>
 8005142:	9a01      	ldr	r2, [sp, #4]
 8005144:	f1c0 0320 	rsb	r3, r0, #32
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	430b      	orrs	r3, r1
 800514e:	40c2      	lsrs	r2, r0
 8005150:	6163      	str	r3, [r4, #20]
 8005152:	9201      	str	r2, [sp, #4]
 8005154:	9b01      	ldr	r3, [sp, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf14      	ite	ne
 800515a:	2102      	movne	r1, #2
 800515c:	2101      	moveq	r1, #1
 800515e:	61a3      	str	r3, [r4, #24]
 8005160:	6121      	str	r1, [r4, #16]
 8005162:	b1c5      	cbz	r5, 8005196 <__d2b+0x96>
 8005164:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005168:	4405      	add	r5, r0
 800516a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800516e:	603d      	str	r5, [r7, #0]
 8005170:	6030      	str	r0, [r6, #0]
 8005172:	4620      	mov	r0, r4
 8005174:	b002      	add	sp, #8
 8005176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800517a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800517e:	e7d6      	b.n	800512e <__d2b+0x2e>
 8005180:	6161      	str	r1, [r4, #20]
 8005182:	e7e7      	b.n	8005154 <__d2b+0x54>
 8005184:	a801      	add	r0, sp, #4
 8005186:	f7ff fd5d 	bl	8004c44 <__lo0bits>
 800518a:	2101      	movs	r1, #1
 800518c:	9b01      	ldr	r3, [sp, #4]
 800518e:	6121      	str	r1, [r4, #16]
 8005190:	6163      	str	r3, [r4, #20]
 8005192:	3020      	adds	r0, #32
 8005194:	e7e5      	b.n	8005162 <__d2b+0x62>
 8005196:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800519a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800519e:	6038      	str	r0, [r7, #0]
 80051a0:	6918      	ldr	r0, [r3, #16]
 80051a2:	f7ff fd2f 	bl	8004c04 <__hi0bits>
 80051a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80051aa:	6031      	str	r1, [r6, #0]
 80051ac:	e7e1      	b.n	8005172 <__d2b+0x72>
 80051ae:	bf00      	nop
 80051b0:	08006343 	.word	0x08006343
 80051b4:	08006354 	.word	0x08006354

080051b8 <_calloc_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	fba1 5402 	umull	r5, r4, r1, r2
 80051be:	b934      	cbnz	r4, 80051ce <_calloc_r+0x16>
 80051c0:	4629      	mov	r1, r5
 80051c2:	f000 f875 	bl	80052b0 <_malloc_r>
 80051c6:	4606      	mov	r6, r0
 80051c8:	b928      	cbnz	r0, 80051d6 <_calloc_r+0x1e>
 80051ca:	4630      	mov	r0, r6
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	220c      	movs	r2, #12
 80051d0:	2600      	movs	r6, #0
 80051d2:	6002      	str	r2, [r0, #0]
 80051d4:	e7f9      	b.n	80051ca <_calloc_r+0x12>
 80051d6:	462a      	mov	r2, r5
 80051d8:	4621      	mov	r1, r4
 80051da:	f7fe f93f 	bl	800345c <memset>
 80051de:	e7f4      	b.n	80051ca <_calloc_r+0x12>

080051e0 <_free_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4605      	mov	r5, r0
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d040      	beq.n	800526a <_free_r+0x8a>
 80051e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ec:	1f0c      	subs	r4, r1, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bfb8      	it	lt
 80051f2:	18e4      	addlt	r4, r4, r3
 80051f4:	f000 fa98 	bl	8005728 <__malloc_lock>
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <_free_r+0x8c>)
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	b933      	cbnz	r3, 800520c <_free_r+0x2c>
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6014      	str	r4, [r2, #0]
 8005202:	4628      	mov	r0, r5
 8005204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005208:	f000 ba94 	b.w	8005734 <__malloc_unlock>
 800520c:	42a3      	cmp	r3, r4
 800520e:	d908      	bls.n	8005222 <_free_r+0x42>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	1821      	adds	r1, r4, r0
 8005214:	428b      	cmp	r3, r1
 8005216:	bf01      	itttt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	1809      	addeq	r1, r1, r0
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	e7ed      	b.n	80051fe <_free_r+0x1e>
 8005222:	461a      	mov	r2, r3
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b10b      	cbz	r3, 800522c <_free_r+0x4c>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x42>
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	1850      	adds	r0, r2, r1
 8005230:	42a0      	cmp	r0, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x6c>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	4401      	add	r1, r0
 8005238:	1850      	adds	r0, r2, r1
 800523a:	4283      	cmp	r3, r0
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	d1e0      	bne.n	8005202 <_free_r+0x22>
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4401      	add	r1, r0
 8005246:	6011      	str	r1, [r2, #0]
 8005248:	6053      	str	r3, [r2, #4]
 800524a:	e7da      	b.n	8005202 <_free_r+0x22>
 800524c:	d902      	bls.n	8005254 <_free_r+0x74>
 800524e:	230c      	movs	r3, #12
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	e7d6      	b.n	8005202 <_free_r+0x22>
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	1821      	adds	r1, r4, r0
 8005258:	428b      	cmp	r3, r1
 800525a:	bf01      	itttt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	1809      	addeq	r1, r1, r0
 8005262:	6021      	streq	r1, [r4, #0]
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	6054      	str	r4, [r2, #4]
 8005268:	e7cb      	b.n	8005202 <_free_r+0x22>
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20000380 	.word	0x20000380

08005270 <sbrk_aligned>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	4e0e      	ldr	r6, [pc, #56]	; (80052ac <sbrk_aligned+0x3c>)
 8005274:	460c      	mov	r4, r1
 8005276:	6831      	ldr	r1, [r6, #0]
 8005278:	4605      	mov	r5, r0
 800527a:	b911      	cbnz	r1, 8005282 <sbrk_aligned+0x12>
 800527c:	f000 f9e8 	bl	8005650 <_sbrk_r>
 8005280:	6030      	str	r0, [r6, #0]
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f9e3 	bl	8005650 <_sbrk_r>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	d00a      	beq.n	80052a4 <sbrk_aligned+0x34>
 800528e:	1cc4      	adds	r4, r0, #3
 8005290:	f024 0403 	bic.w	r4, r4, #3
 8005294:	42a0      	cmp	r0, r4
 8005296:	d007      	beq.n	80052a8 <sbrk_aligned+0x38>
 8005298:	1a21      	subs	r1, r4, r0
 800529a:	4628      	mov	r0, r5
 800529c:	f000 f9d8 	bl	8005650 <_sbrk_r>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d101      	bne.n	80052a8 <sbrk_aligned+0x38>
 80052a4:	f04f 34ff 	mov.w	r4, #4294967295
 80052a8:	4620      	mov	r0, r4
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	20000384 	.word	0x20000384

080052b0 <_malloc_r>:
 80052b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b4:	1ccd      	adds	r5, r1, #3
 80052b6:	f025 0503 	bic.w	r5, r5, #3
 80052ba:	3508      	adds	r5, #8
 80052bc:	2d0c      	cmp	r5, #12
 80052be:	bf38      	it	cc
 80052c0:	250c      	movcc	r5, #12
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	4607      	mov	r7, r0
 80052c6:	db01      	blt.n	80052cc <_malloc_r+0x1c>
 80052c8:	42a9      	cmp	r1, r5
 80052ca:	d905      	bls.n	80052d8 <_malloc_r+0x28>
 80052cc:	230c      	movs	r3, #12
 80052ce:	2600      	movs	r6, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4630      	mov	r0, r6
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d8:	4e2e      	ldr	r6, [pc, #184]	; (8005394 <_malloc_r+0xe4>)
 80052da:	f000 fa25 	bl	8005728 <__malloc_lock>
 80052de:	6833      	ldr	r3, [r6, #0]
 80052e0:	461c      	mov	r4, r3
 80052e2:	bb34      	cbnz	r4, 8005332 <_malloc_r+0x82>
 80052e4:	4629      	mov	r1, r5
 80052e6:	4638      	mov	r0, r7
 80052e8:	f7ff ffc2 	bl	8005270 <sbrk_aligned>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	4604      	mov	r4, r0
 80052f0:	d14d      	bne.n	800538e <_malloc_r+0xde>
 80052f2:	6834      	ldr	r4, [r6, #0]
 80052f4:	4626      	mov	r6, r4
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	d140      	bne.n	800537c <_malloc_r+0xcc>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	4631      	mov	r1, r6
 80052fe:	4638      	mov	r0, r7
 8005300:	eb04 0803 	add.w	r8, r4, r3
 8005304:	f000 f9a4 	bl	8005650 <_sbrk_r>
 8005308:	4580      	cmp	r8, r0
 800530a:	d13a      	bne.n	8005382 <_malloc_r+0xd2>
 800530c:	6821      	ldr	r1, [r4, #0]
 800530e:	3503      	adds	r5, #3
 8005310:	1a6d      	subs	r5, r5, r1
 8005312:	f025 0503 	bic.w	r5, r5, #3
 8005316:	3508      	adds	r5, #8
 8005318:	2d0c      	cmp	r5, #12
 800531a:	bf38      	it	cc
 800531c:	250c      	movcc	r5, #12
 800531e:	4638      	mov	r0, r7
 8005320:	4629      	mov	r1, r5
 8005322:	f7ff ffa5 	bl	8005270 <sbrk_aligned>
 8005326:	3001      	adds	r0, #1
 8005328:	d02b      	beq.n	8005382 <_malloc_r+0xd2>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	442b      	add	r3, r5
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	e00e      	b.n	8005350 <_malloc_r+0xa0>
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	1b52      	subs	r2, r2, r5
 8005336:	d41e      	bmi.n	8005376 <_malloc_r+0xc6>
 8005338:	2a0b      	cmp	r2, #11
 800533a:	d916      	bls.n	800536a <_malloc_r+0xba>
 800533c:	1961      	adds	r1, r4, r5
 800533e:	42a3      	cmp	r3, r4
 8005340:	6025      	str	r5, [r4, #0]
 8005342:	bf18      	it	ne
 8005344:	6059      	strne	r1, [r3, #4]
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	bf08      	it	eq
 800534a:	6031      	streq	r1, [r6, #0]
 800534c:	5162      	str	r2, [r4, r5]
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	4638      	mov	r0, r7
 8005352:	f104 060b 	add.w	r6, r4, #11
 8005356:	f000 f9ed 	bl	8005734 <__malloc_unlock>
 800535a:	f026 0607 	bic.w	r6, r6, #7
 800535e:	1d23      	adds	r3, r4, #4
 8005360:	1af2      	subs	r2, r6, r3
 8005362:	d0b6      	beq.n	80052d2 <_malloc_r+0x22>
 8005364:	1b9b      	subs	r3, r3, r6
 8005366:	50a3      	str	r3, [r4, r2]
 8005368:	e7b3      	b.n	80052d2 <_malloc_r+0x22>
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	42a3      	cmp	r3, r4
 800536e:	bf0c      	ite	eq
 8005370:	6032      	streq	r2, [r6, #0]
 8005372:	605a      	strne	r2, [r3, #4]
 8005374:	e7ec      	b.n	8005350 <_malloc_r+0xa0>
 8005376:	4623      	mov	r3, r4
 8005378:	6864      	ldr	r4, [r4, #4]
 800537a:	e7b2      	b.n	80052e2 <_malloc_r+0x32>
 800537c:	4634      	mov	r4, r6
 800537e:	6876      	ldr	r6, [r6, #4]
 8005380:	e7b9      	b.n	80052f6 <_malloc_r+0x46>
 8005382:	230c      	movs	r3, #12
 8005384:	4638      	mov	r0, r7
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	f000 f9d4 	bl	8005734 <__malloc_unlock>
 800538c:	e7a1      	b.n	80052d2 <_malloc_r+0x22>
 800538e:	6025      	str	r5, [r4, #0]
 8005390:	e7de      	b.n	8005350 <_malloc_r+0xa0>
 8005392:	bf00      	nop
 8005394:	20000380 	.word	0x20000380

08005398 <__ssputs_r>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	688e      	ldr	r6, [r1, #8]
 800539e:	4682      	mov	sl, r0
 80053a0:	429e      	cmp	r6, r3
 80053a2:	460c      	mov	r4, r1
 80053a4:	4690      	mov	r8, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	d838      	bhi.n	800541c <__ssputs_r+0x84>
 80053aa:	898a      	ldrh	r2, [r1, #12]
 80053ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053b0:	d032      	beq.n	8005418 <__ssputs_r+0x80>
 80053b2:	6825      	ldr	r5, [r4, #0]
 80053b4:	6909      	ldr	r1, [r1, #16]
 80053b6:	3301      	adds	r3, #1
 80053b8:	eba5 0901 	sub.w	r9, r5, r1
 80053bc:	6965      	ldr	r5, [r4, #20]
 80053be:	444b      	add	r3, r9
 80053c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053c8:	106d      	asrs	r5, r5, #1
 80053ca:	429d      	cmp	r5, r3
 80053cc:	bf38      	it	cc
 80053ce:	461d      	movcc	r5, r3
 80053d0:	0553      	lsls	r3, r2, #21
 80053d2:	d531      	bpl.n	8005438 <__ssputs_r+0xa0>
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7ff ff6b 	bl	80052b0 <_malloc_r>
 80053da:	4606      	mov	r6, r0
 80053dc:	b950      	cbnz	r0, 80053f4 <__ssputs_r+0x5c>
 80053de:	230c      	movs	r3, #12
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	f8ca 3000 	str.w	r3, [sl]
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	464a      	mov	r2, r9
 80053f6:	6921      	ldr	r1, [r4, #16]
 80053f8:	f7ff fb4e 	bl	8004a98 <memcpy>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	6126      	str	r6, [r4, #16]
 800540a:	444e      	add	r6, r9
 800540c:	6026      	str	r6, [r4, #0]
 800540e:	463e      	mov	r6, r7
 8005410:	6165      	str	r5, [r4, #20]
 8005412:	eba5 0509 	sub.w	r5, r5, r9
 8005416:	60a5      	str	r5, [r4, #8]
 8005418:	42be      	cmp	r6, r7
 800541a:	d900      	bls.n	800541e <__ssputs_r+0x86>
 800541c:	463e      	mov	r6, r7
 800541e:	4632      	mov	r2, r6
 8005420:	4641      	mov	r1, r8
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	f000 f966 	bl	80056f4 <memmove>
 8005428:	68a3      	ldr	r3, [r4, #8]
 800542a:	2000      	movs	r0, #0
 800542c:	1b9b      	subs	r3, r3, r6
 800542e:	60a3      	str	r3, [r4, #8]
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	4433      	add	r3, r6
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	e7db      	b.n	80053f0 <__ssputs_r+0x58>
 8005438:	462a      	mov	r2, r5
 800543a:	f000 f981 	bl	8005740 <_realloc_r>
 800543e:	4606      	mov	r6, r0
 8005440:	2800      	cmp	r0, #0
 8005442:	d1e1      	bne.n	8005408 <__ssputs_r+0x70>
 8005444:	4650      	mov	r0, sl
 8005446:	6921      	ldr	r1, [r4, #16]
 8005448:	f7ff feca 	bl	80051e0 <_free_r>
 800544c:	e7c7      	b.n	80053de <__ssputs_r+0x46>
	...

08005450 <_svfiprintf_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	4698      	mov	r8, r3
 8005456:	898b      	ldrh	r3, [r1, #12]
 8005458:	4607      	mov	r7, r0
 800545a:	061b      	lsls	r3, r3, #24
 800545c:	460d      	mov	r5, r1
 800545e:	4614      	mov	r4, r2
 8005460:	b09d      	sub	sp, #116	; 0x74
 8005462:	d50e      	bpl.n	8005482 <_svfiprintf_r+0x32>
 8005464:	690b      	ldr	r3, [r1, #16]
 8005466:	b963      	cbnz	r3, 8005482 <_svfiprintf_r+0x32>
 8005468:	2140      	movs	r1, #64	; 0x40
 800546a:	f7ff ff21 	bl	80052b0 <_malloc_r>
 800546e:	6028      	str	r0, [r5, #0]
 8005470:	6128      	str	r0, [r5, #16]
 8005472:	b920      	cbnz	r0, 800547e <_svfiprintf_r+0x2e>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	e0d1      	b.n	8005622 <_svfiprintf_r+0x1d2>
 800547e:	2340      	movs	r3, #64	; 0x40
 8005480:	616b      	str	r3, [r5, #20]
 8005482:	2300      	movs	r3, #0
 8005484:	9309      	str	r3, [sp, #36]	; 0x24
 8005486:	2320      	movs	r3, #32
 8005488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800548c:	2330      	movs	r3, #48	; 0x30
 800548e:	f04f 0901 	mov.w	r9, #1
 8005492:	f8cd 800c 	str.w	r8, [sp, #12]
 8005496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800563c <_svfiprintf_r+0x1ec>
 800549a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800549e:	4623      	mov	r3, r4
 80054a0:	469a      	mov	sl, r3
 80054a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a6:	b10a      	cbz	r2, 80054ac <_svfiprintf_r+0x5c>
 80054a8:	2a25      	cmp	r2, #37	; 0x25
 80054aa:	d1f9      	bne.n	80054a0 <_svfiprintf_r+0x50>
 80054ac:	ebba 0b04 	subs.w	fp, sl, r4
 80054b0:	d00b      	beq.n	80054ca <_svfiprintf_r+0x7a>
 80054b2:	465b      	mov	r3, fp
 80054b4:	4622      	mov	r2, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	4638      	mov	r0, r7
 80054ba:	f7ff ff6d 	bl	8005398 <__ssputs_r>
 80054be:	3001      	adds	r0, #1
 80054c0:	f000 80aa 	beq.w	8005618 <_svfiprintf_r+0x1c8>
 80054c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c6:	445a      	add	r2, fp
 80054c8:	9209      	str	r2, [sp, #36]	; 0x24
 80054ca:	f89a 3000 	ldrb.w	r3, [sl]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80a2 	beq.w	8005618 <_svfiprintf_r+0x1c8>
 80054d4:	2300      	movs	r3, #0
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054de:	f10a 0a01 	add.w	sl, sl, #1
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	9307      	str	r3, [sp, #28]
 80054e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ea:	931a      	str	r3, [sp, #104]	; 0x68
 80054ec:	4654      	mov	r4, sl
 80054ee:	2205      	movs	r2, #5
 80054f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f4:	4851      	ldr	r0, [pc, #324]	; (800563c <_svfiprintf_r+0x1ec>)
 80054f6:	f7ff fac1 	bl	8004a7c <memchr>
 80054fa:	9a04      	ldr	r2, [sp, #16]
 80054fc:	b9d8      	cbnz	r0, 8005536 <_svfiprintf_r+0xe6>
 80054fe:	06d0      	lsls	r0, r2, #27
 8005500:	bf44      	itt	mi
 8005502:	2320      	movmi	r3, #32
 8005504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005508:	0711      	lsls	r1, r2, #28
 800550a:	bf44      	itt	mi
 800550c:	232b      	movmi	r3, #43	; 0x2b
 800550e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005512:	f89a 3000 	ldrb.w	r3, [sl]
 8005516:	2b2a      	cmp	r3, #42	; 0x2a
 8005518:	d015      	beq.n	8005546 <_svfiprintf_r+0xf6>
 800551a:	4654      	mov	r4, sl
 800551c:	2000      	movs	r0, #0
 800551e:	f04f 0c0a 	mov.w	ip, #10
 8005522:	9a07      	ldr	r2, [sp, #28]
 8005524:	4621      	mov	r1, r4
 8005526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800552a:	3b30      	subs	r3, #48	; 0x30
 800552c:	2b09      	cmp	r3, #9
 800552e:	d94e      	bls.n	80055ce <_svfiprintf_r+0x17e>
 8005530:	b1b0      	cbz	r0, 8005560 <_svfiprintf_r+0x110>
 8005532:	9207      	str	r2, [sp, #28]
 8005534:	e014      	b.n	8005560 <_svfiprintf_r+0x110>
 8005536:	eba0 0308 	sub.w	r3, r0, r8
 800553a:	fa09 f303 	lsl.w	r3, r9, r3
 800553e:	4313      	orrs	r3, r2
 8005540:	46a2      	mov	sl, r4
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	e7d2      	b.n	80054ec <_svfiprintf_r+0x9c>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	1d19      	adds	r1, r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	9103      	str	r1, [sp, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbb      	ittet	lt
 8005552:	425b      	neglt	r3, r3
 8005554:	f042 0202 	orrlt.w	r2, r2, #2
 8005558:	9307      	strge	r3, [sp, #28]
 800555a:	9307      	strlt	r3, [sp, #28]
 800555c:	bfb8      	it	lt
 800555e:	9204      	strlt	r2, [sp, #16]
 8005560:	7823      	ldrb	r3, [r4, #0]
 8005562:	2b2e      	cmp	r3, #46	; 0x2e
 8005564:	d10c      	bne.n	8005580 <_svfiprintf_r+0x130>
 8005566:	7863      	ldrb	r3, [r4, #1]
 8005568:	2b2a      	cmp	r3, #42	; 0x2a
 800556a:	d135      	bne.n	80055d8 <_svfiprintf_r+0x188>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	3402      	adds	r4, #2
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	9203      	str	r2, [sp, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	bfb8      	it	lt
 800557a:	f04f 33ff 	movlt.w	r3, #4294967295
 800557e:	9305      	str	r3, [sp, #20]
 8005580:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005640 <_svfiprintf_r+0x1f0>
 8005584:	2203      	movs	r2, #3
 8005586:	4650      	mov	r0, sl
 8005588:	7821      	ldrb	r1, [r4, #0]
 800558a:	f7ff fa77 	bl	8004a7c <memchr>
 800558e:	b140      	cbz	r0, 80055a2 <_svfiprintf_r+0x152>
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	eba0 000a 	sub.w	r0, r0, sl
 8005596:	fa03 f000 	lsl.w	r0, r3, r0
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	3401      	adds	r4, #1
 800559e:	4303      	orrs	r3, r0
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a6:	2206      	movs	r2, #6
 80055a8:	4826      	ldr	r0, [pc, #152]	; (8005644 <_svfiprintf_r+0x1f4>)
 80055aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ae:	f7ff fa65 	bl	8004a7c <memchr>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d038      	beq.n	8005628 <_svfiprintf_r+0x1d8>
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <_svfiprintf_r+0x1f8>)
 80055b8:	bb1b      	cbnz	r3, 8005602 <_svfiprintf_r+0x1b2>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	3307      	adds	r3, #7
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	3308      	adds	r3, #8
 80055c4:	9303      	str	r3, [sp, #12]
 80055c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c8:	4433      	add	r3, r6
 80055ca:	9309      	str	r3, [sp, #36]	; 0x24
 80055cc:	e767      	b.n	800549e <_svfiprintf_r+0x4e>
 80055ce:	460c      	mov	r4, r1
 80055d0:	2001      	movs	r0, #1
 80055d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d6:	e7a5      	b.n	8005524 <_svfiprintf_r+0xd4>
 80055d8:	2300      	movs	r3, #0
 80055da:	f04f 0c0a 	mov.w	ip, #10
 80055de:	4619      	mov	r1, r3
 80055e0:	3401      	adds	r4, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4620      	mov	r0, r4
 80055e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ea:	3a30      	subs	r2, #48	; 0x30
 80055ec:	2a09      	cmp	r2, #9
 80055ee:	d903      	bls.n	80055f8 <_svfiprintf_r+0x1a8>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0c5      	beq.n	8005580 <_svfiprintf_r+0x130>
 80055f4:	9105      	str	r1, [sp, #20]
 80055f6:	e7c3      	b.n	8005580 <_svfiprintf_r+0x130>
 80055f8:	4604      	mov	r4, r0
 80055fa:	2301      	movs	r3, #1
 80055fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005600:	e7f0      	b.n	80055e4 <_svfiprintf_r+0x194>
 8005602:	ab03      	add	r3, sp, #12
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	462a      	mov	r2, r5
 8005608:	4638      	mov	r0, r7
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <_svfiprintf_r+0x1fc>)
 800560c:	a904      	add	r1, sp, #16
 800560e:	f7fd ffcb 	bl	80035a8 <_printf_float>
 8005612:	1c42      	adds	r2, r0, #1
 8005614:	4606      	mov	r6, r0
 8005616:	d1d6      	bne.n	80055c6 <_svfiprintf_r+0x176>
 8005618:	89ab      	ldrh	r3, [r5, #12]
 800561a:	065b      	lsls	r3, r3, #25
 800561c:	f53f af2c 	bmi.w	8005478 <_svfiprintf_r+0x28>
 8005620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005622:	b01d      	add	sp, #116	; 0x74
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	ab03      	add	r3, sp, #12
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	462a      	mov	r2, r5
 800562e:	4638      	mov	r0, r7
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <_svfiprintf_r+0x1fc>)
 8005632:	a904      	add	r1, sp, #16
 8005634:	f7fe fa54 	bl	8003ae0 <_printf_i>
 8005638:	e7eb      	b.n	8005612 <_svfiprintf_r+0x1c2>
 800563a:	bf00      	nop
 800563c:	080064ac 	.word	0x080064ac
 8005640:	080064b2 	.word	0x080064b2
 8005644:	080064b6 	.word	0x080064b6
 8005648:	080035a9 	.word	0x080035a9
 800564c:	08005399 	.word	0x08005399

08005650 <_sbrk_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	2300      	movs	r3, #0
 8005654:	4d05      	ldr	r5, [pc, #20]	; (800566c <_sbrk_r+0x1c>)
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	f7fc f876 	bl	800174c <_sbrk>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_sbrk_r+0x1a>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_sbrk_r+0x1a>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	20000388 	.word	0x20000388

08005670 <__assert_func>:
 8005670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005672:	4614      	mov	r4, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <__assert_func+0x2c>)
 8005678:	4605      	mov	r5, r0
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68d8      	ldr	r0, [r3, #12]
 800567e:	b14c      	cbz	r4, 8005694 <__assert_func+0x24>
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <__assert_func+0x30>)
 8005682:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005686:	9100      	str	r1, [sp, #0]
 8005688:	462b      	mov	r3, r5
 800568a:	4906      	ldr	r1, [pc, #24]	; (80056a4 <__assert_func+0x34>)
 800568c:	f000 f80e 	bl	80056ac <fiprintf>
 8005690:	f000 faaa 	bl	8005be8 <abort>
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <__assert_func+0x38>)
 8005696:	461c      	mov	r4, r3
 8005698:	e7f3      	b.n	8005682 <__assert_func+0x12>
 800569a:	bf00      	nop
 800569c:	2000000c 	.word	0x2000000c
 80056a0:	080064bd 	.word	0x080064bd
 80056a4:	080064ca 	.word	0x080064ca
 80056a8:	080064f8 	.word	0x080064f8

080056ac <fiprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b503      	push	{r0, r1, lr}
 80056b0:	4601      	mov	r1, r0
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	4805      	ldr	r0, [pc, #20]	; (80056cc <fiprintf+0x20>)
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f000 f895 	bl	80057ec <_vfiprintf_r>
 80056c2:	b002      	add	sp, #8
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b003      	add	sp, #12
 80056ca:	4770      	bx	lr
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <__ascii_mbtowc>:
 80056d0:	b082      	sub	sp, #8
 80056d2:	b901      	cbnz	r1, 80056d6 <__ascii_mbtowc+0x6>
 80056d4:	a901      	add	r1, sp, #4
 80056d6:	b142      	cbz	r2, 80056ea <__ascii_mbtowc+0x1a>
 80056d8:	b14b      	cbz	r3, 80056ee <__ascii_mbtowc+0x1e>
 80056da:	7813      	ldrb	r3, [r2, #0]
 80056dc:	600b      	str	r3, [r1, #0]
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	1e10      	subs	r0, r2, #0
 80056e2:	bf18      	it	ne
 80056e4:	2001      	movne	r0, #1
 80056e6:	b002      	add	sp, #8
 80056e8:	4770      	bx	lr
 80056ea:	4610      	mov	r0, r2
 80056ec:	e7fb      	b.n	80056e6 <__ascii_mbtowc+0x16>
 80056ee:	f06f 0001 	mvn.w	r0, #1
 80056f2:	e7f8      	b.n	80056e6 <__ascii_mbtowc+0x16>

080056f4 <memmove>:
 80056f4:	4288      	cmp	r0, r1
 80056f6:	b510      	push	{r4, lr}
 80056f8:	eb01 0402 	add.w	r4, r1, r2
 80056fc:	d902      	bls.n	8005704 <memmove+0x10>
 80056fe:	4284      	cmp	r4, r0
 8005700:	4623      	mov	r3, r4
 8005702:	d807      	bhi.n	8005714 <memmove+0x20>
 8005704:	1e43      	subs	r3, r0, #1
 8005706:	42a1      	cmp	r1, r4
 8005708:	d008      	beq.n	800571c <memmove+0x28>
 800570a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005712:	e7f8      	b.n	8005706 <memmove+0x12>
 8005714:	4601      	mov	r1, r0
 8005716:	4402      	add	r2, r0
 8005718:	428a      	cmp	r2, r1
 800571a:	d100      	bne.n	800571e <memmove+0x2a>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005726:	e7f7      	b.n	8005718 <memmove+0x24>

08005728 <__malloc_lock>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__malloc_lock+0x8>)
 800572a:	f000 bc19 	b.w	8005f60 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	2000038c 	.word	0x2000038c

08005734 <__malloc_unlock>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__malloc_unlock+0x8>)
 8005736:	f000 bc14 	b.w	8005f62 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	2000038c 	.word	0x2000038c

08005740 <_realloc_r>:
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	4680      	mov	r8, r0
 8005746:	4614      	mov	r4, r2
 8005748:	460e      	mov	r6, r1
 800574a:	b921      	cbnz	r1, 8005756 <_realloc_r+0x16>
 800574c:	4611      	mov	r1, r2
 800574e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005752:	f7ff bdad 	b.w	80052b0 <_malloc_r>
 8005756:	b92a      	cbnz	r2, 8005764 <_realloc_r+0x24>
 8005758:	f7ff fd42 	bl	80051e0 <_free_r>
 800575c:	4625      	mov	r5, r4
 800575e:	4628      	mov	r0, r5
 8005760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005764:	f000 fc64 	bl	8006030 <_malloc_usable_size_r>
 8005768:	4284      	cmp	r4, r0
 800576a:	4607      	mov	r7, r0
 800576c:	d802      	bhi.n	8005774 <_realloc_r+0x34>
 800576e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005772:	d812      	bhi.n	800579a <_realloc_r+0x5a>
 8005774:	4621      	mov	r1, r4
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fd9a 	bl	80052b0 <_malloc_r>
 800577c:	4605      	mov	r5, r0
 800577e:	2800      	cmp	r0, #0
 8005780:	d0ed      	beq.n	800575e <_realloc_r+0x1e>
 8005782:	42bc      	cmp	r4, r7
 8005784:	4622      	mov	r2, r4
 8005786:	4631      	mov	r1, r6
 8005788:	bf28      	it	cs
 800578a:	463a      	movcs	r2, r7
 800578c:	f7ff f984 	bl	8004a98 <memcpy>
 8005790:	4631      	mov	r1, r6
 8005792:	4640      	mov	r0, r8
 8005794:	f7ff fd24 	bl	80051e0 <_free_r>
 8005798:	e7e1      	b.n	800575e <_realloc_r+0x1e>
 800579a:	4635      	mov	r5, r6
 800579c:	e7df      	b.n	800575e <_realloc_r+0x1e>

0800579e <__sfputc_r>:
 800579e:	6893      	ldr	r3, [r2, #8]
 80057a0:	b410      	push	{r4}
 80057a2:	3b01      	subs	r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	6093      	str	r3, [r2, #8]
 80057a8:	da07      	bge.n	80057ba <__sfputc_r+0x1c>
 80057aa:	6994      	ldr	r4, [r2, #24]
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	db01      	blt.n	80057b4 <__sfputc_r+0x16>
 80057b0:	290a      	cmp	r1, #10
 80057b2:	d102      	bne.n	80057ba <__sfputc_r+0x1c>
 80057b4:	bc10      	pop	{r4}
 80057b6:	f000 b949 	b.w	8005a4c <__swbuf_r>
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	1c58      	adds	r0, r3, #1
 80057be:	6010      	str	r0, [r2, #0]
 80057c0:	7019      	strb	r1, [r3, #0]
 80057c2:	4608      	mov	r0, r1
 80057c4:	bc10      	pop	{r4}
 80057c6:	4770      	bx	lr

080057c8 <__sfputs_r>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	4614      	mov	r4, r2
 80057d0:	18d5      	adds	r5, r2, r3
 80057d2:	42ac      	cmp	r4, r5
 80057d4:	d101      	bne.n	80057da <__sfputs_r+0x12>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e007      	b.n	80057ea <__sfputs_r+0x22>
 80057da:	463a      	mov	r2, r7
 80057dc:	4630      	mov	r0, r6
 80057de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e2:	f7ff ffdc 	bl	800579e <__sfputc_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d1f3      	bne.n	80057d2 <__sfputs_r+0xa>
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057ec <_vfiprintf_r>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	460d      	mov	r5, r1
 80057f2:	4614      	mov	r4, r2
 80057f4:	4698      	mov	r8, r3
 80057f6:	4606      	mov	r6, r0
 80057f8:	b09d      	sub	sp, #116	; 0x74
 80057fa:	b118      	cbz	r0, 8005804 <_vfiprintf_r+0x18>
 80057fc:	6983      	ldr	r3, [r0, #24]
 80057fe:	b90b      	cbnz	r3, 8005804 <_vfiprintf_r+0x18>
 8005800:	f000 fb10 	bl	8005e24 <__sinit>
 8005804:	4b89      	ldr	r3, [pc, #548]	; (8005a2c <_vfiprintf_r+0x240>)
 8005806:	429d      	cmp	r5, r3
 8005808:	d11b      	bne.n	8005842 <_vfiprintf_r+0x56>
 800580a:	6875      	ldr	r5, [r6, #4]
 800580c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800580e:	07d9      	lsls	r1, r3, #31
 8005810:	d405      	bmi.n	800581e <_vfiprintf_r+0x32>
 8005812:	89ab      	ldrh	r3, [r5, #12]
 8005814:	059a      	lsls	r2, r3, #22
 8005816:	d402      	bmi.n	800581e <_vfiprintf_r+0x32>
 8005818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800581a:	f000 fba1 	bl	8005f60 <__retarget_lock_acquire_recursive>
 800581e:	89ab      	ldrh	r3, [r5, #12]
 8005820:	071b      	lsls	r3, r3, #28
 8005822:	d501      	bpl.n	8005828 <_vfiprintf_r+0x3c>
 8005824:	692b      	ldr	r3, [r5, #16]
 8005826:	b9eb      	cbnz	r3, 8005864 <_vfiprintf_r+0x78>
 8005828:	4629      	mov	r1, r5
 800582a:	4630      	mov	r0, r6
 800582c:	f000 f96e 	bl	8005b0c <__swsetup_r>
 8005830:	b1c0      	cbz	r0, 8005864 <_vfiprintf_r+0x78>
 8005832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005834:	07dc      	lsls	r4, r3, #31
 8005836:	d50e      	bpl.n	8005856 <_vfiprintf_r+0x6a>
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	b01d      	add	sp, #116	; 0x74
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005842:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <_vfiprintf_r+0x244>)
 8005844:	429d      	cmp	r5, r3
 8005846:	d101      	bne.n	800584c <_vfiprintf_r+0x60>
 8005848:	68b5      	ldr	r5, [r6, #8]
 800584a:	e7df      	b.n	800580c <_vfiprintf_r+0x20>
 800584c:	4b79      	ldr	r3, [pc, #484]	; (8005a34 <_vfiprintf_r+0x248>)
 800584e:	429d      	cmp	r5, r3
 8005850:	bf08      	it	eq
 8005852:	68f5      	ldreq	r5, [r6, #12]
 8005854:	e7da      	b.n	800580c <_vfiprintf_r+0x20>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	0598      	lsls	r0, r3, #22
 800585a:	d4ed      	bmi.n	8005838 <_vfiprintf_r+0x4c>
 800585c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800585e:	f000 fb80 	bl	8005f62 <__retarget_lock_release_recursive>
 8005862:	e7e9      	b.n	8005838 <_vfiprintf_r+0x4c>
 8005864:	2300      	movs	r3, #0
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	2320      	movs	r3, #32
 800586a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800586e:	2330      	movs	r3, #48	; 0x30
 8005870:	f04f 0901 	mov.w	r9, #1
 8005874:	f8cd 800c 	str.w	r8, [sp, #12]
 8005878:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005a38 <_vfiprintf_r+0x24c>
 800587c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005880:	4623      	mov	r3, r4
 8005882:	469a      	mov	sl, r3
 8005884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005888:	b10a      	cbz	r2, 800588e <_vfiprintf_r+0xa2>
 800588a:	2a25      	cmp	r2, #37	; 0x25
 800588c:	d1f9      	bne.n	8005882 <_vfiprintf_r+0x96>
 800588e:	ebba 0b04 	subs.w	fp, sl, r4
 8005892:	d00b      	beq.n	80058ac <_vfiprintf_r+0xc0>
 8005894:	465b      	mov	r3, fp
 8005896:	4622      	mov	r2, r4
 8005898:	4629      	mov	r1, r5
 800589a:	4630      	mov	r0, r6
 800589c:	f7ff ff94 	bl	80057c8 <__sfputs_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	f000 80aa 	beq.w	80059fa <_vfiprintf_r+0x20e>
 80058a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a8:	445a      	add	r2, fp
 80058aa:	9209      	str	r2, [sp, #36]	; 0x24
 80058ac:	f89a 3000 	ldrb.w	r3, [sl]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80a2 	beq.w	80059fa <_vfiprintf_r+0x20e>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f04f 32ff 	mov.w	r2, #4294967295
 80058bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c0:	f10a 0a01 	add.w	sl, sl, #1
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058cc:	931a      	str	r3, [sp, #104]	; 0x68
 80058ce:	4654      	mov	r4, sl
 80058d0:	2205      	movs	r2, #5
 80058d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d6:	4858      	ldr	r0, [pc, #352]	; (8005a38 <_vfiprintf_r+0x24c>)
 80058d8:	f7ff f8d0 	bl	8004a7c <memchr>
 80058dc:	9a04      	ldr	r2, [sp, #16]
 80058de:	b9d8      	cbnz	r0, 8005918 <_vfiprintf_r+0x12c>
 80058e0:	06d1      	lsls	r1, r2, #27
 80058e2:	bf44      	itt	mi
 80058e4:	2320      	movmi	r3, #32
 80058e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ea:	0713      	lsls	r3, r2, #28
 80058ec:	bf44      	itt	mi
 80058ee:	232b      	movmi	r3, #43	; 0x2b
 80058f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f4:	f89a 3000 	ldrb.w	r3, [sl]
 80058f8:	2b2a      	cmp	r3, #42	; 0x2a
 80058fa:	d015      	beq.n	8005928 <_vfiprintf_r+0x13c>
 80058fc:	4654      	mov	r4, sl
 80058fe:	2000      	movs	r0, #0
 8005900:	f04f 0c0a 	mov.w	ip, #10
 8005904:	9a07      	ldr	r2, [sp, #28]
 8005906:	4621      	mov	r1, r4
 8005908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590c:	3b30      	subs	r3, #48	; 0x30
 800590e:	2b09      	cmp	r3, #9
 8005910:	d94e      	bls.n	80059b0 <_vfiprintf_r+0x1c4>
 8005912:	b1b0      	cbz	r0, 8005942 <_vfiprintf_r+0x156>
 8005914:	9207      	str	r2, [sp, #28]
 8005916:	e014      	b.n	8005942 <_vfiprintf_r+0x156>
 8005918:	eba0 0308 	sub.w	r3, r0, r8
 800591c:	fa09 f303 	lsl.w	r3, r9, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	46a2      	mov	sl, r4
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	e7d2      	b.n	80058ce <_vfiprintf_r+0xe2>
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	1d19      	adds	r1, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	9103      	str	r1, [sp, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	bfbb      	ittet	lt
 8005934:	425b      	neglt	r3, r3
 8005936:	f042 0202 	orrlt.w	r2, r2, #2
 800593a:	9307      	strge	r3, [sp, #28]
 800593c:	9307      	strlt	r3, [sp, #28]
 800593e:	bfb8      	it	lt
 8005940:	9204      	strlt	r2, [sp, #16]
 8005942:	7823      	ldrb	r3, [r4, #0]
 8005944:	2b2e      	cmp	r3, #46	; 0x2e
 8005946:	d10c      	bne.n	8005962 <_vfiprintf_r+0x176>
 8005948:	7863      	ldrb	r3, [r4, #1]
 800594a:	2b2a      	cmp	r3, #42	; 0x2a
 800594c:	d135      	bne.n	80059ba <_vfiprintf_r+0x1ce>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	3402      	adds	r4, #2
 8005952:	1d1a      	adds	r2, r3, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	9203      	str	r2, [sp, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfb8      	it	lt
 800595c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005a3c <_vfiprintf_r+0x250>
 8005966:	2203      	movs	r2, #3
 8005968:	4650      	mov	r0, sl
 800596a:	7821      	ldrb	r1, [r4, #0]
 800596c:	f7ff f886 	bl	8004a7c <memchr>
 8005970:	b140      	cbz	r0, 8005984 <_vfiprintf_r+0x198>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	eba0 000a 	sub.w	r0, r0, sl
 8005978:	fa03 f000 	lsl.w	r0, r3, r0
 800597c:	9b04      	ldr	r3, [sp, #16]
 800597e:	3401      	adds	r4, #1
 8005980:	4303      	orrs	r3, r0
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005988:	2206      	movs	r2, #6
 800598a:	482d      	ldr	r0, [pc, #180]	; (8005a40 <_vfiprintf_r+0x254>)
 800598c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005990:	f7ff f874 	bl	8004a7c <memchr>
 8005994:	2800      	cmp	r0, #0
 8005996:	d03f      	beq.n	8005a18 <_vfiprintf_r+0x22c>
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <_vfiprintf_r+0x258>)
 800599a:	bb1b      	cbnz	r3, 80059e4 <_vfiprintf_r+0x1f8>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	3307      	adds	r3, #7
 80059a0:	f023 0307 	bic.w	r3, r3, #7
 80059a4:	3308      	adds	r3, #8
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059aa:	443b      	add	r3, r7
 80059ac:	9309      	str	r3, [sp, #36]	; 0x24
 80059ae:	e767      	b.n	8005880 <_vfiprintf_r+0x94>
 80059b0:	460c      	mov	r4, r1
 80059b2:	2001      	movs	r0, #1
 80059b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059b8:	e7a5      	b.n	8005906 <_vfiprintf_r+0x11a>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	4619      	mov	r1, r3
 80059c2:	3401      	adds	r4, #1
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	4620      	mov	r0, r4
 80059c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059cc:	3a30      	subs	r2, #48	; 0x30
 80059ce:	2a09      	cmp	r2, #9
 80059d0:	d903      	bls.n	80059da <_vfiprintf_r+0x1ee>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0c5      	beq.n	8005962 <_vfiprintf_r+0x176>
 80059d6:	9105      	str	r1, [sp, #20]
 80059d8:	e7c3      	b.n	8005962 <_vfiprintf_r+0x176>
 80059da:	4604      	mov	r4, r0
 80059dc:	2301      	movs	r3, #1
 80059de:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e2:	e7f0      	b.n	80059c6 <_vfiprintf_r+0x1da>
 80059e4:	ab03      	add	r3, sp, #12
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	462a      	mov	r2, r5
 80059ea:	4630      	mov	r0, r6
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <_vfiprintf_r+0x25c>)
 80059ee:	a904      	add	r1, sp, #16
 80059f0:	f7fd fdda 	bl	80035a8 <_printf_float>
 80059f4:	4607      	mov	r7, r0
 80059f6:	1c78      	adds	r0, r7, #1
 80059f8:	d1d6      	bne.n	80059a8 <_vfiprintf_r+0x1bc>
 80059fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059fc:	07d9      	lsls	r1, r3, #31
 80059fe:	d405      	bmi.n	8005a0c <_vfiprintf_r+0x220>
 8005a00:	89ab      	ldrh	r3, [r5, #12]
 8005a02:	059a      	lsls	r2, r3, #22
 8005a04:	d402      	bmi.n	8005a0c <_vfiprintf_r+0x220>
 8005a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a08:	f000 faab 	bl	8005f62 <__retarget_lock_release_recursive>
 8005a0c:	89ab      	ldrh	r3, [r5, #12]
 8005a0e:	065b      	lsls	r3, r3, #25
 8005a10:	f53f af12 	bmi.w	8005838 <_vfiprintf_r+0x4c>
 8005a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a16:	e711      	b.n	800583c <_vfiprintf_r+0x50>
 8005a18:	ab03      	add	r3, sp, #12
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <_vfiprintf_r+0x25c>)
 8005a22:	a904      	add	r1, sp, #16
 8005a24:	f7fe f85c 	bl	8003ae0 <_printf_i>
 8005a28:	e7e4      	b.n	80059f4 <_vfiprintf_r+0x208>
 8005a2a:	bf00      	nop
 8005a2c:	08006624 	.word	0x08006624
 8005a30:	08006644 	.word	0x08006644
 8005a34:	08006604 	.word	0x08006604
 8005a38:	080064ac 	.word	0x080064ac
 8005a3c:	080064b2 	.word	0x080064b2
 8005a40:	080064b6 	.word	0x080064b6
 8005a44:	080035a9 	.word	0x080035a9
 8005a48:	080057c9 	.word	0x080057c9

08005a4c <__swbuf_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	460e      	mov	r6, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	4605      	mov	r5, r0
 8005a54:	b118      	cbz	r0, 8005a5e <__swbuf_r+0x12>
 8005a56:	6983      	ldr	r3, [r0, #24]
 8005a58:	b90b      	cbnz	r3, 8005a5e <__swbuf_r+0x12>
 8005a5a:	f000 f9e3 	bl	8005e24 <__sinit>
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <__swbuf_r+0x98>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d12b      	bne.n	8005abc <__swbuf_r+0x70>
 8005a64:	686c      	ldr	r4, [r5, #4]
 8005a66:	69a3      	ldr	r3, [r4, #24]
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	071a      	lsls	r2, r3, #28
 8005a6e:	d52f      	bpl.n	8005ad0 <__swbuf_r+0x84>
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	b36b      	cbz	r3, 8005ad0 <__swbuf_r+0x84>
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	b2f6      	uxtb	r6, r6
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	6963      	ldr	r3, [r4, #20]
 8005a7e:	4637      	mov	r7, r6
 8005a80:	4283      	cmp	r3, r0
 8005a82:	dc04      	bgt.n	8005a8e <__swbuf_r+0x42>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 f938 	bl	8005cfc <_fflush_r>
 8005a8c:	bb30      	cbnz	r0, 8005adc <__swbuf_r+0x90>
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	3001      	adds	r0, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	701e      	strb	r6, [r3, #0]
 8005a9e:	6963      	ldr	r3, [r4, #20]
 8005aa0:	4283      	cmp	r3, r0
 8005aa2:	d004      	beq.n	8005aae <__swbuf_r+0x62>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	07db      	lsls	r3, r3, #31
 8005aa8:	d506      	bpl.n	8005ab8 <__swbuf_r+0x6c>
 8005aaa:	2e0a      	cmp	r6, #10
 8005aac:	d104      	bne.n	8005ab8 <__swbuf_r+0x6c>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 f923 	bl	8005cfc <_fflush_r>
 8005ab6:	b988      	cbnz	r0, 8005adc <__swbuf_r+0x90>
 8005ab8:	4638      	mov	r0, r7
 8005aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <__swbuf_r+0x9c>)
 8005abe:	429c      	cmp	r4, r3
 8005ac0:	d101      	bne.n	8005ac6 <__swbuf_r+0x7a>
 8005ac2:	68ac      	ldr	r4, [r5, #8]
 8005ac4:	e7cf      	b.n	8005a66 <__swbuf_r+0x1a>
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <__swbuf_r+0xa0>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	bf08      	it	eq
 8005acc:	68ec      	ldreq	r4, [r5, #12]
 8005ace:	e7ca      	b.n	8005a66 <__swbuf_r+0x1a>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f81a 	bl	8005b0c <__swsetup_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0cb      	beq.n	8005a74 <__swbuf_r+0x28>
 8005adc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ae0:	e7ea      	b.n	8005ab8 <__swbuf_r+0x6c>
 8005ae2:	bf00      	nop
 8005ae4:	08006624 	.word	0x08006624
 8005ae8:	08006644 	.word	0x08006644
 8005aec:	08006604 	.word	0x08006604

08005af0 <__ascii_wctomb>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	b141      	cbz	r1, 8005b08 <__ascii_wctomb+0x18>
 8005af6:	2aff      	cmp	r2, #255	; 0xff
 8005af8:	d904      	bls.n	8005b04 <__ascii_wctomb+0x14>
 8005afa:	228a      	movs	r2, #138	; 0x8a
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	4770      	bx	lr
 8005b04:	2001      	movs	r0, #1
 8005b06:	700a      	strb	r2, [r1, #0]
 8005b08:	4770      	bx	lr
	...

08005b0c <__swsetup_r>:
 8005b0c:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <__swsetup_r+0xcc>)
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	681d      	ldr	r5, [r3, #0]
 8005b12:	4606      	mov	r6, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	b125      	cbz	r5, 8005b22 <__swsetup_r+0x16>
 8005b18:	69ab      	ldr	r3, [r5, #24]
 8005b1a:	b913      	cbnz	r3, 8005b22 <__swsetup_r+0x16>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f981 	bl	8005e24 <__sinit>
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <__swsetup_r+0xd0>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d10f      	bne.n	8005b48 <__swsetup_r+0x3c>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b30:	0719      	lsls	r1, r3, #28
 8005b32:	d42c      	bmi.n	8005b8e <__swsetup_r+0x82>
 8005b34:	06dd      	lsls	r5, r3, #27
 8005b36:	d411      	bmi.n	8005b5c <__swsetup_r+0x50>
 8005b38:	2309      	movs	r3, #9
 8005b3a:	6033      	str	r3, [r6, #0]
 8005b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	e03e      	b.n	8005bc6 <__swsetup_r+0xba>
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <__swsetup_r+0xd4>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <__swsetup_r+0x46>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7eb      	b.n	8005b2a <__swsetup_r+0x1e>
 8005b52:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <__swsetup_r+0xd8>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7e6      	b.n	8005b2a <__swsetup_r+0x1e>
 8005b5c:	0758      	lsls	r0, r3, #29
 8005b5e:	d512      	bpl.n	8005b86 <__swsetup_r+0x7a>
 8005b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b62:	b141      	cbz	r1, 8005b76 <__swsetup_r+0x6a>
 8005b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d002      	beq.n	8005b72 <__swsetup_r+0x66>
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f7ff fb37 	bl	80051e0 <_free_r>
 8005b72:	2300      	movs	r3, #0
 8005b74:	6363      	str	r3, [r4, #52]	; 0x34
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	b94b      	cbnz	r3, 8005ba6 <__swsetup_r+0x9a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9c:	d003      	beq.n	8005ba6 <__swsetup_r+0x9a>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f000 fa05 	bl	8005fb0 <__smakebuf_r>
 8005ba6:	89a0      	ldrh	r0, [r4, #12]
 8005ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bac:	f010 0301 	ands.w	r3, r0, #1
 8005bb0:	d00a      	beq.n	8005bc8 <__swsetup_r+0xbc>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60a3      	str	r3, [r4, #8]
 8005bb6:	6963      	ldr	r3, [r4, #20]
 8005bb8:	425b      	negs	r3, r3
 8005bba:	61a3      	str	r3, [r4, #24]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	b943      	cbnz	r3, 8005bd2 <__swsetup_r+0xc6>
 8005bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bc4:	d1ba      	bne.n	8005b3c <__swsetup_r+0x30>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	0781      	lsls	r1, r0, #30
 8005bca:	bf58      	it	pl
 8005bcc:	6963      	ldrpl	r3, [r4, #20]
 8005bce:	60a3      	str	r3, [r4, #8]
 8005bd0:	e7f4      	b.n	8005bbc <__swsetup_r+0xb0>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e7f7      	b.n	8005bc6 <__swsetup_r+0xba>
 8005bd6:	bf00      	nop
 8005bd8:	2000000c 	.word	0x2000000c
 8005bdc:	08006624 	.word	0x08006624
 8005be0:	08006644 	.word	0x08006644
 8005be4:	08006604 	.word	0x08006604

08005be8 <abort>:
 8005be8:	2006      	movs	r0, #6
 8005bea:	b508      	push	{r3, lr}
 8005bec:	f000 fa50 	bl	8006090 <raise>
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fb fd38 	bl	8001666 <_exit>
	...

08005bf8 <__sflush_r>:
 8005bf8:	898a      	ldrh	r2, [r1, #12]
 8005bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	0710      	lsls	r0, r2, #28
 8005c00:	460c      	mov	r4, r1
 8005c02:	d457      	bmi.n	8005cb4 <__sflush_r+0xbc>
 8005c04:	684b      	ldr	r3, [r1, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dc04      	bgt.n	8005c14 <__sflush_r+0x1c>
 8005c0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc01      	bgt.n	8005c14 <__sflush_r+0x1c>
 8005c10:	2000      	movs	r0, #0
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	d0fa      	beq.n	8005c10 <__sflush_r+0x18>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c20:	682f      	ldr	r7, [r5, #0]
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	d032      	beq.n	8005c8c <__sflush_r+0x94>
 8005c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	075a      	lsls	r2, r3, #29
 8005c2c:	d505      	bpl.n	8005c3a <__sflush_r+0x42>
 8005c2e:	6863      	ldr	r3, [r4, #4]
 8005c30:	1ac0      	subs	r0, r0, r3
 8005c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c34:	b10b      	cbz	r3, 8005c3a <__sflush_r+0x42>
 8005c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c40:	4628      	mov	r0, r5
 8005c42:	6a21      	ldr	r1, [r4, #32]
 8005c44:	47b0      	blx	r6
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	d106      	bne.n	8005c5a <__sflush_r+0x62>
 8005c4c:	6829      	ldr	r1, [r5, #0]
 8005c4e:	291d      	cmp	r1, #29
 8005c50:	d82c      	bhi.n	8005cac <__sflush_r+0xb4>
 8005c52:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <__sflush_r+0x100>)
 8005c54:	40ca      	lsrs	r2, r1
 8005c56:	07d6      	lsls	r6, r2, #31
 8005c58:	d528      	bpl.n	8005cac <__sflush_r+0xb4>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6062      	str	r2, [r4, #4]
 8005c5e:	6922      	ldr	r2, [r4, #16]
 8005c60:	04d9      	lsls	r1, r3, #19
 8005c62:	6022      	str	r2, [r4, #0]
 8005c64:	d504      	bpl.n	8005c70 <__sflush_r+0x78>
 8005c66:	1c42      	adds	r2, r0, #1
 8005c68:	d101      	bne.n	8005c6e <__sflush_r+0x76>
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	b903      	cbnz	r3, 8005c70 <__sflush_r+0x78>
 8005c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c72:	602f      	str	r7, [r5, #0]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d0cb      	beq.n	8005c10 <__sflush_r+0x18>
 8005c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c7c:	4299      	cmp	r1, r3
 8005c7e:	d002      	beq.n	8005c86 <__sflush_r+0x8e>
 8005c80:	4628      	mov	r0, r5
 8005c82:	f7ff faad 	bl	80051e0 <_free_r>
 8005c86:	2000      	movs	r0, #0
 8005c88:	6360      	str	r0, [r4, #52]	; 0x34
 8005c8a:	e7c2      	b.n	8005c12 <__sflush_r+0x1a>
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b0      	blx	r6
 8005c94:	1c41      	adds	r1, r0, #1
 8005c96:	d1c7      	bne.n	8005c28 <__sflush_r+0x30>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0c4      	beq.n	8005c28 <__sflush_r+0x30>
 8005c9e:	2b1d      	cmp	r3, #29
 8005ca0:	d001      	beq.n	8005ca6 <__sflush_r+0xae>
 8005ca2:	2b16      	cmp	r3, #22
 8005ca4:	d101      	bne.n	8005caa <__sflush_r+0xb2>
 8005ca6:	602f      	str	r7, [r5, #0]
 8005ca8:	e7b2      	b.n	8005c10 <__sflush_r+0x18>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	e7ae      	b.n	8005c12 <__sflush_r+0x1a>
 8005cb4:	690f      	ldr	r7, [r1, #16]
 8005cb6:	2f00      	cmp	r7, #0
 8005cb8:	d0aa      	beq.n	8005c10 <__sflush_r+0x18>
 8005cba:	0793      	lsls	r3, r2, #30
 8005cbc:	bf18      	it	ne
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	680e      	ldr	r6, [r1, #0]
 8005cc2:	bf08      	it	eq
 8005cc4:	694b      	ldreq	r3, [r1, #20]
 8005cc6:	1bf6      	subs	r6, r6, r7
 8005cc8:	600f      	str	r7, [r1, #0]
 8005cca:	608b      	str	r3, [r1, #8]
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	dd9f      	ble.n	8005c10 <__sflush_r+0x18>
 8005cd0:	4633      	mov	r3, r6
 8005cd2:	463a      	mov	r2, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	6a21      	ldr	r1, [r4, #32]
 8005cd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005cdc:	47e0      	blx	ip
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	dc06      	bgt.n	8005cf0 <__sflush_r+0xf8>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	e790      	b.n	8005c12 <__sflush_r+0x1a>
 8005cf0:	4407      	add	r7, r0
 8005cf2:	1a36      	subs	r6, r6, r0
 8005cf4:	e7ea      	b.n	8005ccc <__sflush_r+0xd4>
 8005cf6:	bf00      	nop
 8005cf8:	20400001 	.word	0x20400001

08005cfc <_fflush_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	690b      	ldr	r3, [r1, #16]
 8005d00:	4605      	mov	r5, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b913      	cbnz	r3, 8005d0c <_fflush_r+0x10>
 8005d06:	2500      	movs	r5, #0
 8005d08:	4628      	mov	r0, r5
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	b118      	cbz	r0, 8005d16 <_fflush_r+0x1a>
 8005d0e:	6983      	ldr	r3, [r0, #24]
 8005d10:	b90b      	cbnz	r3, 8005d16 <_fflush_r+0x1a>
 8005d12:	f000 f887 	bl	8005e24 <__sinit>
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <_fflush_r+0x6c>)
 8005d18:	429c      	cmp	r4, r3
 8005d1a:	d11b      	bne.n	8005d54 <_fflush_r+0x58>
 8005d1c:	686c      	ldr	r4, [r5, #4]
 8005d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ef      	beq.n	8005d06 <_fflush_r+0xa>
 8005d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d28:	07d0      	lsls	r0, r2, #31
 8005d2a:	d404      	bmi.n	8005d36 <_fflush_r+0x3a>
 8005d2c:	0599      	lsls	r1, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_fflush_r+0x3a>
 8005d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d32:	f000 f915 	bl	8005f60 <__retarget_lock_acquire_recursive>
 8005d36:	4628      	mov	r0, r5
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f7ff ff5d 	bl	8005bf8 <__sflush_r>
 8005d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d40:	4605      	mov	r5, r0
 8005d42:	07da      	lsls	r2, r3, #31
 8005d44:	d4e0      	bmi.n	8005d08 <_fflush_r+0xc>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	059b      	lsls	r3, r3, #22
 8005d4a:	d4dd      	bmi.n	8005d08 <_fflush_r+0xc>
 8005d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4e:	f000 f908 	bl	8005f62 <__retarget_lock_release_recursive>
 8005d52:	e7d9      	b.n	8005d08 <_fflush_r+0xc>
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <_fflush_r+0x70>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d101      	bne.n	8005d5e <_fflush_r+0x62>
 8005d5a:	68ac      	ldr	r4, [r5, #8]
 8005d5c:	e7df      	b.n	8005d1e <_fflush_r+0x22>
 8005d5e:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <_fflush_r+0x74>)
 8005d60:	429c      	cmp	r4, r3
 8005d62:	bf08      	it	eq
 8005d64:	68ec      	ldreq	r4, [r5, #12]
 8005d66:	e7da      	b.n	8005d1e <_fflush_r+0x22>
 8005d68:	08006624 	.word	0x08006624
 8005d6c:	08006644 	.word	0x08006644
 8005d70:	08006604 	.word	0x08006604

08005d74 <std>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	; 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6183      	str	r3, [r0, #24]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	2208      	movs	r2, #8
 8005d90:	305c      	adds	r0, #92	; 0x5c
 8005d92:	f7fd fb63 	bl	800345c <memset>
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <std+0x38>)
 8005d98:	6224      	str	r4, [r4, #32]
 8005d9a:	6263      	str	r3, [r4, #36]	; 0x24
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <std+0x3c>)
 8005d9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <std+0x40>)
 8005da2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <std+0x44>)
 8005da6:	6323      	str	r3, [r4, #48]	; 0x30
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	080060c9 	.word	0x080060c9
 8005db0:	080060eb 	.word	0x080060eb
 8005db4:	08006123 	.word	0x08006123
 8005db8:	08006147 	.word	0x08006147

08005dbc <_cleanup_r>:
 8005dbc:	4901      	ldr	r1, [pc, #4]	; (8005dc4 <_cleanup_r+0x8>)
 8005dbe:	f000 b8af 	b.w	8005f20 <_fwalk_reent>
 8005dc2:	bf00      	nop
 8005dc4:	08005cfd 	.word	0x08005cfd

08005dc8 <__sfmoreglue>:
 8005dc8:	2268      	movs	r2, #104	; 0x68
 8005dca:	b570      	push	{r4, r5, r6, lr}
 8005dcc:	1e4d      	subs	r5, r1, #1
 8005dce:	4355      	muls	r5, r2
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dd6:	f7ff fa6b 	bl	80052b0 <_malloc_r>
 8005dda:	4604      	mov	r4, r0
 8005ddc:	b140      	cbz	r0, 8005df0 <__sfmoreglue+0x28>
 8005dde:	2100      	movs	r1, #0
 8005de0:	e9c0 1600 	strd	r1, r6, [r0]
 8005de4:	300c      	adds	r0, #12
 8005de6:	60a0      	str	r0, [r4, #8]
 8005de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dec:	f7fd fb36 	bl	800345c <memset>
 8005df0:	4620      	mov	r0, r4
 8005df2:	bd70      	pop	{r4, r5, r6, pc}

08005df4 <__sfp_lock_acquire>:
 8005df4:	4801      	ldr	r0, [pc, #4]	; (8005dfc <__sfp_lock_acquire+0x8>)
 8005df6:	f000 b8b3 	b.w	8005f60 <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	2000038d 	.word	0x2000038d

08005e00 <__sfp_lock_release>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__sfp_lock_release+0x8>)
 8005e02:	f000 b8ae 	b.w	8005f62 <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	2000038d 	.word	0x2000038d

08005e0c <__sinit_lock_acquire>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__sinit_lock_acquire+0x8>)
 8005e0e:	f000 b8a7 	b.w	8005f60 <__retarget_lock_acquire_recursive>
 8005e12:	bf00      	nop
 8005e14:	2000038e 	.word	0x2000038e

08005e18 <__sinit_lock_release>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__sinit_lock_release+0x8>)
 8005e1a:	f000 b8a2 	b.w	8005f62 <__retarget_lock_release_recursive>
 8005e1e:	bf00      	nop
 8005e20:	2000038e 	.word	0x2000038e

08005e24 <__sinit>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	4604      	mov	r4, r0
 8005e28:	f7ff fff0 	bl	8005e0c <__sinit_lock_acquire>
 8005e2c:	69a3      	ldr	r3, [r4, #24]
 8005e2e:	b11b      	cbz	r3, 8005e38 <__sinit+0x14>
 8005e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e34:	f7ff bff0 	b.w	8005e18 <__sinit_lock_release>
 8005e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <__sinit+0x68>)
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <__sinit+0x6c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	bf08      	it	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	bf08      	it	eq
 8005e50:	61a3      	streq	r3, [r4, #24]
 8005e52:	f000 f81f 	bl	8005e94 <__sfp>
 8005e56:	6060      	str	r0, [r4, #4]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f81b 	bl	8005e94 <__sfp>
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 f817 	bl	8005e94 <__sfp>
 8005e66:	2200      	movs	r2, #0
 8005e68:	2104      	movs	r1, #4
 8005e6a:	60e0      	str	r0, [r4, #12]
 8005e6c:	6860      	ldr	r0, [r4, #4]
 8005e6e:	f7ff ff81 	bl	8005d74 <std>
 8005e72:	2201      	movs	r2, #1
 8005e74:	2109      	movs	r1, #9
 8005e76:	68a0      	ldr	r0, [r4, #8]
 8005e78:	f7ff ff7c 	bl	8005d74 <std>
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	2112      	movs	r1, #18
 8005e80:	68e0      	ldr	r0, [r4, #12]
 8005e82:	f7ff ff77 	bl	8005d74 <std>
 8005e86:	2301      	movs	r3, #1
 8005e88:	61a3      	str	r3, [r4, #24]
 8005e8a:	e7d1      	b.n	8005e30 <__sinit+0xc>
 8005e8c:	0800628c 	.word	0x0800628c
 8005e90:	08005dbd 	.word	0x08005dbd

08005e94 <__sfp>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	4607      	mov	r7, r0
 8005e98:	f7ff ffac 	bl	8005df4 <__sfp_lock_acquire>
 8005e9c:	4b1e      	ldr	r3, [pc, #120]	; (8005f18 <__sfp+0x84>)
 8005e9e:	681e      	ldr	r6, [r3, #0]
 8005ea0:	69b3      	ldr	r3, [r6, #24]
 8005ea2:	b913      	cbnz	r3, 8005eaa <__sfp+0x16>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff ffbd 	bl	8005e24 <__sinit>
 8005eaa:	3648      	adds	r6, #72	; 0x48
 8005eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	d503      	bpl.n	8005ebc <__sfp+0x28>
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	b30b      	cbz	r3, 8005efc <__sfp+0x68>
 8005eb8:	6836      	ldr	r6, [r6, #0]
 8005eba:	e7f7      	b.n	8005eac <__sfp+0x18>
 8005ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ec0:	b9d5      	cbnz	r5, 8005ef8 <__sfp+0x64>
 8005ec2:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <__sfp+0x88>)
 8005ec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ec8:	60e3      	str	r3, [r4, #12]
 8005eca:	6665      	str	r5, [r4, #100]	; 0x64
 8005ecc:	f000 f847 	bl	8005f5e <__retarget_lock_init_recursive>
 8005ed0:	f7ff ff96 	bl	8005e00 <__sfp_lock_release>
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	61a5      	str	r5, [r4, #24]
 8005ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ee8:	f7fd fab8 	bl	800345c <memset>
 8005eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef8:	3468      	adds	r4, #104	; 0x68
 8005efa:	e7d9      	b.n	8005eb0 <__sfp+0x1c>
 8005efc:	2104      	movs	r1, #4
 8005efe:	4638      	mov	r0, r7
 8005f00:	f7ff ff62 	bl	8005dc8 <__sfmoreglue>
 8005f04:	4604      	mov	r4, r0
 8005f06:	6030      	str	r0, [r6, #0]
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d1d5      	bne.n	8005eb8 <__sfp+0x24>
 8005f0c:	f7ff ff78 	bl	8005e00 <__sfp_lock_release>
 8005f10:	230c      	movs	r3, #12
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	e7ee      	b.n	8005ef4 <__sfp+0x60>
 8005f16:	bf00      	nop
 8005f18:	0800628c 	.word	0x0800628c
 8005f1c:	ffff0001 	.word	0xffff0001

08005f20 <_fwalk_reent>:
 8005f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f24:	4606      	mov	r6, r0
 8005f26:	4688      	mov	r8, r1
 8005f28:	2700      	movs	r7, #0
 8005f2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f32:	f1b9 0901 	subs.w	r9, r9, #1
 8005f36:	d505      	bpl.n	8005f44 <_fwalk_reent+0x24>
 8005f38:	6824      	ldr	r4, [r4, #0]
 8005f3a:	2c00      	cmp	r4, #0
 8005f3c:	d1f7      	bne.n	8005f2e <_fwalk_reent+0xe>
 8005f3e:	4638      	mov	r0, r7
 8005f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f44:	89ab      	ldrh	r3, [r5, #12]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d907      	bls.n	8005f5a <_fwalk_reent+0x3a>
 8005f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	d003      	beq.n	8005f5a <_fwalk_reent+0x3a>
 8005f52:	4629      	mov	r1, r5
 8005f54:	4630      	mov	r0, r6
 8005f56:	47c0      	blx	r8
 8005f58:	4307      	orrs	r7, r0
 8005f5a:	3568      	adds	r5, #104	; 0x68
 8005f5c:	e7e9      	b.n	8005f32 <_fwalk_reent+0x12>

08005f5e <__retarget_lock_init_recursive>:
 8005f5e:	4770      	bx	lr

08005f60 <__retarget_lock_acquire_recursive>:
 8005f60:	4770      	bx	lr

08005f62 <__retarget_lock_release_recursive>:
 8005f62:	4770      	bx	lr

08005f64 <__swhatbuf_r>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	460e      	mov	r6, r1
 8005f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	461d      	mov	r5, r3
 8005f72:	b096      	sub	sp, #88	; 0x58
 8005f74:	da08      	bge.n	8005f88 <__swhatbuf_r+0x24>
 8005f76:	2200      	movs	r2, #0
 8005f78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	061a      	lsls	r2, r3, #24
 8005f80:	d410      	bmi.n	8005fa4 <__swhatbuf_r+0x40>
 8005f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f86:	e00e      	b.n	8005fa6 <__swhatbuf_r+0x42>
 8005f88:	466a      	mov	r2, sp
 8005f8a:	f000 f903 	bl	8006194 <_fstat_r>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	dbf1      	blt.n	8005f76 <__swhatbuf_r+0x12>
 8005f92:	9a01      	ldr	r2, [sp, #4]
 8005f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f9c:	425a      	negs	r2, r3
 8005f9e:	415a      	adcs	r2, r3
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	e7ee      	b.n	8005f82 <__swhatbuf_r+0x1e>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	b016      	add	sp, #88	; 0x58
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fb0 <__smakebuf_r>:
 8005fb0:	898b      	ldrh	r3, [r1, #12]
 8005fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fb4:	079d      	lsls	r5, r3, #30
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	d507      	bpl.n	8005fcc <__smakebuf_r+0x1c>
 8005fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	6163      	str	r3, [r4, #20]
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	466a      	mov	r2, sp
 8005fce:	ab01      	add	r3, sp, #4
 8005fd0:	f7ff ffc8 	bl	8005f64 <__swhatbuf_r>
 8005fd4:	9900      	ldr	r1, [sp, #0]
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f7ff f969 	bl	80052b0 <_malloc_r>
 8005fde:	b948      	cbnz	r0, 8005ff4 <__smakebuf_r+0x44>
 8005fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe4:	059a      	lsls	r2, r3, #22
 8005fe6:	d4ef      	bmi.n	8005fc8 <__smakebuf_r+0x18>
 8005fe8:	f023 0303 	bic.w	r3, r3, #3
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	e7e3      	b.n	8005fbc <__smakebuf_r+0xc>
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	; (800602c <__smakebuf_r+0x7c>)
 8005ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	6020      	str	r0, [r4, #0]
 8005ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	9b00      	ldr	r3, [sp, #0]
 8006004:	6120      	str	r0, [r4, #16]
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	9b01      	ldr	r3, [sp, #4]
 800600a:	b15b      	cbz	r3, 8006024 <__smakebuf_r+0x74>
 800600c:	4630      	mov	r0, r6
 800600e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006012:	f000 f8d1 	bl	80061b8 <_isatty_r>
 8006016:	b128      	cbz	r0, 8006024 <__smakebuf_r+0x74>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	81a3      	strh	r3, [r4, #12]
 8006024:	89a0      	ldrh	r0, [r4, #12]
 8006026:	4305      	orrs	r5, r0
 8006028:	81a5      	strh	r5, [r4, #12]
 800602a:	e7cd      	b.n	8005fc8 <__smakebuf_r+0x18>
 800602c:	08005dbd 	.word	0x08005dbd

08006030 <_malloc_usable_size_r>:
 8006030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006034:	1f18      	subs	r0, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfbc      	itt	lt
 800603a:	580b      	ldrlt	r3, [r1, r0]
 800603c:	18c0      	addlt	r0, r0, r3
 800603e:	4770      	bx	lr

08006040 <_raise_r>:
 8006040:	291f      	cmp	r1, #31
 8006042:	b538      	push	{r3, r4, r5, lr}
 8006044:	4604      	mov	r4, r0
 8006046:	460d      	mov	r5, r1
 8006048:	d904      	bls.n	8006054 <_raise_r+0x14>
 800604a:	2316      	movs	r3, #22
 800604c:	6003      	str	r3, [r0, #0]
 800604e:	f04f 30ff 	mov.w	r0, #4294967295
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006056:	b112      	cbz	r2, 800605e <_raise_r+0x1e>
 8006058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800605c:	b94b      	cbnz	r3, 8006072 <_raise_r+0x32>
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f830 	bl	80060c4 <_getpid_r>
 8006064:	462a      	mov	r2, r5
 8006066:	4601      	mov	r1, r0
 8006068:	4620      	mov	r0, r4
 800606a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606e:	f000 b817 	b.w	80060a0 <_kill_r>
 8006072:	2b01      	cmp	r3, #1
 8006074:	d00a      	beq.n	800608c <_raise_r+0x4c>
 8006076:	1c59      	adds	r1, r3, #1
 8006078:	d103      	bne.n	8006082 <_raise_r+0x42>
 800607a:	2316      	movs	r3, #22
 800607c:	6003      	str	r3, [r0, #0]
 800607e:	2001      	movs	r0, #1
 8006080:	e7e7      	b.n	8006052 <_raise_r+0x12>
 8006082:	2400      	movs	r4, #0
 8006084:	4628      	mov	r0, r5
 8006086:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800608a:	4798      	blx	r3
 800608c:	2000      	movs	r0, #0
 800608e:	e7e0      	b.n	8006052 <_raise_r+0x12>

08006090 <raise>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <raise+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f7ff bfd3 	b.w	8006040 <_raise_r>
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <_kill_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	2300      	movs	r3, #0
 80060a4:	4d06      	ldr	r5, [pc, #24]	; (80060c0 <_kill_r+0x20>)
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	602b      	str	r3, [r5, #0]
 80060ae:	f7fb faca 	bl	8001646 <_kill>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d102      	bne.n	80060bc <_kill_r+0x1c>
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	b103      	cbz	r3, 80060bc <_kill_r+0x1c>
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	20000388 	.word	0x20000388

080060c4 <_getpid_r>:
 80060c4:	f7fb bab8 	b.w	8001638 <_getpid>

080060c8 <__sread>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	460c      	mov	r4, r1
 80060cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d0:	f000 f894 	bl	80061fc <_read_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	bfab      	itete	ge
 80060d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060da:	89a3      	ldrhlt	r3, [r4, #12]
 80060dc:	181b      	addge	r3, r3, r0
 80060de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060e2:	bfac      	ite	ge
 80060e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060e6:	81a3      	strhlt	r3, [r4, #12]
 80060e8:	bd10      	pop	{r4, pc}

080060ea <__swrite>:
 80060ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	461f      	mov	r7, r3
 80060f0:	898b      	ldrh	r3, [r1, #12]
 80060f2:	4605      	mov	r5, r0
 80060f4:	05db      	lsls	r3, r3, #23
 80060f6:	460c      	mov	r4, r1
 80060f8:	4616      	mov	r6, r2
 80060fa:	d505      	bpl.n	8006108 <__swrite+0x1e>
 80060fc:	2302      	movs	r3, #2
 80060fe:	2200      	movs	r2, #0
 8006100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006104:	f000 f868 	bl	80061d8 <_lseek_r>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	4632      	mov	r2, r6
 800610c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	4628      	mov	r0, r5
 8006114:	463b      	mov	r3, r7
 8006116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800611e:	f000 b817 	b.w	8006150 <_write_r>

08006122 <__sseek>:
 8006122:	b510      	push	{r4, lr}
 8006124:	460c      	mov	r4, r1
 8006126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612a:	f000 f855 	bl	80061d8 <_lseek_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	bf15      	itete	ne
 8006134:	6560      	strne	r0, [r4, #84]	; 0x54
 8006136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800613a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800613e:	81a3      	strheq	r3, [r4, #12]
 8006140:	bf18      	it	ne
 8006142:	81a3      	strhne	r3, [r4, #12]
 8006144:	bd10      	pop	{r4, pc}

08006146 <__sclose>:
 8006146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614a:	f000 b813 	b.w	8006174 <_close_r>
	...

08006150 <_write_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	2200      	movs	r2, #0
 800615a:	4d05      	ldr	r5, [pc, #20]	; (8006170 <_write_r+0x20>)
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fb faa8 	bl	80016b4 <_write>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_write_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_write_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000388 	.word	0x20000388

08006174 <_close_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	2300      	movs	r3, #0
 8006178:	4d05      	ldr	r5, [pc, #20]	; (8006190 <_close_r+0x1c>)
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fb fab4 	bl	80016ec <_close>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_close_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_close_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000388 	.word	0x20000388

08006194 <_fstat_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	2300      	movs	r3, #0
 8006198:	4d06      	ldr	r5, [pc, #24]	; (80061b4 <_fstat_r+0x20>)
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f7fb faae 	bl	8001702 <_fstat>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d102      	bne.n	80061b0 <_fstat_r+0x1c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b103      	cbz	r3, 80061b0 <_fstat_r+0x1c>
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	20000388 	.word	0x20000388

080061b8 <_isatty_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	2300      	movs	r3, #0
 80061bc:	4d05      	ldr	r5, [pc, #20]	; (80061d4 <_isatty_r+0x1c>)
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7fb faac 	bl	8001720 <_isatty>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_isatty_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_isatty_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000388 	.word	0x20000388

080061d8 <_lseek_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4604      	mov	r4, r0
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	2200      	movs	r2, #0
 80061e2:	4d05      	ldr	r5, [pc, #20]	; (80061f8 <_lseek_r+0x20>)
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb faa4 	bl	8001734 <_lseek>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_lseek_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_lseek_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000388 	.word	0x20000388

080061fc <_read_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	2200      	movs	r2, #0
 8006206:	4d05      	ldr	r5, [pc, #20]	; (800621c <_read_r+0x20>)
 8006208:	602a      	str	r2, [r5, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	f7fb fa35 	bl	800167a <_read>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_read_r+0x1e>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_read_r+0x1e>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20000388 	.word	0x20000388

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr
