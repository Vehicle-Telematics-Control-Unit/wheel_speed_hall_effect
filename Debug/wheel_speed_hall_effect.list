
wheel_speed_hall_effect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007ac0  08007ac0  00017ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007edc  08007edc  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08007edc  08007edc  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007edc  08007edc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08007ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000210  080080f4  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080080f4  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e843  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002632  00000000  00000000  0002ea7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00032120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001929c  00000000  00000000  000330b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffca  00000000  00000000  0004c34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d60  00000000  00000000  0005c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  000ed0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	08007aa8 	.word	0x08007aa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	08007aa8 	.word	0x08007aa8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <HAL_TIM_PeriodElapsedCallback>:
static uint64_t no_magnatic_hits = 0;
static float start_time = 0;
static float speed = 0.0;
// this function to unlock the lock after 0.2second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) // if time 0.3 make interrupt
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1e>
  {

    HAL_TIM_Base_Stop_IT(&htim3);
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e44:	f003 f98e 	bl	8004164 <HAL_TIM_Base_Stop_IT>
    lock = 0;
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
  }
  if (htim->Instance == TIM2) // if time 1.1 make interrupt print the speed between two magnetics
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e56:	d130      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x8a>
  {
    if (no_magnatic_hits == 0)
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	d10f      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x52>
    {

      sprintf(str, "%.2f", NOTMOVING);
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fade 	bl	8000428 <__aeabi_f2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4919      	ldr	r1, [pc, #100]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e74:	f004 fba0 	bl	80055b8 <siprintf>
      str[sizeof(str) - 1] = '\0';
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000e80:	e00e      	b.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x70>
    }
    else
    {
      sprintf(str, "%.2f", speed);
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff face 	bl	8000428 <__aeabi_f2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4911      	ldr	r1, [pc, #68]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e94:	f004 fb90 	bl	80055b8 <siprintf>
      str[sizeof(str) - 1] = '\0';
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    }
    HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	2232      	movs	r2, #50	; 0x32
 8000ea4:	490d      	ldr	r1, [pc, #52]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ea8:	f003 fd89 	bl	80049be <HAL_UART_Transmit>
    no_magnatic_hits = 0;
 8000eac:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40000400 	.word	0x40000400
 8000ec8:	200002cc 	.word	0x200002cc
 8000ecc:	20000398 	.word	0x20000398
 8000ed0:	200003a0 	.word	0x200003a0
 8000ed4:	20000390 	.word	0x20000390
 8000ed8:	08007ac0 	.word	0x08007ac0
 8000edc:	2000035c 	.word	0x2000035c
 8000ee0:	200003ac 	.word	0x200003ac
 8000ee4:	20000314 	.word	0x20000314

08000ee8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  // lock is used to prevent bouncing in situations where two falling edges occur in close time
  // so if two edges comes in close time after the first one lock will be one for 0.3 second->(3000*2700)/(72*10^6)

  if (GPIO_Pin == GPIO_PIN_1)
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d159      	bne.n	8000fac <HAL_GPIO_EXTI_Callback+0xc4>
  {
    if (lock == 0)
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d155      	bne.n	8000fac <HAL_GPIO_EXTI_Callback+0xc4>
    {
      HAL_TIM_Base_Start_IT(&htim3);
 8000f00:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f02:	f003 f8dd 	bl	80040c0 <HAL_TIM_Base_Start_IT>
      lock = 1;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
      elapsed_time = (HAL_GetTick() - start_time) / 1000.0; // calculate time between magnetics
 8000f0c:	f001 fc12 	bl	8002734 <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff febe 	bl	8000c94 <__aeabi_ui2f>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f7ff fe05 	bl	8000b30 <__aeabi_fsub>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa7d 	bl	8000428 <__aeabi_f2d>
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f34:	f7ff fbfa 	bl	800072c <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fda2 	bl	8000a88 <__aeabi_d2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f48:	6013      	str	r3, [r2, #0]
      start_time = HAL_GetTick();                           // to save the last time
 8000f4a:	f001 fbf3 	bl	8002734 <HAL_GetTick>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe9f 	bl	8000c94 <__aeabi_ui2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f5a:	6013      	str	r3, [r2, #0]
      if (elapsed_time != 0)                                // this to prevent print inf in first time
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f04f 0100 	mov.w	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__aeabi_fcmpeq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d114      	bne.n	8000f9a <HAL_GPIO_EXTI_Callback+0xb2>
        speed = HALF_OF_CIRCLE / (elapsed_time);
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa57 	bl	8000428 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	a10e      	add	r1, pc, #56	; (adr r1, 8000fb8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f84:	f7ff fbd2 	bl	800072c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fd7a 	bl	8000a88 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000f98:	6013      	str	r3, [r2, #0]
      no_magnatic_hits++;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	1c54      	adds	r4, r2, #1
 8000fa2:	f143 0500 	adc.w	r5, r3, #0
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000fa8:	e9c3 4500 	strd	r4, r5, [r3]
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	3d70a3d7 	.word	0x3d70a3d7
 8000fbc:	4032d70a 	.word	0x4032d70a
 8000fc0:	20000398 	.word	0x20000398
 8000fc4:	200002cc 	.word	0x200002cc
 8000fc8:	200003a8 	.word	0x200003a8
 8000fcc:	408f4000 	.word	0x408f4000
 8000fd0:	20000394 	.word	0x20000394
 8000fd4:	200003ac 	.word	0x200003ac
 8000fd8:	200003a0 	.word	0x200003a0

08000fdc <main>:

int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe2:	f001 fb4f 	bl	8002684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f84f 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fea:	f000 f999 	bl	8001320 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 f96d 	bl	80012cc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000ff2:	f000 f88f 	bl	8001114 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ff6:	f000 f911 	bl	800121c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ffa:	f000 f8c1 	bl	8001180 <MX_TIM2_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 8000ffe:	481b      	ldr	r0, [pc, #108]	; (800106c <main+0x90>)
 8001000:	f003 f85e 	bl	80040c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  uint8_t mac[] = {0x52, 0xab, 0x3c, 0x9f, 0xd8, 0x07}; // Mac address
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <main+0x94>)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100e:	6018      	str	r0, [r3, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	8019      	strh	r1, [r3, #0]
  uint8_t ip[] = {192, 168, 1, 170};                    // IP address
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <main+0x98>)
 8001016:	60fb      	str	r3, [r7, #12]
  uint8_t sn[] = {255, 255, 255, 0};                    // Subnet mask
 8001018:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800101c:	60bb      	str	r3, [r7, #8]
  uint8_t gw[] = {192, 168, 1, 1};                      // Gateway address
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <main+0x9c>)
 8001020:	607b      	str	r3, [r7, #4]

  initializeW5500(mac, ip, sn, gw); // configures the MAC address, IP address, subnet mask and gateway of the device or node.
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	f107 0208 	add.w	r2, r7, #8
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	f107 0010 	add.w	r0, r7, #16
 8001030:	f001 f8e6 	bl	8002200 <initializeW5500>

  while (socket(socNum, Sn_MR_UDP, 6000, 0) != socNum)
 8001034:	bf00      	nop
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <main+0xa0>)
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	f241 7270 	movw	r2, #6000	; 0x1770
 8001040:	2102      	movs	r1, #2
 8001042:	f000 f9d5 	bl	80013f0 <socket>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <main+0xa0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d1f1      	bne.n	8001036 <main+0x5a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Socket_sendUDP(socNum, str, dstip, 5001); // sends message to a destination ip address and port
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <main+0xa0>)
 8001054:	7818      	ldrb	r0, [r3, #0]
 8001056:	f241 3389 	movw	r3, #5001	; 0x1389
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <main+0xa4>)
 800105c:	4909      	ldr	r1, [pc, #36]	; (8001084 <main+0xa8>)
 800105e:	f001 f91d 	bl	800229c <Socket_sendUDP>
    HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	f001 fb6f 	bl	8002748 <HAL_Delay>
    Socket_sendUDP(socNum, str, dstip, 5001); // sends message to a destination ip address and port
 800106a:	e7f2      	b.n	8001052 <main+0x76>
 800106c:	20000284 	.word	0x20000284
 8001070:	08007ac8 	.word	0x08007ac8
 8001074:	aa01a8c0 	.word	0xaa01a8c0
 8001078:	0101a8c0 	.word	0x0101a8c0
 800107c:	20000358 	.word	0x20000358
 8001080:	20000000 	.word	0x20000000
 8001084:	2000035c 	.word	0x2000035c

08001088 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	; 0x40
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2228      	movs	r2, #40	; 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fe26 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fe1f 	bl	8002d14 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010dc:	f000 f982 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010e0:	230f      	movs	r3, #15
 80010e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 f88c 	bl	8003218 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001106:	f000 f96d 	bl	80013e4 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3740      	adds	r7, #64	; 0x40
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_SPI1_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_SPI1_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_SPI1_Init+0x64>)
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_SPI1_Init+0x64>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_SPI1_Init+0x64>)
 8001148:	2210      	movs	r2, #16
 800114a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_SPI1_Init+0x64>)
 8001160:	220a      	movs	r2, #10
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_SPI1_Init+0x64>)
 8001166:	f002 f9ef 	bl	8003548 <HAL_SPI_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 f938 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000022c 	.word	0x2000022c
 800117c:	40013000 	.word	0x40013000

08001180 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_TIM2_Init+0x98>)
 800119e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM2_Init+0x98>)
 80011a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11000;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM2_Init+0x98>)
 80011b4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_TIM2_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM2_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_TIM2_Init+0x98>)
 80011c8:	f002 ff2a 	bl	8004020 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011d2:	f000 f907 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM2_Init+0x98>)
 80011e4:	f003 f94d 	bl	8004482 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ee:	f000 f8f9 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM2_Init+0x98>)
 8001200:	f003 fb20 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 f8eb 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000284 	.word	0x20000284

0800121c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_TIM3_Init+0xa8>)
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <MX_TIM3_Init+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200 - 1;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_TIM3_Init+0xa8>)
 8001240:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_TIM3_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_TIM3_Init+0xa8>)
 800124e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001252:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM3_Init+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_TIM3_Init+0xa8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <MX_TIM3_Init+0xa8>)
 8001262:	f002 fedd 	bl	8004020 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800126c:	f000 f8ba 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_TIM3_Init+0xa8>)
 800127e:	f003 f900 	bl	8004482 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001288:	f000 f8ac 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800128c:	2108      	movs	r1, #8
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_TIM3_Init+0xa8>)
 8001290:	f002 ff96 	bl	80041c0 <HAL_TIM_OnePulse_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800129a:	f000 f8a3 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_TIM3_Init+0xa8>)
 80012ac:	f003 faca 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012b6:	f000 f895 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002cc 	.word	0x200002cc
 80012c8:	40000400 	.word	0x40000400

080012cc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART1_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART1_UART_Init+0x4c>)
 8001304:	f003 fb0e 	bl	8004924 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f869 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000314 	.word	0x20000314
 800131c:	40013800 	.word	0x40013800

08001320 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <MX_GPIO_Init+0xb8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <MX_GPIO_Init+0xb8>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_GPIO_Init+0xb8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_GPIO_Init+0xb8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <MX_GPIO_Init+0xb8>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_GPIO_Init+0xb8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COUNT_LED_Pin | TEST_LED_Pin | GPIO_PIN_4, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	211c      	movs	r1, #28
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <MX_GPIO_Init+0xbc>)
 800136a:	f001 fca3 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800136e:	2302      	movs	r3, #2
 8001370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_GPIO_Init+0xc0>)
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4619      	mov	r1, r3
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <MX_GPIO_Init+0xbc>)
 8001382:	f001 fb13 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : COUNT_LED_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = COUNT_LED_Pin | TEST_LED_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	; (80013dc <MX_GPIO_Init+0xbc>)
 800139e:	f001 fb05 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a2:	2310      	movs	r3, #16
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_GPIO_Init+0xbc>)
 80013ba:	f001 faf7 	bl	80029ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2007      	movs	r0, #7
 80013c4:	f001 fabb 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013c8:	2007      	movs	r0, #7
 80013ca:	f001 fad4 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	10210000 	.word	0x10210000

080013e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	4603      	mov	r3, r0
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	460b      	mov	r3, r1
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d902      	bls.n	800141a <socket+0x2a>
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e0f2      	b.n	8001600 <socket+0x210>
	switch(protocol)
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <socket+0x3c>
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd11      	ble.n	8001448 <socket+0x58>
 8001424:	3b02      	subs	r3, #2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d80e      	bhi.n	8001448 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800142a:	e011      	b.n	8001450 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001438:	f000 fd3e 	bl	8001eb8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <socket+0x5e>
 8001442:	f06f 0302 	mvn.w	r3, #2
 8001446:	e0db      	b.n	8001600 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001448:	f06f 0304 	mvn.w	r3, #4
 800144c:	e0d8      	b.n	8001600 <socket+0x210>
	    break;
 800144e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <socket+0x70>
 800145a:	f06f 0305 	mvn.w	r3, #5
 800145e:	e0cf      	b.n	8001600 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d025      	beq.n	80014b2 <socket+0xc2>
	{
   	switch(protocol)
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d002      	beq.n	8001472 <socket+0x82>
 800146c:	2b02      	cmp	r3, #2
 800146e:	d008      	beq.n	8001482 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001470:	e024      	b.n	80014bc <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001478:	2b00      	cmp	r3, #0
 800147a:	d11c      	bne.n	80014b6 <socket+0xc6>
 800147c:	f06f 0305 	mvn.w	r3, #5
 8001480:	e0be      	b.n	8001600 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800148c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db02      	blt.n	800149a <socket+0xaa>
 8001494:	f06f 0305 	mvn.w	r3, #5
 8001498:	e0b2      	b.n	8001600 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80014a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db06      	blt.n	80014ba <socket+0xca>
 80014ac:	f06f 0305 	mvn.w	r3, #5
 80014b0:	e0a6      	b.n	8001600 <socket+0x210>
   	}
   }
 80014b2:	bf00      	nop
 80014b4:	e002      	b.n	80014bc <socket+0xcc>
   	      break;
 80014b6:	bf00      	nop
 80014b8:	e000      	b.n	80014bc <socket+0xcc>
   	      break;
 80014ba:	bf00      	nop
	close(sn);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f8ac 	bl	800161c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	3301      	adds	r3, #1
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d2:	f023 030f 	bic.w	r3, r3, #15
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014dc:	4313      	orrs	r3, r2
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	f000 fc9a 	bl	8001e1c <WIZCHIP_WRITE>
    #endif
	if(!port)
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d110      	bne.n	8001510 <socket+0x120>
	{
	   port = sock_any_port++;
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <socket+0x218>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	b291      	uxth	r1, r2
 80014f6:	4a44      	ldr	r2, [pc, #272]	; (8001608 <socket+0x218>)
 80014f8:	8011      	strh	r1, [r2, #0]
 80014fa:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <socket+0x218>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001504:	4293      	cmp	r3, r2
 8001506:	d103      	bne.n	8001510 <socket+0x120>
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <socket+0x218>)
 800150a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800150e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	3301      	adds	r3, #1
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800151c:	461a      	mov	r2, r3
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f000 fc77 	bl	8001e1c <WIZCHIP_WRITE>
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3301      	adds	r3, #1
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153a:	461a      	mov	r2, r3
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f000 fc6a 	bl	8001e1c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3301      	adds	r3, #1
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fc60 	bl	8001e1c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800155c:	bf00      	nop
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3301      	adds	r3, #1
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fc0a 	bl	8001d84 <WIZCHIP_READ>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f3      	bne.n	800155e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2201      	movs	r2, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	b21b      	sxth	r3, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <socket+0x21c>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4013      	ands	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <socket+0x21c>)
 8001592:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <socket+0x21c>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <socket+0x21c>)
 80015b0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <socket+0x220>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <socket+0x220>)
 80015ce:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <socket+0x224>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <socket+0x228>)
 80015de:	2100      	movs	r1, #0
 80015e0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80015e2:	bf00      	nop
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	3301      	adds	r3, #1
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fbc7 	bl	8001d84 <WIZCHIP_READ>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f3      	beq.n	80015e4 <socket+0x1f4>
   return (int8_t)sn;
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	20000004 	.word	0x20000004
 800160c:	200003b0 	.word	0x200003b0
 8001610:	200003b2 	.word	0x200003b2
 8001614:	200003b4 	.word	0x200003b4
 8001618:	200003c4 	.word	0x200003c4

0800161c <close>:

int8_t close(uint8_t sn)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d902      	bls.n	8001632 <close+0x16>
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	e055      	b.n	80016de <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3301      	adds	r3, #1
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800163e:	2110      	movs	r1, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fbeb 	bl	8001e1c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001646:	bf00      	nop
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	3301      	adds	r3, #1
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fb95 	bl	8001d84 <WIZCHIP_READ>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	3301      	adds	r3, #1
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800166c:	211f      	movs	r1, #31
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fbd4 	bl	8001e1c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2201      	movs	r2, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <close+0xcc>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b21b      	sxth	r3, r3
 8001688:	4013      	ands	r3, r2
 800168a:	b21b      	sxth	r3, r3
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <close+0xcc>)
 8001690:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2201      	movs	r2, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	b21b      	sxth	r3, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <close+0xd0>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4013      	ands	r3, r2
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <close+0xd0>)
 80016ae:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <close+0xd4>)
 80016b4:	2100      	movs	r1, #0
 80016b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <close+0xd8>)
 80016be:	2100      	movs	r1, #0
 80016c0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80016c2:	bf00      	nop
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3301      	adds	r3, #1
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fb57 	bl	8001d84 <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f3      	bne.n	80016c4 <close+0xa8>
	return SOCK_OK;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003b0 	.word	0x200003b0
 80016ec:	200003b2 	.word	0x200003b2
 80016f0:	200003b4 	.word	0x200003b4
 80016f4:	200003c4 	.word	0x200003c4

080016f8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	4613      	mov	r3, r2
 8001708:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d902      	bls.n	800171e <sendto+0x26>
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	e11b      	b.n	8001956 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	3301      	adds	r3, #1
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fb2c 	bl	8001d84 <WIZCHIP_READ>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b02      	subs	r3, #2
 8001734:	2b02      	cmp	r3, #2
 8001736:	d902      	bls.n	800173e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001738:	f06f 0304 	mvn.w	r3, #4
 800173c:	e10b      	b.n	8001956 <sendto+0x25e>
         break;
 800173e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <sendto+0x54>
 8001746:	f06f 030d 	mvn.w	r3, #13
 800174a:	e104      	b.n	8001956 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	3201      	adds	r2, #1
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4413      	add	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	3202      	adds	r2, #2
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	4413      	add	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	3203      	adds	r2, #3
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <sendto+0xa8>
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3301      	adds	r3, #1
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fafa 	bl	8001d84 <WIZCHIP_READ>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d002      	beq.n	80017a0 <sendto+0xa8>
 800179a:	f06f 030b 	mvn.w	r3, #11
 800179e:	e0da      	b.n	8001956 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80017a0:	8c3b      	ldrh	r3, [r7, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10e      	bne.n	80017c4 <sendto+0xcc>
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	3301      	adds	r3, #1
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fae8 	bl	8001d84 <WIZCHIP_READ>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d002      	beq.n	80017c4 <sendto+0xcc>
 80017be:	f06f 030a 	mvn.w	r3, #10
 80017c2:	e0c8      	b.n	8001956 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3301      	adds	r3, #1
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fad7 	bl	8001d84 <WIZCHIP_READ>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b42      	cmp	r3, #66	; 0x42
 80017de:	d008      	beq.n	80017f2 <sendto+0xfa>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b22      	cmp	r3, #34	; 0x22
 80017e4:	d005      	beq.n	80017f2 <sendto+0xfa>
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b32      	cmp	r3, #50	; 0x32
 80017ea:	d002      	beq.n	80017f2 <sendto+0xfa>
 80017ec:	f06f 0306 	mvn.w	r3, #6
 80017f0:	e0b1      	b.n	8001956 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	3301      	adds	r3, #1
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80017fe:	2204      	movs	r2, #4
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fbb8 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3301      	adds	r3, #1
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001814:	461a      	mov	r2, r3
 8001816:	8c3b      	ldrh	r3, [r7, #32]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b29b      	uxth	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f000 fafb 	bl	8001e1c <WIZCHIP_WRITE>
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	3301      	adds	r3, #1
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001832:	461a      	mov	r2, r3
 8001834:	8c3b      	ldrh	r3, [r7, #32]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f000 faee 	bl	8001e1c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	3301      	adds	r3, #1
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fa99 	bl	8001d84 <WIZCHIP_READ>
 8001852:	4603      	mov	r3, r0
 8001854:	b29b      	uxth	r3, r3
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800185a:	89ba      	ldrh	r2, [r7, #12]
 800185c:	8abb      	ldrh	r3, [r7, #20]
 800185e:	429a      	cmp	r2, r3
 8001860:	d901      	bls.n	8001866 <sendto+0x16e>
 8001862:	8abb      	ldrh	r3, [r7, #20]
 8001864:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fbe5 	bl	8002038 <getSn_TX_FSR>
 800186e:	4603      	mov	r3, r0
 8001870:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	3301      	adds	r3, #1
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fa80 	bl	8001d84 <WIZCHIP_READ>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <sendto+0x198>
 800188a:	f06f 0303 	mvn.w	r3, #3
 800188e:	e062      	b.n	8001956 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <sendto+0x268>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	fa42 f303 	asr.w	r3, r2, r3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <sendto+0x1b8>
 80018a4:	89ba      	ldrh	r2, [r7, #12]
 80018a6:	8abb      	ldrh	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d901      	bls.n	80018b0 <sendto+0x1b8>
 80018ac:	2300      	movs	r3, #0
 80018ae:	e052      	b.n	8001956 <sendto+0x25e>
      if(len <= freesize) break;
 80018b0:	89ba      	ldrh	r2, [r7, #12]
 80018b2:	8abb      	ldrh	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d900      	bls.n	80018ba <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80018b8:	e7d5      	b.n	8001866 <sendto+0x16e>
      if(len <= freesize) break;
 80018ba:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fc03 	bl	80020ce <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3301      	adds	r3, #1
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018d4:	2120      	movs	r1, #32
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 faa0 	bl	8001e1c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80018dc:	bf00      	nop
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	3301      	adds	r3, #1
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fa4a 	bl	8001d84 <WIZCHIP_READ>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f3      	bne.n	80018de <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	3301      	adds	r3, #1
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fa3e 	bl	8001d84 <WIZCHIP_READ>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3301      	adds	r3, #1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001926:	2110      	movs	r1, #16
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fa77 	bl	8001e1c <WIZCHIP_WRITE>
         break;
 800192e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001930:	89bb      	ldrh	r3, [r7, #12]
 8001932:	e010      	b.n	8001956 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0db      	beq.n	80018f6 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	3301      	adds	r3, #1
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800194a:	2108      	movs	r1, #8
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fa65 	bl	8001e1c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001952:	f06f 030c 	mvn.w	r3, #12
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003b0 	.word	0x200003b0

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_MspInit+0x5c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x5c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_MspInit+0x60>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_MspInit+0x60>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000

080019c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d12f      	bne.n	8001a48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a18:	23a0      	movs	r3, #160	; 0xa0
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_SPI_MspInit+0x90>)
 8001a2c:	f000 ffbe 	bl	80029ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a30:	2340      	movs	r3, #64	; 0x40
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_SPI_MspInit+0x90>)
 8001a44:	f000 ffb2 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013000 	.word	0x40013000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010800 	.word	0x40010800

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d114      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f000 ff57 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a90:	201c      	movs	r0, #28
 8001a92:	f000 ff70 	bl	8002976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a96:	e018      	b.n	8001aca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d113      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_TIM_Base_MspInit+0x78>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201d      	movs	r0, #29
 8001ac0:	f000 ff3d 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac4:	201d      	movs	r0, #29
 8001ac6:	f000 ff56 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40000400 	.word	0x40000400

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0x8c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d131      	bne.n	8001b60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b42:	f000 ff33 	bl	80029ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x94>)
 8001b5c:	f000 ff26 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 fda9 	bl	8002710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f001 f88c 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM2_IRQHandler+0x10>)
 8001bd6:	f002 fb4c 	bl	8004272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000284 	.word	0x20000284

08001be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM3_IRQHandler+0x10>)
 8001bea:	f002 fb42 	bl	8004272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002cc 	.word	0x200002cc

08001bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <_kill>:

int _kill(int pid, int sig)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c10:	f003 f840 	bl	8004c94 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2216      	movs	r2, #22
 8001c18:	601a      	str	r2, [r3, #0]
  return -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_exit>:

void _exit (int status)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffe7 	bl	8001c06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c38:	e7fe      	b.n	8001c38 <_exit+0x12>

08001c3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e00a      	b.n	8001c62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4c:	f3af 8000 	nop.w
 8001c50:	4601      	mov	r1, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	b2ca      	uxtb	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf0      	blt.n	8001c4c <_read+0x12>
  }

  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e009      	b.n	8001c9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf1      	blt.n	8001c86 <_write+0x12>
  }
  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_close>:

int _close(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <_isatty>:

int _isatty(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f002 ffaa 	bl	8004c94 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20005000 	.word	0x20005000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200003cc 	.word	0x200003cc
 8001d74:	200003f0 	.word	0x200003f0

08001d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <WIZCHIP_READ+0x24>
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d114      	bne.n	8001dd2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	0c12      	lsrs	r2, r2, #16
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4610      	mov	r0, r2
 8001db4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4798      	blx	r3
 8001dd0:	e011      	b.n	8001df6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	2103      	movs	r1, #3
 8001df2:	4610      	mov	r0, r2
 8001df4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4798      	blx	r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <WIZCHIP_READ+0x94>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	4798      	blx	r3
   return ret;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c

08001e1c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d119      	bne.n	8001e78 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	0c12      	lsrs	r2, r2, #16
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	0a12      	lsrs	r2, r2, #8
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4610      	mov	r0, r2
 8001e74:	4798      	blx	r3
 8001e76:	e013      	b.n	8001ea0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ea6:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <WIZCHIP_WRITE+0x98>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4798      	blx	r3
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000000c 	.word	0x2000000c

08001eb8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <WIZCHIP_READ_BUF+0x2a>
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d126      	bne.n	8001f30 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	0c12      	lsrs	r2, r2, #16
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	4610      	mov	r0, r2
 8001eee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	0a12      	lsrs	r2, r2, #8
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4610      	mov	r0, r2
 8001efc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4610      	mov	r0, r2
 8001f08:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	82fb      	strh	r3, [r7, #22]
 8001f0e:	e00a      	b.n	8001f26 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	8afa      	ldrh	r2, [r7, #22]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	188c      	adds	r4, r1, r2
 8001f1a:	4798      	blx	r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001f20:	8afb      	ldrh	r3, [r7, #22]
 8001f22:	3301      	adds	r3, #1
 8001f24:	82fb      	strh	r3, [r7, #22]
 8001f26:	8afa      	ldrh	r2, [r7, #22]
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3f0      	bcc.n	8001f10 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f2e:	e017      	b.n	8001f60 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f107 0210 	add.w	r2, r7, #16
 8001f4e:	2103      	movs	r1, #3
 8001f50:	4610      	mov	r0, r2
 8001f52:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	68b8      	ldr	r0, [r7, #8]
 8001f5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <WIZCHIP_READ_BUF+0xbc>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4798      	blx	r3
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	2000000c 	.word	0x2000000c

08001f78 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	0c12      	lsrs	r2, r2, #16
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4610      	mov	r0, r2
 8001fae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	0a12      	lsrs	r2, r2, #8
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	82fb      	strh	r3, [r7, #22]
 8001fce:	e00a      	b.n	8001fe6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	8afa      	ldrh	r2, [r7, #22]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	440a      	add	r2, r1
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	82fb      	strh	r3, [r7, #22]
 8001fe6:	8afa      	ldrh	r2, [r7, #22]
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3f0      	bcc.n	8001fd0 <WIZCHIP_WRITE_BUF+0x58>
 8001fee:	e017      	b.n	8002020 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f107 0210 	add.w	r2, r7, #16
 800200e:	2103      	movs	r1, #3
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	4611      	mov	r1, r2
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <WIZCHIP_WRITE_BUF+0xbc>)
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	4798      	blx	r3
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000000c 	.word	0x2000000c

08002038 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002042:	2300      	movs	r3, #0
 8002044:	81fb      	strh	r3, [r7, #14]
 8002046:	2300      	movs	r3, #0
 8002048:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3301      	adds	r3, #1
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fe94 	bl	8001d84 <WIZCHIP_READ>
 800205c:	4603      	mov	r3, r0
 800205e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002060:	89bb      	ldrh	r3, [r7, #12]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b29c      	uxth	r4, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3301      	adds	r3, #1
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe86 	bl	8001d84 <WIZCHIP_READ>
 8002078:	4603      	mov	r3, r0
 800207a:	b29b      	uxth	r3, r3
 800207c:	4423      	add	r3, r4
 800207e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002080:	89bb      	ldrh	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01a      	beq.n	80020bc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3301      	adds	r3, #1
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe76 	bl	8001d84 <WIZCHIP_READ>
 8002098:	4603      	mov	r3, r0
 800209a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b29c      	uxth	r4, r3
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3301      	adds	r3, #1
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fe68 	bl	8001d84 <WIZCHIP_READ>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4423      	add	r3, r4
 80020ba:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80020bc:	89fa      	ldrh	r2, [r7, #14]
 80020be:	89bb      	ldrh	r3, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1c2      	bne.n	800204a <getSn_TX_FSR+0x12>
   return val;
 80020c4:	89fb      	ldrh	r3, [r7, #14]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80020ce:	b590      	push	{r4, r7, lr}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	6039      	str	r1, [r7, #0]
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	4613      	mov	r3, r2
 80020dc:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d048      	beq.n	800217e <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	3301      	adds	r3, #1
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fe43 	bl	8001d84 <WIZCHIP_READ>
 80020fe:	4603      	mov	r3, r0
 8002100:	b29b      	uxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b29c      	uxth	r4, r3
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3301      	adds	r3, #1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fe36 	bl	8001d84 <WIZCHIP_READ>
 8002118:	4603      	mov	r3, r0
 800211a:	b29b      	uxth	r3, r3
 800211c:	4423      	add	r3, r4
 800211e:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	79fa      	ldrb	r2, [r7, #7]
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	3202      	adds	r2, #2
 800212a:	00d2      	lsls	r2, r2, #3
 800212c:	4413      	add	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f7ff ff1e 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800213c:	89fa      	ldrh	r2, [r7, #14]
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	3301      	adds	r3, #1
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002150:	461a      	mov	r2, r3
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7ff fe5d 	bl	8001e1c <WIZCHIP_WRITE>
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3301      	adds	r3, #1
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800216e:	461a      	mov	r2, r3
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7ff fe50 	bl	8001e1c <WIZCHIP_WRITE>
 800217c:	e000      	b.n	8002180 <wiz_send_data+0xb2>
   if(len == 0)  return;
 800217e:	bf00      	nop
}
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
	...

08002188 <cs_sel>:
extern SPI_HandleTypeDef hspi1;

/**
 * @brief function to set cs pin low to start transmission
 */
void cs_sel() {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800218c:	2200      	movs	r2, #0
 800218e:	2110      	movs	r1, #16
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <cs_sel+0x14>)
 8002192:	f000 fd8f 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010800 	.word	0x40010800

080021a0 <cs_desel>:

/**
 * @brief function to set cs pin high to end transmission
 */
void cs_desel() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80021a4:	2201      	movs	r2, #1
 80021a6:	2110      	movs	r1, #16
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <cs_desel+0x14>)
 80021aa:	f000 fd83 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40010800 	.word	0x40010800

080021b8 <spi_rb>:

/**
 * @brief function to read byte through spi
 */
uint8_t spi_rb(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80021be:	1df9      	adds	r1, r7, #7
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	2201      	movs	r2, #1
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <spi_rb+0x20>)
 80021c8:	f001 fb7e 	bl	80038c8 <HAL_SPI_Receive>
	return rbuf;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000022c 	.word	0x2000022c

080021dc <spi_wb>:

/**
 * @brief function to write byte through spi
 */
void spi_wb(uint8_t b) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80021e6:	1df9      	adds	r1, r7, #7
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	2201      	movs	r2, #1
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <spi_wb+0x20>)
 80021f0:	f001 fa2e 	bl	8003650 <HAL_SPI_Transmit>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000022c 	.word	0x2000022c

08002200 <initializeW5500>:
 * @param ip is the node's IP address
 * @param sn is the node's subnet mask
 * @param gw is the node's gateway address
 */
void initializeW5500(uint8_t mac[], uint8_t ip[], uint8_t sn[], uint8_t gw[])
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
	uint8_t bufSize[] = { 2, 2, 2, 2, 2, 2, 2, 2};//size of each socket number in kilobytes
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <initializeW5500+0x88>)
 8002210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002218:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);//passes call back function for pin high and low which needs to be called during the SPI transfer
 800221c:	491b      	ldr	r1, [pc, #108]	; (800228c <initializeW5500+0x8c>)
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <initializeW5500+0x90>)
 8002220:	f000 f8a2 	bl	8002368 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);//passes the call back function for read byte and write byte which needs to be called during the SPI transfer
 8002224:	491b      	ldr	r1, [pc, #108]	; (8002294 <initializeW5500+0x94>)
 8002226:	481c      	ldr	r0, [pc, #112]	; (8002298 <initializeW5500+0x98>)
 8002228:	f000 f8c2 	bl	80023b0 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);//initializes the transmit and receive buffer sizes for each socket
 800222c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f932 	bl	80024a0 <wizchip_init>
	wiz_NetInfo netInfo = {};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	f8c3 2013 	str.w	r2, [r3, #19]

	memcpy(&netInfo.mac,mac,6);// Mac address
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	6810      	ldr	r0, [r2, #0]
 8002258:	6018      	str	r0, [r3, #0]
 800225a:	8892      	ldrh	r2, [r2, #4]
 800225c:	809a      	strh	r2, [r3, #4]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.ip,ip,4);// IP address
 8002262:	f8c7 3016 	str.w	r3, [r7, #22]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.sn,sn,4);// Subnet mask
 800226a:	f8c7 301a 	str.w	r3, [r7, #26]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
	memcpy(&netInfo.gw,gw,4);// Gateway address
 8002272:	f8c7 301e 	str.w	r3, [r7, #30]

	wizchip_setnetinfo(&netInfo);//sets the configuration of the MAC address, IP address, subnet mask and gateway
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f99c 	bl	80025b8 <wizchip_setnetinfo>
	//wizchip_getnetinfo(&netInfo);
}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	; 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	08007ad0 	.word	0x08007ad0
 800228c:	080021a1 	.word	0x080021a1
 8002290:	08002189 	.word	0x08002189
 8002294:	080021dd 	.word	0x080021dd
 8002298:	080021b9 	.word	0x080021b9

0800229c <Socket_sendUDP>:
 * @param message is the message that needs to be sent
 * @param dstip is the destination IP address
 * @param portNum is the destination port number
 */
void Socket_sendUDP(uint8_t socNum,uint8_t message[],uint8_t dstip[], uint16_t portNum)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	4613      	mov	r3, r2
 80022ae:	81bb      	strh	r3, [r7, #12]
	while(sendto(socNum, message, strlen(message), dstip, portNum)!=strlen(message));//sends message to a destination ip address and port
 80022b0:	bf00      	nop
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	f7fd ff4c 	bl	8000150 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	7bf8      	ldrb	r0, [r7, #15]
 80022be:	89bb      	ldrh	r3, [r7, #12]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	f7ff fa17 	bl	80016f8 <sendto>
 80022ca:	4604      	mov	r4, r0
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f7fd ff3f 	bl	8000150 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	429c      	cmp	r4, r3
 80022d6:	d1ec      	bne.n	80022b2 <Socket_sendUDP+0x16>
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}

080022e2 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
 800234a:	2300      	movs	r3, #0
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <reg_wizchip_cs_cbfunc+0x16>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <reg_wizchip_cs_cbfunc+0x3c>)
 8002380:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <reg_wizchip_cs_cbfunc+0x40>)
 8002382:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <reg_wizchip_cs_cbfunc+0x3c>)
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <reg_wizchip_cs_cbfunc+0x44>)
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	e006      	b.n	800239a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <reg_wizchip_cs_cbfunc+0x3c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <reg_wizchip_cs_cbfunc+0x3c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6193      	str	r3, [r2, #24]
   }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	080022fb 	.word	0x080022fb
 80023ac:	08002307 	.word	0x08002307

080023b0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80023ba:	bf00      	nop
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <reg_wizchip_spi_cbfunc+0x4c>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f9      	beq.n	80023bc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <reg_wizchip_spi_cbfunc+0x24>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <reg_wizchip_spi_cbfunc+0x4c>)
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <reg_wizchip_spi_cbfunc+0x50>)
 80023d8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <reg_wizchip_spi_cbfunc+0x4c>)
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <reg_wizchip_spi_cbfunc+0x54>)
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	e006      	b.n	80023f0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80023e2:	4a06      	ldr	r2, [pc, #24]	; (80023fc <reg_wizchip_spi_cbfunc+0x4c>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <reg_wizchip_spi_cbfunc+0x4c>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6213      	str	r3, [r2, #32]
   }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	08002347 	.word	0x08002347
 8002404:	08002355 	.word	0x08002355

08002408 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2206      	movs	r2, #6
 8002412:	4619      	mov	r1, r3
 8002414:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002418:	f7ff fd4e 	bl	8001eb8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2204      	movs	r2, #4
 8002422:	4619      	mov	r1, r3
 8002424:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002428:	f7ff fd46 	bl	8001eb8 <WIZCHIP_READ_BUF>
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	2204      	movs	r2, #4
 8002432:	4619      	mov	r1, r3
 8002434:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002438:	f7ff fd3e 	bl	8001eb8 <WIZCHIP_READ_BUF>
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002448:	f7ff fd36 	bl	8001eb8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff fce4 	bl	8001e1c <WIZCHIP_WRITE>
   getMR(); // for delay
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff fc95 	bl	8001d84 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	2206      	movs	r2, #6
 800245e:	4619      	mov	r1, r3
 8002460:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002464:	f7ff fd88 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2204      	movs	r2, #4
 800246e:	4619      	mov	r1, r3
 8002470:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002474:	f7ff fd80 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2204      	movs	r2, #4
 800247e:	4619      	mov	r1, r3
 8002480:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002484:	f7ff fd78 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2204      	movs	r2, #4
 800248e:	4619      	mov	r1, r3
 8002490:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002494:	f7ff fd70 	bl	8001f78 <WIZCHIP_WRITE_BUF>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80024ae:	f7ff ffab 	bl	8002408 <wizchip_sw_reset>
   if(txsize)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03b      	beq.n	8002530 <wizchip_init+0x90>
   {
      tmp = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e015      	b.n	80024ee <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80024d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	dd02      	ble.n	80024e2 <wizchip_init+0x42>
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	e066      	b.n	80025b0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	2b07      	cmp	r3, #7
 80024f4:	dde5      	ble.n	80024c2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e015      	b.n	8002528 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80024fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	3301      	adds	r3, #1
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800250a:	4618      	mov	r0, r3
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff fc80 	bl	8001e1c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800251c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252c:	2b07      	cmp	r3, #7
 800252e:	dde5      	ble.n	80024fc <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03b      	beq.n	80025ae <wizchip_init+0x10e>
   {
      tmp = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e015      	b.n	800256c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	4413      	add	r3, r2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002556:	2b10      	cmp	r3, #16
 8002558:	dd02      	ble.n	8002560 <wizchip_init+0xc0>
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	e027      	b.n	80025b0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3301      	adds	r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	2b07      	cmp	r3, #7
 8002572:	dde5      	ble.n	8002540 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e015      	b.n	80025a6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3301      	adds	r3, #1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002588:	4618      	mov	r0, r3
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff fc41 	bl	8001e1c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	dde5      	ble.n	800257a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2206      	movs	r2, #6
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80025ca:	f7ff fcd5 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	330e      	adds	r3, #14
 80025d2:	2204      	movs	r2, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025da:	f7ff fccd 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	330a      	adds	r3, #10
 80025e2:	2204      	movs	r2, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80025ea:	f7ff fcc5 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3306      	adds	r3, #6
 80025f2:	2204      	movs	r2, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80025fa:	f7ff fcbd 	bl	8001f78 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7c9a      	ldrb	r2, [r3, #18]
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <wizchip_setnetinfo+0x78>)
 8002604:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7cda      	ldrb	r2, [r3, #19]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <wizchip_setnetinfo+0x78>)
 800260c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7d1a      	ldrb	r2, [r3, #20]
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <wizchip_setnetinfo+0x78>)
 8002614:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7d5a      	ldrb	r2, [r3, #21]
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <wizchip_setnetinfo+0x78>)
 800261c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7d9a      	ldrb	r2, [r3, #22]
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <wizchip_setnetinfo+0x7c>)
 8002624:	701a      	strb	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003d0 	.word	0x200003d0
 8002634:	200003d4 	.word	0x200003d4

08002638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263a:	490d      	ldr	r1, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002650:	4c0a      	ldr	r4, [pc, #40]	; (800267c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800265e:	f7ff fb8b 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f002 fb1d 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002666:	f7fe fcb9 	bl	8000fdc <main>
  bx lr
 800266a:	4770      	bx	lr
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002674:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 8002678:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800267c:	200003ec 	.word	0x200003ec

08002680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC1_2_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_Init+0x28>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_Init+0x28>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f000 f947 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f808 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a0:	f7ff f960 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f95f 	bl	8002992 <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 f927 	bl	800293e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000008 	.word	0x20000008
 8002708:	2000003c 	.word	0x2000003c
 800270c:	20000038 	.word	0x20000038

08002710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_IncTick+0x1c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_IncTick+0x20>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_IncTick+0x20>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	2000003c 	.word	0x2000003c
 8002730:	200003d8 	.word	0x200003d8

08002734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <HAL_GetTick+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	200003d8 	.word	0x200003d8

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff fff0 	bl	8002734 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffe0 	bl	8002734 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000003c 	.word	0x2000003c

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4906      	ldr	r1, [pc, #24]	; (8002828 <__NVIC_EnableIRQ+0x34>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f7ff ff90 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff2d 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff42 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff90 	bl	8002880 <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5f 	bl	800282c <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff35 	bl	80027f4 <__NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa2 	bl	80028e4 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b08b      	sub	sp, #44	; 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029be:	e169      	b.n	8002c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029c0:	2201      	movs	r2, #1
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 8158 	bne.w	8002c8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a9a      	ldr	r2, [pc, #616]	; (8002c4c <HAL_GPIO_Init+0x2a0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d05e      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
 80029e8:	4a98      	ldr	r2, [pc, #608]	; (8002c4c <HAL_GPIO_Init+0x2a0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d875      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 80029ee:	4a98      	ldr	r2, [pc, #608]	; (8002c50 <HAL_GPIO_Init+0x2a4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d058      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
 80029f4:	4a96      	ldr	r2, [pc, #600]	; (8002c50 <HAL_GPIO_Init+0x2a4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d86f      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 80029fa:	4a96      	ldr	r2, [pc, #600]	; (8002c54 <HAL_GPIO_Init+0x2a8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d052      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
 8002a00:	4a94      	ldr	r2, [pc, #592]	; (8002c54 <HAL_GPIO_Init+0x2a8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d869      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 8002a06:	4a94      	ldr	r2, [pc, #592]	; (8002c58 <HAL_GPIO_Init+0x2ac>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04c      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
 8002a0c:	4a92      	ldr	r2, [pc, #584]	; (8002c58 <HAL_GPIO_Init+0x2ac>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d863      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 8002a12:	4a92      	ldr	r2, [pc, #584]	; (8002c5c <HAL_GPIO_Init+0x2b0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d046      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
 8002a18:	4a90      	ldr	r2, [pc, #576]	; (8002c5c <HAL_GPIO_Init+0x2b0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d85d      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 8002a1e:	2b12      	cmp	r3, #18
 8002a20:	d82a      	bhi.n	8002a78 <HAL_GPIO_Init+0xcc>
 8002a22:	2b12      	cmp	r3, #18
 8002a24:	d859      	bhi.n	8002ada <HAL_GPIO_Init+0x12e>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_GPIO_Init+0x80>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002aa7 	.word	0x08002aa7
 8002a30:	08002a81 	.word	0x08002a81
 8002a34:	08002a93 	.word	0x08002a93
 8002a38:	08002ad5 	.word	0x08002ad5
 8002a3c:	08002adb 	.word	0x08002adb
 8002a40:	08002adb 	.word	0x08002adb
 8002a44:	08002adb 	.word	0x08002adb
 8002a48:	08002adb 	.word	0x08002adb
 8002a4c:	08002adb 	.word	0x08002adb
 8002a50:	08002adb 	.word	0x08002adb
 8002a54:	08002adb 	.word	0x08002adb
 8002a58:	08002adb 	.word	0x08002adb
 8002a5c:	08002adb 	.word	0x08002adb
 8002a60:	08002adb 	.word	0x08002adb
 8002a64:	08002adb 	.word	0x08002adb
 8002a68:	08002adb 	.word	0x08002adb
 8002a6c:	08002adb 	.word	0x08002adb
 8002a70:	08002a89 	.word	0x08002a89
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	4a79      	ldr	r2, [pc, #484]	; (8002c60 <HAL_GPIO_Init+0x2b4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a7e:	e02c      	b.n	8002ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e029      	b.n	8002adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e024      	b.n	8002adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	3308      	adds	r3, #8
 8002a98:	623b      	str	r3, [r7, #32]
          break;
 8002a9a:	e01f      	b.n	8002adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	623b      	str	r3, [r7, #32]
          break;
 8002aa4:	e01a      	b.n	8002adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	623b      	str	r3, [r7, #32]
          break;
 8002ab2:	e013      	b.n	8002adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002abc:	2308      	movs	r3, #8
 8002abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	611a      	str	r2, [r3, #16]
          break;
 8002ac6:	e009      	b.n	8002adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	615a      	str	r2, [r3, #20]
          break;
 8002ad2:	e003      	b.n	8002adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e000      	b.n	8002adc <HAL_GPIO_Init+0x130>
          break;
 8002ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2bff      	cmp	r3, #255	; 0xff
 8002ae0:	d801      	bhi.n	8002ae6 <HAL_GPIO_Init+0x13a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	e001      	b.n	8002aea <HAL_GPIO_Init+0x13e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d802      	bhi.n	8002af8 <HAL_GPIO_Init+0x14c>
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x152>
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	3b08      	subs	r3, #8
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	210f      	movs	r1, #15
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80b1 	beq.w	8002c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a4c      	ldr	r2, [pc, #304]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_GPIO_Init+0x2b8>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b44:	4a48      	ldr	r2, [pc, #288]	; (8002c68 <HAL_GPIO_Init+0x2bc>)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_GPIO_Init+0x2c0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_GPIO_Init+0x1ec>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <HAL_GPIO_Init+0x2c4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00d      	beq.n	8002b94 <HAL_GPIO_Init+0x1e8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <HAL_GPIO_Init+0x2c8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <HAL_GPIO_Init+0x1e4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <HAL_GPIO_Init+0x2cc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_GPIO_Init+0x1e0>
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_GPIO_Init+0x1ee>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e004      	b.n	8002b9a <HAL_GPIO_Init+0x1ee>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_Init+0x1ee>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_GPIO_Init+0x1ee>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	f002 0203 	and.w	r2, r2, #3
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002baa:	492f      	ldr	r1, [pc, #188]	; (8002c68 <HAL_GPIO_Init+0x2bc>)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	492c      	ldr	r1, [pc, #176]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4928      	ldr	r1, [pc, #160]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4922      	ldr	r1, [pc, #136]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	491e      	ldr	r1, [pc, #120]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	4918      	ldr	r1, [pc, #96]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	4914      	ldr	r1, [pc, #80]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d021      	beq.n	8002c80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <HAL_GPIO_Init+0x2d0>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
 8002c48:	e021      	b.n	8002c8e <HAL_GPIO_Init+0x2e2>
 8002c4a:	bf00      	nop
 8002c4c:	10320000 	.word	0x10320000
 8002c50:	10310000 	.word	0x10310000
 8002c54:	10220000 	.word	0x10220000
 8002c58:	10210000 	.word	0x10210000
 8002c5c:	10120000 	.word	0x10120000
 8002c60:	10110000 	.word	0x10110000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	40010c00 	.word	0x40010c00
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_GPIO_Init+0x304>)
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <HAL_GPIO_Init+0x304>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	3301      	adds	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f47f ae8e 	bne.w	80029c0 <HAL_GPIO_Init+0x14>
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	372c      	adds	r7, #44	; 0x2c
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40010400 	.word	0x40010400

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f8f0 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e272      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8087 	beq.w	8002e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d10b      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	4b89      	ldr	r3, [pc, #548]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x12c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d168      	bne.n	8002e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e24c      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x76>
 8002d7c:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7f      	ldr	r2, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e02e      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7a      	ldr	r2, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dd0:	4b6b      	ldr	r3, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b68      	ldr	r3, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fca0 	bl	8002734 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fc9c 	bl	8002734 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e200      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe4>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff fc8c 	bl	8002734 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff fc88 	bl	8002734 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1ec      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x10c>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4e:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
 8002e66:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c0      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4939      	ldr	r1, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7ff fc41 	bl	8002734 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff fc3d 	bl	8002734 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4927      	ldr	r1, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fc20 	bl	8002734 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff fc1c 	bl	8002734 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e180      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03a      	beq.n	8002f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7ff fc00 	bl	8002734 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff fbfc 	bl	8002734 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e160      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 fad8 	bl	800350c <RCC_Delay>
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7ff fbe6 	bl	8002734 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	e00f      	b.n	8002f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7ff fbe2 	bl	8002734 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e146      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	42420000 	.word	0x42420000
 8002f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e9      	bne.n	8002f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a6 	beq.w	80030f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a87      	ldr	r2, [pc, #540]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b82      	ldr	r3, [pc, #520]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7ff fba3 	bl	8002734 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7ff fb9f 	bl	8002734 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b64      	cmp	r3, #100	; 0x64
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e103      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x312>
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a6e      	ldr	r2, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e02d      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x334>
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a69      	ldr	r2, [pc, #420]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x356>
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a60      	ldr	r2, [pc, #384]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a5d      	ldr	r2, [pc, #372]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a5a      	ldr	r2, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7ff fb53 	bl	8002734 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7ff fb4f 	bl	8002734 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0b1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCC_OscConfig+0x37e>
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7ff fb3d 	bl	8002734 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7ff fb39 	bl	8002734 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e09b      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fc:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d061      	beq.n	80031cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d146      	bne.n	800319e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7ff fb0d 	bl	8002734 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7ff fb09 	bl	8002734 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e06d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4921      	ldr	r1, [pc, #132]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a19      	ldr	r1, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	430b      	orrs	r3, r1
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7ff fadd 	bl	8002734 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7ff fad9 	bl	8002734 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x46a>
 800319c:	e035      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7ff fac6 	bl	8002734 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7ff fac2 	bl	8002734 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e026      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x498>
 80031ca:	e01e      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e019      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x500>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d0      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4965      	ldr	r1, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d040      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e073      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7ff fa14 	bl	8002734 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7ff fa10 	bl	8002734 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e053      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d210      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1cc>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f972 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08007ae8 	.word	0x08007ae8
 80033e4:	20000008 	.word	0x20000008
 80033e8:	20000038 	.word	0x20000038

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b490      	push	{r4, r7}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_GetSysClockFreq+0xac>)
 80033f4:	1d3c      	adds	r4, r7, #4
 80033f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033fc:	f240 2301 	movw	r3, #513	; 0x201
 8003400:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003416:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b04      	cmp	r3, #4
 8003424:	d002      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003426:	2b08      	cmp	r3, #8
 8003428:	d003      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x46>
 800342a:	e02b      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800342e:	623b      	str	r3, [r7, #32]
      break;
 8003430:	e02b      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3328      	adds	r3, #40	; 0x28
 800343c:	443b      	add	r3, r7
 800343e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003442:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0c5b      	lsrs	r3, r3, #17
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	3328      	adds	r3, #40	; 0x28
 800345a:	443b      	add	r3, r7
 800345c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003460:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003466:	fb03 f202 	mul.w	r2, r3, r2
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e004      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	623b      	str	r3, [r7, #32]
      break;
 8003482:	e002      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003486:	623b      	str	r3, [r7, #32]
      break;
 8003488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348a:	6a3b      	ldr	r3, [r7, #32]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bc90      	pop	{r4, r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	08007ad8 	.word	0x08007ad8
 800349c:	40021000 	.word	0x40021000
 80034a0:	007a1200 	.word	0x007a1200
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000008 	.word	0x20000008

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff2 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08007af8 	.word	0x08007af8

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0adb      	lsrs	r3, r3, #11
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	08007af8 	.word	0x08007af8

0800350c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <RCC_Delay+0x34>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <RCC_Delay+0x38>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003528:	bf00      	nop
  }
  while (Delay --);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <RCC_Delay+0x1c>
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000008 	.word	0x20000008
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e076      	b.n	8003648 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d009      	beq.n	8003580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
 8003572:	e005      	b.n	8003580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fa14 	bl	80019c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1a      	lsrs	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f002 0204 	and.w	r2, r2, #4
 8003626:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_SPI_Transmit+0x22>
 800366e:	2302      	movs	r3, #2
 8003670:	e126      	b.n	80038c0 <HAL_SPI_Transmit+0x270>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367a:	f7ff f85b 	bl	8002734 <HAL_GetTick>
 800367e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003694:	e10b      	b.n	80038ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Transmit+0x52>
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a6:	e102      	b.n	80038ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d10f      	bne.n	8003710 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d007      	beq.n	800372e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003736:	d14b      	bne.n	80037d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_SPI_Transmit+0xf6>
 8003740:	8afb      	ldrh	r3, [r7, #22]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d13e      	bne.n	80037c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800376a:	e02b      	b.n	80037c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d112      	bne.n	80037a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	86da      	strh	r2, [r3, #54]	; 0x36
 800379e:	e011      	b.n	80037c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a0:	f7fe ffc8 	bl	8002734 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d803      	bhi.n	80037b8 <HAL_SPI_Transmit+0x168>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d102      	bne.n	80037be <HAL_SPI_Transmit+0x16e>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c2:	e074      	b.n	80038ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ce      	bne.n	800376c <HAL_SPI_Transmit+0x11c>
 80037ce:	e04c      	b.n	800386a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_SPI_Transmit+0x18e>
 80037d8:	8afb      	ldrh	r3, [r7, #22]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d140      	bne.n	8003860 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003804:	e02c      	b.n	8003860 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d113      	bne.n	800383c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	86da      	strh	r2, [r3, #54]	; 0x36
 800383a:	e011      	b.n	8003860 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800383c:	f7fe ff7a 	bl	8002734 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d803      	bhi.n	8003854 <HAL_SPI_Transmit+0x204>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d102      	bne.n	800385a <HAL_SPI_Transmit+0x20a>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800385e:	e026      	b.n	80038ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1cd      	bne.n	8003806 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fbb8 	bl	8003fe4 <SPI_EndRxTxTransaction>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e000      	b.n	80038ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80038ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038be:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e4:	d112      	bne.n	800390c <HAL_SPI_Receive+0x44>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10e      	bne.n	800390c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2204      	movs	r2, #4
 80038f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f8f1 	bl	8003aea <HAL_SPI_TransmitReceive>
 8003908:	4603      	mov	r3, r0
 800390a:	e0ea      	b.n	8003ae2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_SPI_Receive+0x52>
 8003916:	2302      	movs	r3, #2
 8003918:	e0e3      	b.n	8003ae2 <HAL_SPI_Receive+0x21a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003922:	f7fe ff07 	bl	8002734 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d002      	beq.n	800393a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003938:	e0ca      	b.n	8003ad0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Receive+0x7e>
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800394a:	e0c1      	b.n	8003ad0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2204      	movs	r2, #4
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d10f      	bne.n	80039b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d162      	bne.n	8003aa0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80039da:	e02e      	b.n	8003a3a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d115      	bne.n	8003a16 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f103 020c 	add.w	r2, r3, #12
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a14:	e011      	b.n	8003a3a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a16:	f7fe fe8d 	bl	8002734 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d803      	bhi.n	8003a2e <HAL_SPI_Receive+0x166>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d102      	bne.n	8003a34 <HAL_SPI_Receive+0x16c>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a38:	e04a      	b.n	8003ad0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1cb      	bne.n	80039dc <HAL_SPI_Receive+0x114>
 8003a44:	e031      	b.n	8003aaa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d113      	bne.n	8003a7c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	b292      	uxth	r2, r2
 8003a60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a7a:	e011      	b.n	8003aa0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7c:	f7fe fe5a 	bl	8002734 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d803      	bhi.n	8003a94 <HAL_SPI_Receive+0x1cc>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d102      	bne.n	8003a9a <HAL_SPI_Receive+0x1d2>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a9e:	e017      	b.n	8003ad0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1cd      	bne.n	8003a46 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa46 	bl	8003f40 <SPI_EndRxTransaction>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
 8003acc:	e000      	b.n	8003ad0 <HAL_SPI_Receive+0x208>
  }

error :
 8003ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b08c      	sub	sp, #48	; 0x30
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x26>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e18a      	b.n	8003e26 <HAL_SPI_TransmitReceive+0x33c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b18:	f7fe fe0c 	bl	8002734 <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b2e:	887b      	ldrh	r3, [r7, #2]
 8003b30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00f      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x70>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b40:	d107      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x68>
 8003b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d003      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b58:	e15b      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x82>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x82>
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b72:	e14e      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d003      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2205      	movs	r2, #5
 8003b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	887a      	ldrh	r2, [r7, #2]
 8003b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be4:	d178      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x10a>
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d166      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c18:	e053      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d11b      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x176>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x176>
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d113      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d119      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x1b8>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d014      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	1c9a      	adds	r2, r3, #2
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ca2:	f7fe fd47 	bl	8002734 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d807      	bhi.n	8003cc2 <HAL_SPI_TransmitReceive+0x1d8>
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d003      	beq.n	8003cc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cc0:	e0a7      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1a6      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x130>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1a1      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x130>
 8003cd6:	e07c      	b.n	8003dd2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x1fc>
 8003ce0:	8b7b      	ldrh	r3, [r7, #26]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d16b      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d0c:	e057      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d11c      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x26c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d017      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x26c>
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d114      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d119      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x2ae>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d014      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d98:	f7fe fccc 	bl	8002734 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d803      	bhi.n	8003db0 <HAL_SPI_TransmitReceive+0x2c6>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x2cc>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dbc:	e029      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1a2      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x224>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d19d      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f904 	bl	8003fe4 <SPI_EndRxTxTransaction>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dee:	e010      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	e000      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e40:	f7fe fc78 	bl	8002734 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e50:	f7fe fc70 	bl	8002734 <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	015b      	lsls	r3, r3, #5
 8003e5c:	0d1b      	lsrs	r3, r3, #20
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e66:	e054      	b.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d050      	beq.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e70:	f7fe fc60 	bl	8002734 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d902      	bls.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d13d      	bne.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9e:	d111      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea8:	d004      	beq.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d107      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ecc:	d10f      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e017      	b.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d19b      	bne.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000008 	.word	0x20000008

08003f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f54:	d111      	bne.n	8003f7a <SPI_EndRxTransaction+0x3a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5e:	d004      	beq.n	8003f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d107      	bne.n	8003f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f78:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d117      	bne.n	8003fb4 <SPI_EndRxTransaction+0x74>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8c:	d112      	bne.n	8003fb4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2101      	movs	r1, #1
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff ff49 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e013      	b.n	8003fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff ff36 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e000      	b.n	8003fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff ff18 	bl	8003e30 <SPI_WaitFlagStateUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e000      	b.n	8004018 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fd08 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 faf8 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e03a      	b.n	800414e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_TIM_Base_Start_IT+0x98>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x58>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d009      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x58>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_TIM_Base_Start_IT+0x9c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x58>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a13      	ldr	r2, [pc, #76]	; (8004160 <HAL_TIM_Base_Start_IT+0xa0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d111      	bne.n	800413c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b06      	cmp	r3, #6
 8004128:	d010      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413a:	e007      	b.n	800414c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800

08004164 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	f241 1311 	movw	r3, #4369	; 0x1111
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10f      	bne.n	80041ac <HAL_TIM_Base_Stop_IT+0x48>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	f240 4344 	movw	r3, #1092	; 0x444
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <HAL_TIM_Base_Stop_IT+0x48>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e041      	b.n	8004258 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f839 	bl	8004260 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fa27 	bl	8004654 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d122      	bne.n	80042ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d11b      	bne.n	80042ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0202 	mvn.w	r2, #2
 800429e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f9b1 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 80042ba:	e005      	b.n	80042c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f9a4 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9b3 	bl	800462e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d122      	bne.n	8004322 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d11b      	bne.n	8004322 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0204 	mvn.w	r2, #4
 80042f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f987 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 800430e:	e005      	b.n	800431c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f97a 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f989 	bl	800462e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d122      	bne.n	8004376 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d11b      	bne.n	8004376 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0208 	mvn.w	r2, #8
 8004346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2204      	movs	r2, #4
 800434c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f95d 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 8004362:	e005      	b.n	8004370 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f950 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f95f 	bl	800462e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b10      	cmp	r3, #16
 8004382:	d122      	bne.n	80043ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b10      	cmp	r3, #16
 8004390:	d11b      	bne.n	80043ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f06f 0210 	mvn.w	r2, #16
 800439a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2208      	movs	r2, #8
 80043a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f933 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 80043b6:	e005      	b.n	80043c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f926 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f935 	bl	800462e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10e      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f06f 0201 	mvn.w	r2, #1
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fc fd1d 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d10e      	bne.n	8004422 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b80      	cmp	r3, #128	; 0x80
 8004410:	d107      	bne.n	8004422 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa78 	bl	8004912 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8f9 	bl	8004640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	d10e      	bne.n	800447a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b20      	cmp	r3, #32
 8004468:	d107      	bne.n	800447a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0220 	mvn.w	r2, #32
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fa43 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_ConfigClockSource+0x18>
 8004496:	2302      	movs	r3, #2
 8004498:	e0b3      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x180>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d2:	d03e      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xd0>
 80044d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d8:	f200 8087 	bhi.w	80045ea <HAL_TIM_ConfigClockSource+0x168>
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	f000 8085 	beq.w	80045ee <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d87f      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 80044ea:	2b70      	cmp	r3, #112	; 0x70
 80044ec:	d01a      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0xa2>
 80044ee:	2b70      	cmp	r3, #112	; 0x70
 80044f0:	d87b      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 80044f2:	2b60      	cmp	r3, #96	; 0x60
 80044f4:	d050      	beq.n	8004598 <HAL_TIM_ConfigClockSource+0x116>
 80044f6:	2b60      	cmp	r3, #96	; 0x60
 80044f8:	d877      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 80044fa:	2b50      	cmp	r3, #80	; 0x50
 80044fc:	d03c      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0xf6>
 80044fe:	2b50      	cmp	r3, #80	; 0x50
 8004500:	d873      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d058      	beq.n	80045b8 <HAL_TIM_ConfigClockSource+0x136>
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d86f      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 800450a:	2b30      	cmp	r3, #48	; 0x30
 800450c:	d064      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0x156>
 800450e:	2b30      	cmp	r3, #48	; 0x30
 8004510:	d86b      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 8004512:	2b20      	cmp	r3, #32
 8004514:	d060      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0x156>
 8004516:	2b20      	cmp	r3, #32
 8004518:	d867      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d05c      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0x156>
 800451e:	2b10      	cmp	r3, #16
 8004520:	d05a      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004522:	e062      	b.n	80045ea <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f000 f967 	bl	8004806 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]
      break;
 8004550:	e04e      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f000 f950 	bl	8004806 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	609a      	str	r2, [r3, #8]
      break;
 8004576:	e03b      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	461a      	mov	r2, r3
 8004586:	f000 f8c7 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2150      	movs	r1, #80	; 0x50
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f91e 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 8004596:	e02b      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f000 f8e5 	bl	8004774 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2160      	movs	r1, #96	; 0x60
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f90e 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 80045b6:	e01b      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f000 f8a7 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f8fe 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 80045d6:	e00b      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 f8f5 	bl	80047d2 <TIM_ITRx_SetConfig>
        break;
 80045e8:	e002      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
	...

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_Base_SetConfig+0xb8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d007      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <TIM_Base_SetConfig+0xbc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_Base_SetConfig+0xc0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d108      	bne.n	8004696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <TIM_Base_SetConfig+0xb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <TIM_Base_SetConfig+0xbc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <TIM_Base_SetConfig+0xc0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <TIM_Base_SetConfig+0xb8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d103      	bne.n	80046fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	615a      	str	r2, [r3, #20]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800

08004718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 030a 	bic.w	r3, r3, #10
 8004754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 0210 	bic.w	r2, r3, #16
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800479e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	031b      	lsls	r3, r3, #12
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f043 0307 	orr.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004820:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	431a      	orrs	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4313      	orrs	r3, r2
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e046      	b.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d009      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a10      	ldr	r2, [pc, #64]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10c      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e03f      	b.n	80049b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd f8c6 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f905 	bl	8004b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b08a      	sub	sp, #40	; 0x28
 80049c2:	af02      	add	r7, sp, #8
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d17c      	bne.n	8004ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_UART_Transmit+0x2c>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e075      	b.n	8004ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Transmit+0x3e>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e06e      	b.n	8004ada <HAL_UART_Transmit+0x11c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2221      	movs	r2, #33	; 0x21
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a12:	f7fd fe8f 	bl	8002734 <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d108      	bne.n	8004a40 <HAL_UART_Transmit+0x82>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e003      	b.n	8004a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a50:	e02a      	b.n	8004aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f840 	bl	8004ae2 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e036      	b.n	8004ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3302      	adds	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e007      	b.n	8004a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1cf      	bne.n	8004a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2140      	movs	r1, #64	; 0x40
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f810 	bl	8004ae2 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e006      	b.n	8004ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	4613      	mov	r3, r2
 8004af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	e02c      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d028      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b02:	f7fd fe17 	bl	8002734 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d21d      	bcs.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e00f      	b.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d0c3      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bb2:	f023 030c 	bic.w	r3, r3, #12
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <UART_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d103      	bne.n	8004be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fc80 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	e002      	b.n	8004bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fc68 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <UART_SetConfig+0x118>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	0119      	lsls	r1, r3, #4
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <UART_SetConfig+0x118>)
 8004c26:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2064      	movs	r0, #100	; 0x64
 8004c2e:	fb00 f303 	mul.w	r3, r0, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	3332      	adds	r3, #50	; 0x32
 8004c38:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <UART_SetConfig+0x118>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c44:	4419      	add	r1, r3
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <UART_SetConfig+0x118>)
 8004c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2064      	movs	r0, #100	; 0x64
 8004c66:	fb00 f303 	mul.w	r3, r0, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <UART_SetConfig+0x118>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	440a      	add	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40013800 	.word	0x40013800
 8004c90:	51eb851f 	.word	0x51eb851f

08004c94 <__errno>:
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <__errno+0x8>)
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000040 	.word	0x20000040

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	4d0c      	ldr	r5, [pc, #48]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca6:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	f002 fefa 	bl	8007aa8 <_init>
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	4d0a      	ldr	r5, [pc, #40]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb8:	4c0a      	ldr	r4, [pc, #40]	; (8004ce4 <__libc_init_array+0x44>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	42a6      	cmp	r6, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc8:	4798      	blx	r3
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd2:	4798      	blx	r3
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08007edc 	.word	0x08007edc
 8004cdc:	08007edc 	.word	0x08007edc
 8004ce0:	08007edc 	.word	0x08007edc
 8004ce4:	08007ee0 	.word	0x08007ee0

08004ce8 <memset>:
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4402      	add	r2, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <__cvt>:
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfe:	461f      	mov	r7, r3
 8004d00:	bfbb      	ittet	lt
 8004d02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d06:	461f      	movlt	r7, r3
 8004d08:	2300      	movge	r3, #0
 8004d0a:	232d      	movlt	r3, #45	; 0x2d
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	4614      	mov	r4, r2
 8004d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d14:	7013      	strb	r3, [r2, #0]
 8004d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d1c:	f023 0820 	bic.w	r8, r3, #32
 8004d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d24:	d005      	beq.n	8004d32 <__cvt+0x3a>
 8004d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d2a:	d100      	bne.n	8004d2e <__cvt+0x36>
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e000      	b.n	8004d34 <__cvt+0x3c>
 8004d32:	2303      	movs	r3, #3
 8004d34:	aa07      	add	r2, sp, #28
 8004d36:	9204      	str	r2, [sp, #16]
 8004d38:	aa06      	add	r2, sp, #24
 8004d3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d3e:	e9cd 3500 	strd	r3, r5, [sp]
 8004d42:	4622      	mov	r2, r4
 8004d44:	463b      	mov	r3, r7
 8004d46:	f000 fce3 	bl	8005710 <_dtoa_r>
 8004d4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d4e:	4606      	mov	r6, r0
 8004d50:	d102      	bne.n	8004d58 <__cvt+0x60>
 8004d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d54:	07db      	lsls	r3, r3, #31
 8004d56:	d522      	bpl.n	8004d9e <__cvt+0xa6>
 8004d58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d5c:	eb06 0905 	add.w	r9, r6, r5
 8004d60:	d110      	bne.n	8004d84 <__cvt+0x8c>
 8004d62:	7833      	ldrb	r3, [r6, #0]
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d10a      	bne.n	8004d7e <__cvt+0x86>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4639      	mov	r1, r7
 8004d70:	f7fb fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d74:	b918      	cbnz	r0, 8004d7e <__cvt+0x86>
 8004d76:	f1c5 0501 	rsb	r5, r5, #1
 8004d7a:	f8ca 5000 	str.w	r5, [sl]
 8004d7e:	f8da 3000 	ldr.w	r3, [sl]
 8004d82:	4499      	add	r9, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d90:	b108      	cbz	r0, 8004d96 <__cvt+0x9e>
 8004d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d96:	2230      	movs	r2, #48	; 0x30
 8004d98:	9b07      	ldr	r3, [sp, #28]
 8004d9a:	454b      	cmp	r3, r9
 8004d9c:	d307      	bcc.n	8004dae <__cvt+0xb6>
 8004d9e:	4630      	mov	r0, r6
 8004da0:	9b07      	ldr	r3, [sp, #28]
 8004da2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004da4:	1b9b      	subs	r3, r3, r6
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	b008      	add	sp, #32
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	9107      	str	r1, [sp, #28]
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e7f0      	b.n	8004d98 <__cvt+0xa0>

08004db6 <__exponent>:
 8004db6:	4603      	mov	r3, r0
 8004db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	f803 2b02 	strb.w	r2, [r3], #2
 8004dc0:	bfb6      	itet	lt
 8004dc2:	222d      	movlt	r2, #45	; 0x2d
 8004dc4:	222b      	movge	r2, #43	; 0x2b
 8004dc6:	4249      	neglt	r1, r1
 8004dc8:	2909      	cmp	r1, #9
 8004dca:	7042      	strb	r2, [r0, #1]
 8004dcc:	dd2b      	ble.n	8004e26 <__exponent+0x70>
 8004dce:	f10d 0407 	add.w	r4, sp, #7
 8004dd2:	46a4      	mov	ip, r4
 8004dd4:	270a      	movs	r7, #10
 8004dd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dda:	460a      	mov	r2, r1
 8004ddc:	46a6      	mov	lr, r4
 8004dde:	fb07 1516 	mls	r5, r7, r6, r1
 8004de2:	2a63      	cmp	r2, #99	; 0x63
 8004de4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004de8:	4631      	mov	r1, r6
 8004dea:	f104 34ff 	add.w	r4, r4, #4294967295
 8004dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004df2:	dcf0      	bgt.n	8004dd6 <__exponent+0x20>
 8004df4:	3130      	adds	r1, #48	; 0x30
 8004df6:	f1ae 0502 	sub.w	r5, lr, #2
 8004dfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004dfe:	4629      	mov	r1, r5
 8004e00:	1c44      	adds	r4, r0, #1
 8004e02:	4561      	cmp	r1, ip
 8004e04:	d30a      	bcc.n	8004e1c <__exponent+0x66>
 8004e06:	f10d 0209 	add.w	r2, sp, #9
 8004e0a:	eba2 020e 	sub.w	r2, r2, lr
 8004e0e:	4565      	cmp	r5, ip
 8004e10:	bf88      	it	hi
 8004e12:	2200      	movhi	r2, #0
 8004e14:	4413      	add	r3, r2
 8004e16:	1a18      	subs	r0, r3, r0
 8004e18:	b003      	add	sp, #12
 8004e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e24:	e7ed      	b.n	8004e02 <__exponent+0x4c>
 8004e26:	2330      	movs	r3, #48	; 0x30
 8004e28:	3130      	adds	r1, #48	; 0x30
 8004e2a:	7083      	strb	r3, [r0, #2]
 8004e2c:	70c1      	strb	r1, [r0, #3]
 8004e2e:	1d03      	adds	r3, r0, #4
 8004e30:	e7f1      	b.n	8004e16 <__exponent+0x60>
	...

08004e34 <_printf_float>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	b091      	sub	sp, #68	; 0x44
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e40:	4616      	mov	r6, r2
 8004e42:	461f      	mov	r7, r3
 8004e44:	4605      	mov	r5, r0
 8004e46:	f001 fa51 	bl	80062ec <_localeconv_r>
 8004e4a:	6803      	ldr	r3, [r0, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	f7fb f97e 	bl	8000150 <strlen>
 8004e54:	2300      	movs	r3, #0
 8004e56:	930e      	str	r3, [sp, #56]	; 0x38
 8004e58:	f8d8 3000 	ldr.w	r3, [r8]
 8004e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e5e:	3307      	adds	r3, #7
 8004e60:	f023 0307 	bic.w	r3, r3, #7
 8004e64:	f103 0208 	add.w	r2, r3, #8
 8004e68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e6c:	f8d4 b000 	ldr.w	fp, [r4]
 8004e70:	f8c8 2000 	str.w	r2, [r8]
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4b9c      	ldr	r3, [pc, #624]	; (8005100 <_printf_float+0x2cc>)
 8004e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e90:	f7fb fdbc 	bl	8000a0c <__aeabi_dcmpun>
 8004e94:	bb70      	cbnz	r0, 8004ef4 <_printf_float+0xc0>
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4b98      	ldr	r3, [pc, #608]	; (8005100 <_printf_float+0x2cc>)
 8004e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea0:	f7fb fd96 	bl	80009d0 <__aeabi_dcmple>
 8004ea4:	bb30      	cbnz	r0, 8004ef4 <_printf_float+0xc0>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4640      	mov	r0, r8
 8004eac:	4651      	mov	r1, sl
 8004eae:	f7fb fd85 	bl	80009bc <__aeabi_dcmplt>
 8004eb2:	b110      	cbz	r0, 8004eba <_printf_float+0x86>
 8004eb4:	232d      	movs	r3, #45	; 0x2d
 8004eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eba:	4b92      	ldr	r3, [pc, #584]	; (8005104 <_printf_float+0x2d0>)
 8004ebc:	4892      	ldr	r0, [pc, #584]	; (8005108 <_printf_float+0x2d4>)
 8004ebe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ec2:	bf94      	ite	ls
 8004ec4:	4698      	movls	r8, r3
 8004ec6:	4680      	movhi	r8, r0
 8004ec8:	2303      	movs	r3, #3
 8004eca:	f04f 0a00 	mov.w	sl, #0
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	f02b 0304 	bic.w	r3, fp, #4
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	4633      	mov	r3, r6
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	9700      	str	r7, [sp, #0]
 8004ede:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ee0:	f000 f9d4 	bl	800528c <_printf_common>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	f040 8090 	bne.w	800500a <_printf_float+0x1d6>
 8004eea:	f04f 30ff 	mov.w	r0, #4294967295
 8004eee:	b011      	add	sp, #68	; 0x44
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	4653      	mov	r3, sl
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4651      	mov	r1, sl
 8004efc:	f7fb fd86 	bl	8000a0c <__aeabi_dcmpun>
 8004f00:	b148      	cbz	r0, 8004f16 <_printf_float+0xe2>
 8004f02:	f1ba 0f00 	cmp.w	sl, #0
 8004f06:	bfb8      	it	lt
 8004f08:	232d      	movlt	r3, #45	; 0x2d
 8004f0a:	4880      	ldr	r0, [pc, #512]	; (800510c <_printf_float+0x2d8>)
 8004f0c:	bfb8      	it	lt
 8004f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f12:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <_printf_float+0x2dc>)
 8004f14:	e7d3      	b.n	8004ebe <_printf_float+0x8a>
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	d142      	bne.n	8004fa6 <_printf_float+0x172>
 8004f20:	2306      	movs	r3, #6
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	9206      	str	r2, [sp, #24]
 8004f28:	aa0e      	add	r2, sp, #56	; 0x38
 8004f2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f2e:	aa0d      	add	r2, sp, #52	; 0x34
 8004f30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f34:	9203      	str	r2, [sp, #12]
 8004f36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	4642      	mov	r2, r8
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	4628      	mov	r0, r5
 8004f48:	4653      	mov	r3, sl
 8004f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f4c:	f7ff fed4 	bl	8004cf8 <__cvt>
 8004f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f52:	4680      	mov	r8, r0
 8004f54:	2947      	cmp	r1, #71	; 0x47
 8004f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f58:	d108      	bne.n	8004f6c <_printf_float+0x138>
 8004f5a:	1cc8      	adds	r0, r1, #3
 8004f5c:	db02      	blt.n	8004f64 <_printf_float+0x130>
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	4299      	cmp	r1, r3
 8004f62:	dd40      	ble.n	8004fe6 <_printf_float+0x1b2>
 8004f64:	f1a9 0902 	sub.w	r9, r9, #2
 8004f68:	fa5f f989 	uxtb.w	r9, r9
 8004f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f70:	d81f      	bhi.n	8004fb2 <_printf_float+0x17e>
 8004f72:	464a      	mov	r2, r9
 8004f74:	3901      	subs	r1, #1
 8004f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8004f7c:	f7ff ff1b 	bl	8004db6 <__exponent>
 8004f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f82:	4682      	mov	sl, r0
 8004f84:	1813      	adds	r3, r2, r0
 8004f86:	2a01      	cmp	r2, #1
 8004f88:	6123      	str	r3, [r4, #16]
 8004f8a:	dc02      	bgt.n	8004f92 <_printf_float+0x15e>
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	07d2      	lsls	r2, r2, #31
 8004f90:	d501      	bpl.n	8004f96 <_printf_float+0x162>
 8004f92:	3301      	adds	r3, #1
 8004f94:	6123      	str	r3, [r4, #16]
 8004f96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d09b      	beq.n	8004ed6 <_printf_float+0xa2>
 8004f9e:	232d      	movs	r3, #45	; 0x2d
 8004fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa4:	e797      	b.n	8004ed6 <_printf_float+0xa2>
 8004fa6:	2947      	cmp	r1, #71	; 0x47
 8004fa8:	d1bc      	bne.n	8004f24 <_printf_float+0xf0>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ba      	bne.n	8004f24 <_printf_float+0xf0>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e7b7      	b.n	8004f22 <_printf_float+0xee>
 8004fb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004fb6:	d118      	bne.n	8004fea <_printf_float+0x1b6>
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	dd0b      	ble.n	8004fd6 <_printf_float+0x1a2>
 8004fbe:	6121      	str	r1, [r4, #16]
 8004fc0:	b913      	cbnz	r3, 8004fc8 <_printf_float+0x194>
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	07d0      	lsls	r0, r2, #31
 8004fc6:	d502      	bpl.n	8004fce <_printf_float+0x19a>
 8004fc8:	3301      	adds	r3, #1
 8004fca:	440b      	add	r3, r1
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	f04f 0a00 	mov.w	sl, #0
 8004fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fd4:	e7df      	b.n	8004f96 <_printf_float+0x162>
 8004fd6:	b913      	cbnz	r3, 8004fde <_printf_float+0x1aa>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	07d2      	lsls	r2, r2, #31
 8004fdc:	d501      	bpl.n	8004fe2 <_printf_float+0x1ae>
 8004fde:	3302      	adds	r3, #2
 8004fe0:	e7f4      	b.n	8004fcc <_printf_float+0x198>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e7f2      	b.n	8004fcc <_printf_float+0x198>
 8004fe6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fec:	4299      	cmp	r1, r3
 8004fee:	db05      	blt.n	8004ffc <_printf_float+0x1c8>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	6121      	str	r1, [r4, #16]
 8004ff4:	07d8      	lsls	r0, r3, #31
 8004ff6:	d5ea      	bpl.n	8004fce <_printf_float+0x19a>
 8004ff8:	1c4b      	adds	r3, r1, #1
 8004ffa:	e7e7      	b.n	8004fcc <_printf_float+0x198>
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	bfcc      	ite	gt
 8005000:	2201      	movgt	r2, #1
 8005002:	f1c1 0202 	rsble	r2, r1, #2
 8005006:	4413      	add	r3, r2
 8005008:	e7e0      	b.n	8004fcc <_printf_float+0x198>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	055a      	lsls	r2, r3, #21
 800500e:	d407      	bmi.n	8005020 <_printf_float+0x1ec>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	4642      	mov	r2, r8
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	d12b      	bne.n	8005076 <_printf_float+0x242>
 800501e:	e764      	b.n	8004eea <_printf_float+0xb6>
 8005020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005024:	f240 80dd 	bls.w	80051e2 <_printf_float+0x3ae>
 8005028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800502c:	2200      	movs	r2, #0
 800502e:	2300      	movs	r3, #0
 8005030:	f7fb fcba 	bl	80009a8 <__aeabi_dcmpeq>
 8005034:	2800      	cmp	r0, #0
 8005036:	d033      	beq.n	80050a0 <_printf_float+0x26c>
 8005038:	2301      	movs	r3, #1
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	4a35      	ldr	r2, [pc, #212]	; (8005114 <_printf_float+0x2e0>)
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	f43f af51 	beq.w	8004eea <_printf_float+0xb6>
 8005048:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800504c:	429a      	cmp	r2, r3
 800504e:	db02      	blt.n	8005056 <_printf_float+0x222>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07d8      	lsls	r0, r3, #31
 8005054:	d50f      	bpl.n	8005076 <_printf_float+0x242>
 8005056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f af42 	beq.w	8004eea <_printf_float+0xb6>
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	f104 091a 	add.w	r9, r4, #26
 800506e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005070:	3b01      	subs	r3, #1
 8005072:	4543      	cmp	r3, r8
 8005074:	dc09      	bgt.n	800508a <_printf_float+0x256>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	079b      	lsls	r3, r3, #30
 800507a:	f100 8102 	bmi.w	8005282 <_printf_float+0x44e>
 800507e:	68e0      	ldr	r0, [r4, #12]
 8005080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005082:	4298      	cmp	r0, r3
 8005084:	bfb8      	it	lt
 8005086:	4618      	movlt	r0, r3
 8005088:	e731      	b.n	8004eee <_printf_float+0xba>
 800508a:	2301      	movs	r3, #1
 800508c:	464a      	mov	r2, r9
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f af28 	beq.w	8004eea <_printf_float+0xb6>
 800509a:	f108 0801 	add.w	r8, r8, #1
 800509e:	e7e6      	b.n	800506e <_printf_float+0x23a>
 80050a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dc38      	bgt.n	8005118 <_printf_float+0x2e4>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <_printf_float+0x2e0>)
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	f43f af1a 	beq.w	8004eea <_printf_float+0xb6>
 80050b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d102      	bne.n	80050c4 <_printf_float+0x290>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	07d9      	lsls	r1, r3, #31
 80050c2:	d5d8      	bpl.n	8005076 <_printf_float+0x242>
 80050c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af0b 	beq.w	8004eea <_printf_float+0xb6>
 80050d4:	f04f 0900 	mov.w	r9, #0
 80050d8:	f104 0a1a 	add.w	sl, r4, #26
 80050dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050de:	425b      	negs	r3, r3
 80050e0:	454b      	cmp	r3, r9
 80050e2:	dc01      	bgt.n	80050e8 <_printf_float+0x2b4>
 80050e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050e6:	e794      	b.n	8005012 <_printf_float+0x1de>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4652      	mov	r2, sl
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f aef9 	beq.w	8004eea <_printf_float+0xb6>
 80050f8:	f109 0901 	add.w	r9, r9, #1
 80050fc:	e7ee      	b.n	80050dc <_printf_float+0x2a8>
 80050fe:	bf00      	nop
 8005100:	7fefffff 	.word	0x7fefffff
 8005104:	08007b04 	.word	0x08007b04
 8005108:	08007b08 	.word	0x08007b08
 800510c:	08007b10 	.word	0x08007b10
 8005110:	08007b0c 	.word	0x08007b0c
 8005114:	08007b14 	.word	0x08007b14
 8005118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800511a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800511c:	429a      	cmp	r2, r3
 800511e:	bfa8      	it	ge
 8005120:	461a      	movge	r2, r3
 8005122:	2a00      	cmp	r2, #0
 8005124:	4691      	mov	r9, r2
 8005126:	dc37      	bgt.n	8005198 <_printf_float+0x364>
 8005128:	f04f 0b00 	mov.w	fp, #0
 800512c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005130:	f104 021a 	add.w	r2, r4, #26
 8005134:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005138:	ebaa 0309 	sub.w	r3, sl, r9
 800513c:	455b      	cmp	r3, fp
 800513e:	dc33      	bgt.n	80051a8 <_printf_float+0x374>
 8005140:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005144:	429a      	cmp	r2, r3
 8005146:	db3b      	blt.n	80051c0 <_printf_float+0x38c>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07da      	lsls	r2, r3, #31
 800514c:	d438      	bmi.n	80051c0 <_printf_float+0x38c>
 800514e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005152:	eba3 020a 	sub.w	r2, r3, sl
 8005156:	eba3 0901 	sub.w	r9, r3, r1
 800515a:	4591      	cmp	r9, r2
 800515c:	bfa8      	it	ge
 800515e:	4691      	movge	r9, r2
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	dc34      	bgt.n	80051d0 <_printf_float+0x39c>
 8005166:	f04f 0800 	mov.w	r8, #0
 800516a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800516e:	f104 0a1a 	add.w	sl, r4, #26
 8005172:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	eba3 0309 	sub.w	r3, r3, r9
 800517c:	4543      	cmp	r3, r8
 800517e:	f77f af7a 	ble.w	8005076 <_printf_float+0x242>
 8005182:	2301      	movs	r3, #1
 8005184:	4652      	mov	r2, sl
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f aeac 	beq.w	8004eea <_printf_float+0xb6>
 8005192:	f108 0801 	add.w	r8, r8, #1
 8005196:	e7ec      	b.n	8005172 <_printf_float+0x33e>
 8005198:	4613      	mov	r3, r2
 800519a:	4631      	mov	r1, r6
 800519c:	4642      	mov	r2, r8
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	d1c0      	bne.n	8005128 <_printf_float+0x2f4>
 80051a6:	e6a0      	b.n	8004eea <_printf_float+0xb6>
 80051a8:	2301      	movs	r3, #1
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f ae99 	beq.w	8004eea <_printf_float+0xb6>
 80051b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051ba:	f10b 0b01 	add.w	fp, fp, #1
 80051be:	e7b9      	b.n	8005134 <_printf_float+0x300>
 80051c0:	4631      	mov	r1, r6
 80051c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	d1bf      	bne.n	800514e <_printf_float+0x31a>
 80051ce:	e68c      	b.n	8004eea <_printf_float+0xb6>
 80051d0:	464b      	mov	r3, r9
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	eb08 020a 	add.w	r2, r8, sl
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	d1c2      	bne.n	8005166 <_printf_float+0x332>
 80051e0:	e683      	b.n	8004eea <_printf_float+0xb6>
 80051e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051e4:	2a01      	cmp	r2, #1
 80051e6:	dc01      	bgt.n	80051ec <_printf_float+0x3b8>
 80051e8:	07db      	lsls	r3, r3, #31
 80051ea:	d537      	bpl.n	800525c <_printf_float+0x428>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4642      	mov	r2, r8
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f ae77 	beq.w	8004eea <_printf_float+0xb6>
 80051fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f ae6f 	beq.w	8004eea <_printf_float+0xb6>
 800520c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	f7fb fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005218:	b9d8      	cbnz	r0, 8005252 <_printf_float+0x41e>
 800521a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521c:	f108 0201 	add.w	r2, r8, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	4631      	mov	r1, r6
 8005224:	4628      	mov	r0, r5
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	d10e      	bne.n	800524a <_printf_float+0x416>
 800522c:	e65d      	b.n	8004eea <_printf_float+0xb6>
 800522e:	2301      	movs	r3, #1
 8005230:	464a      	mov	r2, r9
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f ae56 	beq.w	8004eea <_printf_float+0xb6>
 800523e:	f108 0801 	add.w	r8, r8, #1
 8005242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005244:	3b01      	subs	r3, #1
 8005246:	4543      	cmp	r3, r8
 8005248:	dcf1      	bgt.n	800522e <_printf_float+0x3fa>
 800524a:	4653      	mov	r3, sl
 800524c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005250:	e6e0      	b.n	8005014 <_printf_float+0x1e0>
 8005252:	f04f 0800 	mov.w	r8, #0
 8005256:	f104 091a 	add.w	r9, r4, #26
 800525a:	e7f2      	b.n	8005242 <_printf_float+0x40e>
 800525c:	2301      	movs	r3, #1
 800525e:	4642      	mov	r2, r8
 8005260:	e7df      	b.n	8005222 <_printf_float+0x3ee>
 8005262:	2301      	movs	r3, #1
 8005264:	464a      	mov	r2, r9
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f ae3c 	beq.w	8004eea <_printf_float+0xb6>
 8005272:	f108 0801 	add.w	r8, r8, #1
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800527a:	1a5b      	subs	r3, r3, r1
 800527c:	4543      	cmp	r3, r8
 800527e:	dcf0      	bgt.n	8005262 <_printf_float+0x42e>
 8005280:	e6fd      	b.n	800507e <_printf_float+0x24a>
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	f104 0919 	add.w	r9, r4, #25
 800528a:	e7f4      	b.n	8005276 <_printf_float+0x442>

0800528c <_printf_common>:
 800528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	4616      	mov	r6, r2
 8005292:	4699      	mov	r9, r3
 8005294:	688a      	ldr	r2, [r1, #8]
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4607      	mov	r7, r0
 800529a:	4293      	cmp	r3, r2
 800529c:	bfb8      	it	lt
 800529e:	4613      	movlt	r3, r2
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a6:	460c      	mov	r4, r1
 80052a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052ac:	b10a      	cbz	r2, 80052b2 <_printf_common+0x26>
 80052ae:	3301      	adds	r3, #1
 80052b0:	6033      	str	r3, [r6, #0]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	0699      	lsls	r1, r3, #26
 80052b6:	bf42      	ittt	mi
 80052b8:	6833      	ldrmi	r3, [r6, #0]
 80052ba:	3302      	addmi	r3, #2
 80052bc:	6033      	strmi	r3, [r6, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	f015 0506 	ands.w	r5, r5, #6
 80052c4:	d106      	bne.n	80052d4 <_printf_common+0x48>
 80052c6:	f104 0a19 	add.w	sl, r4, #25
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	6832      	ldr	r2, [r6, #0]
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	dc28      	bgt.n	8005326 <_printf_common+0x9a>
 80052d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d8:	1e13      	subs	r3, r2, #0
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	bf18      	it	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	0692      	lsls	r2, r2, #26
 80052e2:	d42d      	bmi.n	8005340 <_printf_common+0xb4>
 80052e4:	4649      	mov	r1, r9
 80052e6:	4638      	mov	r0, r7
 80052e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ec:	47c0      	blx	r8
 80052ee:	3001      	adds	r0, #1
 80052f0:	d020      	beq.n	8005334 <_printf_common+0xa8>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	68e5      	ldr	r5, [r4, #12]
 80052f6:	f003 0306 	and.w	r3, r3, #6
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf18      	it	ne
 80052fe:	2500      	movne	r5, #0
 8005300:	6832      	ldr	r2, [r6, #0]
 8005302:	f04f 0600 	mov.w	r6, #0
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	bf08      	it	eq
 800530a:	1aad      	subeq	r5, r5, r2
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	bf08      	it	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	4293      	cmp	r3, r2
 8005316:	bfc4      	itt	gt
 8005318:	1a9b      	subgt	r3, r3, r2
 800531a:	18ed      	addgt	r5, r5, r3
 800531c:	341a      	adds	r4, #26
 800531e:	42b5      	cmp	r5, r6
 8005320:	d11a      	bne.n	8005358 <_printf_common+0xcc>
 8005322:	2000      	movs	r0, #0
 8005324:	e008      	b.n	8005338 <_printf_common+0xac>
 8005326:	2301      	movs	r3, #1
 8005328:	4652      	mov	r2, sl
 800532a:	4649      	mov	r1, r9
 800532c:	4638      	mov	r0, r7
 800532e:	47c0      	blx	r8
 8005330:	3001      	adds	r0, #1
 8005332:	d103      	bne.n	800533c <_printf_common+0xb0>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533c:	3501      	adds	r5, #1
 800533e:	e7c4      	b.n	80052ca <_printf_common+0x3e>
 8005340:	2030      	movs	r0, #48	; 0x30
 8005342:	18e1      	adds	r1, r4, r3
 8005344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800534e:	4422      	add	r2, r4
 8005350:	3302      	adds	r3, #2
 8005352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005356:	e7c5      	b.n	80052e4 <_printf_common+0x58>
 8005358:	2301      	movs	r3, #1
 800535a:	4622      	mov	r2, r4
 800535c:	4649      	mov	r1, r9
 800535e:	4638      	mov	r0, r7
 8005360:	47c0      	blx	r8
 8005362:	3001      	adds	r0, #1
 8005364:	d0e6      	beq.n	8005334 <_printf_common+0xa8>
 8005366:	3601      	adds	r6, #1
 8005368:	e7d9      	b.n	800531e <_printf_common+0x92>
	...

0800536c <_printf_i>:
 800536c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	7e0f      	ldrb	r7, [r1, #24]
 8005372:	4691      	mov	r9, r2
 8005374:	2f78      	cmp	r7, #120	; 0x78
 8005376:	4680      	mov	r8, r0
 8005378:	460c      	mov	r4, r1
 800537a:	469a      	mov	sl, r3
 800537c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800537e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005382:	d807      	bhi.n	8005394 <_printf_i+0x28>
 8005384:	2f62      	cmp	r7, #98	; 0x62
 8005386:	d80a      	bhi.n	800539e <_printf_i+0x32>
 8005388:	2f00      	cmp	r7, #0
 800538a:	f000 80d9 	beq.w	8005540 <_printf_i+0x1d4>
 800538e:	2f58      	cmp	r7, #88	; 0x58
 8005390:	f000 80a4 	beq.w	80054dc <_printf_i+0x170>
 8005394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800539c:	e03a      	b.n	8005414 <_printf_i+0xa8>
 800539e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053a2:	2b15      	cmp	r3, #21
 80053a4:	d8f6      	bhi.n	8005394 <_printf_i+0x28>
 80053a6:	a101      	add	r1, pc, #4	; (adr r1, 80053ac <_printf_i+0x40>)
 80053a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005395 	.word	0x08005395
 80053b8:	08005395 	.word	0x08005395
 80053bc:	08005395 	.word	0x08005395
 80053c0:	08005395 	.word	0x08005395
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005395 	.word	0x08005395
 80053cc:	08005395 	.word	0x08005395
 80053d0:	08005395 	.word	0x08005395
 80053d4:	08005395 	.word	0x08005395
 80053d8:	08005527 	.word	0x08005527
 80053dc:	08005449 	.word	0x08005449
 80053e0:	08005509 	.word	0x08005509
 80053e4:	08005395 	.word	0x08005395
 80053e8:	08005395 	.word	0x08005395
 80053ec:	08005549 	.word	0x08005549
 80053f0:	08005395 	.word	0x08005395
 80053f4:	08005449 	.word	0x08005449
 80053f8:	08005395 	.word	0x08005395
 80053fc:	08005395 	.word	0x08005395
 8005400:	08005511 	.word	0x08005511
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	602a      	str	r2, [r5, #0]
 800540c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005414:	2301      	movs	r3, #1
 8005416:	e0a4      	b.n	8005562 <_printf_i+0x1f6>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	6829      	ldr	r1, [r5, #0]
 800541c:	0606      	lsls	r6, r0, #24
 800541e:	f101 0304 	add.w	r3, r1, #4
 8005422:	d50a      	bpl.n	800543a <_printf_i+0xce>
 8005424:	680e      	ldr	r6, [r1, #0]
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	2e00      	cmp	r6, #0
 800542a:	da03      	bge.n	8005434 <_printf_i+0xc8>
 800542c:	232d      	movs	r3, #45	; 0x2d
 800542e:	4276      	negs	r6, r6
 8005430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005434:	230a      	movs	r3, #10
 8005436:	485e      	ldr	r0, [pc, #376]	; (80055b0 <_printf_i+0x244>)
 8005438:	e019      	b.n	800546e <_printf_i+0x102>
 800543a:	680e      	ldr	r6, [r1, #0]
 800543c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	bf18      	it	ne
 8005444:	b236      	sxthne	r6, r6
 8005446:	e7ef      	b.n	8005428 <_printf_i+0xbc>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	6029      	str	r1, [r5, #0]
 8005450:	0601      	lsls	r1, r0, #24
 8005452:	d501      	bpl.n	8005458 <_printf_i+0xec>
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	e002      	b.n	800545e <_printf_i+0xf2>
 8005458:	0646      	lsls	r6, r0, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0xe8>
 800545c:	881e      	ldrh	r6, [r3, #0]
 800545e:	2f6f      	cmp	r7, #111	; 0x6f
 8005460:	bf0c      	ite	eq
 8005462:	2308      	moveq	r3, #8
 8005464:	230a      	movne	r3, #10
 8005466:	4852      	ldr	r0, [pc, #328]	; (80055b0 <_printf_i+0x244>)
 8005468:	2100      	movs	r1, #0
 800546a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800546e:	6865      	ldr	r5, [r4, #4]
 8005470:	2d00      	cmp	r5, #0
 8005472:	bfa8      	it	ge
 8005474:	6821      	ldrge	r1, [r4, #0]
 8005476:	60a5      	str	r5, [r4, #8]
 8005478:	bfa4      	itt	ge
 800547a:	f021 0104 	bicge.w	r1, r1, #4
 800547e:	6021      	strge	r1, [r4, #0]
 8005480:	b90e      	cbnz	r6, 8005486 <_printf_i+0x11a>
 8005482:	2d00      	cmp	r5, #0
 8005484:	d04d      	beq.n	8005522 <_printf_i+0x1b6>
 8005486:	4615      	mov	r5, r2
 8005488:	fbb6 f1f3 	udiv	r1, r6, r3
 800548c:	fb03 6711 	mls	r7, r3, r1, r6
 8005490:	5dc7      	ldrb	r7, [r0, r7]
 8005492:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005496:	4637      	mov	r7, r6
 8005498:	42bb      	cmp	r3, r7
 800549a:	460e      	mov	r6, r1
 800549c:	d9f4      	bls.n	8005488 <_printf_i+0x11c>
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d10b      	bne.n	80054ba <_printf_i+0x14e>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	07de      	lsls	r6, r3, #31
 80054a6:	d508      	bpl.n	80054ba <_printf_i+0x14e>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	6861      	ldr	r1, [r4, #4]
 80054ac:	4299      	cmp	r1, r3
 80054ae:	bfde      	ittt	le
 80054b0:	2330      	movle	r3, #48	; 0x30
 80054b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ba:	1b52      	subs	r2, r2, r5
 80054bc:	6122      	str	r2, [r4, #16]
 80054be:	464b      	mov	r3, r9
 80054c0:	4621      	mov	r1, r4
 80054c2:	4640      	mov	r0, r8
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	aa03      	add	r2, sp, #12
 80054ca:	f7ff fedf 	bl	800528c <_printf_common>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d14c      	bne.n	800556c <_printf_i+0x200>
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	b004      	add	sp, #16
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	4834      	ldr	r0, [pc, #208]	; (80055b0 <_printf_i+0x244>)
 80054de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054e2:	6829      	ldr	r1, [r5, #0]
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80054ea:	6029      	str	r1, [r5, #0]
 80054ec:	061d      	lsls	r5, r3, #24
 80054ee:	d514      	bpl.n	800551a <_printf_i+0x1ae>
 80054f0:	07df      	lsls	r7, r3, #31
 80054f2:	bf44      	itt	mi
 80054f4:	f043 0320 	orrmi.w	r3, r3, #32
 80054f8:	6023      	strmi	r3, [r4, #0]
 80054fa:	b91e      	cbnz	r6, 8005504 <_printf_i+0x198>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	f023 0320 	bic.w	r3, r3, #32
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	2310      	movs	r3, #16
 8005506:	e7af      	b.n	8005468 <_printf_i+0xfc>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	f043 0320 	orr.w	r3, r3, #32
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	2378      	movs	r3, #120	; 0x78
 8005512:	4828      	ldr	r0, [pc, #160]	; (80055b4 <_printf_i+0x248>)
 8005514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005518:	e7e3      	b.n	80054e2 <_printf_i+0x176>
 800551a:	0659      	lsls	r1, r3, #25
 800551c:	bf48      	it	mi
 800551e:	b2b6      	uxthmi	r6, r6
 8005520:	e7e6      	b.n	80054f0 <_printf_i+0x184>
 8005522:	4615      	mov	r5, r2
 8005524:	e7bb      	b.n	800549e <_printf_i+0x132>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	6826      	ldr	r6, [r4, #0]
 800552a:	1d18      	adds	r0, r3, #4
 800552c:	6961      	ldr	r1, [r4, #20]
 800552e:	6028      	str	r0, [r5, #0]
 8005530:	0635      	lsls	r5, r6, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	d501      	bpl.n	800553a <_printf_i+0x1ce>
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	e002      	b.n	8005540 <_printf_i+0x1d4>
 800553a:	0670      	lsls	r0, r6, #25
 800553c:	d5fb      	bpl.n	8005536 <_printf_i+0x1ca>
 800553e:	8019      	strh	r1, [r3, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	4615      	mov	r5, r2
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	e7ba      	b.n	80054be <_printf_i+0x152>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	2100      	movs	r1, #0
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	602a      	str	r2, [r5, #0]
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	4628      	mov	r0, r5
 8005556:	f000 fed5 	bl	8006304 <memchr>
 800555a:	b108      	cbz	r0, 8005560 <_printf_i+0x1f4>
 800555c:	1b40      	subs	r0, r0, r5
 800555e:	6060      	str	r0, [r4, #4]
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556a:	e7a8      	b.n	80054be <_printf_i+0x152>
 800556c:	462a      	mov	r2, r5
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	47d0      	blx	sl
 8005576:	3001      	adds	r0, #1
 8005578:	d0ab      	beq.n	80054d2 <_printf_i+0x166>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	079b      	lsls	r3, r3, #30
 800557e:	d413      	bmi.n	80055a8 <_printf_i+0x23c>
 8005580:	68e0      	ldr	r0, [r4, #12]
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	4298      	cmp	r0, r3
 8005586:	bfb8      	it	lt
 8005588:	4618      	movlt	r0, r3
 800558a:	e7a4      	b.n	80054d6 <_printf_i+0x16a>
 800558c:	2301      	movs	r3, #1
 800558e:	4632      	mov	r2, r6
 8005590:	4649      	mov	r1, r9
 8005592:	4640      	mov	r0, r8
 8005594:	47d0      	blx	sl
 8005596:	3001      	adds	r0, #1
 8005598:	d09b      	beq.n	80054d2 <_printf_i+0x166>
 800559a:	3501      	adds	r5, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	9903      	ldr	r1, [sp, #12]
 80055a0:	1a5b      	subs	r3, r3, r1
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	dcf2      	bgt.n	800558c <_printf_i+0x220>
 80055a6:	e7eb      	b.n	8005580 <_printf_i+0x214>
 80055a8:	2500      	movs	r5, #0
 80055aa:	f104 0619 	add.w	r6, r4, #25
 80055ae:	e7f5      	b.n	800559c <_printf_i+0x230>
 80055b0:	08007b16 	.word	0x08007b16
 80055b4:	08007b27 	.word	0x08007b27

080055b8 <siprintf>:
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055be:	b500      	push	{lr}
 80055c0:	b09c      	sub	sp, #112	; 0x70
 80055c2:	ab1d      	add	r3, sp, #116	; 0x74
 80055c4:	9002      	str	r0, [sp, #8]
 80055c6:	9006      	str	r0, [sp, #24]
 80055c8:	9107      	str	r1, [sp, #28]
 80055ca:	9104      	str	r1, [sp, #16]
 80055cc:	4808      	ldr	r0, [pc, #32]	; (80055f0 <siprintf+0x38>)
 80055ce:	4909      	ldr	r1, [pc, #36]	; (80055f4 <siprintf+0x3c>)
 80055d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d4:	9105      	str	r1, [sp, #20]
 80055d6:	6800      	ldr	r0, [r0, #0]
 80055d8:	a902      	add	r1, sp, #8
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	f001 fb7c 	bl	8006cd8 <_svfiprintf_r>
 80055e0:	2200      	movs	r2, #0
 80055e2:	9b02      	ldr	r3, [sp, #8]
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	b01c      	add	sp, #112	; 0x70
 80055e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055ec:	b003      	add	sp, #12
 80055ee:	4770      	bx	lr
 80055f0:	20000040 	.word	0x20000040
 80055f4:	ffff0208 	.word	0xffff0208

080055f8 <quorem>:
 80055f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	6903      	ldr	r3, [r0, #16]
 80055fe:	690c      	ldr	r4, [r1, #16]
 8005600:	4607      	mov	r7, r0
 8005602:	42a3      	cmp	r3, r4
 8005604:	f2c0 8082 	blt.w	800570c <quorem+0x114>
 8005608:	3c01      	subs	r4, #1
 800560a:	f100 0514 	add.w	r5, r0, #20
 800560e:	f101 0814 	add.w	r8, r1, #20
 8005612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800561c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005620:	3301      	adds	r3, #1
 8005622:	429a      	cmp	r2, r3
 8005624:	fbb2 f6f3 	udiv	r6, r2, r3
 8005628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800562c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005630:	d331      	bcc.n	8005696 <quorem+0x9e>
 8005632:	f04f 0e00 	mov.w	lr, #0
 8005636:	4640      	mov	r0, r8
 8005638:	46ac      	mov	ip, r5
 800563a:	46f2      	mov	sl, lr
 800563c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005640:	b293      	uxth	r3, r2
 8005642:	fb06 e303 	mla	r3, r6, r3, lr
 8005646:	0c12      	lsrs	r2, r2, #16
 8005648:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800564c:	b29b      	uxth	r3, r3
 800564e:	fb06 e202 	mla	r2, r6, r2, lr
 8005652:	ebaa 0303 	sub.w	r3, sl, r3
 8005656:	f8dc a000 	ldr.w	sl, [ip]
 800565a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800565e:	fa1f fa8a 	uxth.w	sl, sl
 8005662:	4453      	add	r3, sl
 8005664:	f8dc a000 	ldr.w	sl, [ip]
 8005668:	b292      	uxth	r2, r2
 800566a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800566e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005678:	4581      	cmp	r9, r0
 800567a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800567e:	f84c 3b04 	str.w	r3, [ip], #4
 8005682:	d2db      	bcs.n	800563c <quorem+0x44>
 8005684:	f855 300b 	ldr.w	r3, [r5, fp]
 8005688:	b92b      	cbnz	r3, 8005696 <quorem+0x9e>
 800568a:	9b01      	ldr	r3, [sp, #4]
 800568c:	3b04      	subs	r3, #4
 800568e:	429d      	cmp	r5, r3
 8005690:	461a      	mov	r2, r3
 8005692:	d32f      	bcc.n	80056f4 <quorem+0xfc>
 8005694:	613c      	str	r4, [r7, #16]
 8005696:	4638      	mov	r0, r7
 8005698:	f001 f8ce 	bl	8006838 <__mcmp>
 800569c:	2800      	cmp	r0, #0
 800569e:	db25      	blt.n	80056ec <quorem+0xf4>
 80056a0:	4628      	mov	r0, r5
 80056a2:	f04f 0c00 	mov.w	ip, #0
 80056a6:	3601      	adds	r6, #1
 80056a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80056ac:	f8d0 e000 	ldr.w	lr, [r0]
 80056b0:	b28b      	uxth	r3, r1
 80056b2:	ebac 0303 	sub.w	r3, ip, r3
 80056b6:	fa1f f28e 	uxth.w	r2, lr
 80056ba:	4413      	add	r3, r2
 80056bc:	0c0a      	lsrs	r2, r1, #16
 80056be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056cc:	45c1      	cmp	r9, r8
 80056ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056d2:	f840 3b04 	str.w	r3, [r0], #4
 80056d6:	d2e7      	bcs.n	80056a8 <quorem+0xb0>
 80056d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056e0:	b922      	cbnz	r2, 80056ec <quorem+0xf4>
 80056e2:	3b04      	subs	r3, #4
 80056e4:	429d      	cmp	r5, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	d30a      	bcc.n	8005700 <quorem+0x108>
 80056ea:	613c      	str	r4, [r7, #16]
 80056ec:	4630      	mov	r0, r6
 80056ee:	b003      	add	sp, #12
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	3b04      	subs	r3, #4
 80056f8:	2a00      	cmp	r2, #0
 80056fa:	d1cb      	bne.n	8005694 <quorem+0x9c>
 80056fc:	3c01      	subs	r4, #1
 80056fe:	e7c6      	b.n	800568e <quorem+0x96>
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	3b04      	subs	r3, #4
 8005704:	2a00      	cmp	r2, #0
 8005706:	d1f0      	bne.n	80056ea <quorem+0xf2>
 8005708:	3c01      	subs	r4, #1
 800570a:	e7eb      	b.n	80056e4 <quorem+0xec>
 800570c:	2000      	movs	r0, #0
 800570e:	e7ee      	b.n	80056ee <quorem+0xf6>

08005710 <_dtoa_r>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	4616      	mov	r6, r2
 8005716:	461f      	mov	r7, r3
 8005718:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800571a:	b099      	sub	sp, #100	; 0x64
 800571c:	4605      	mov	r5, r0
 800571e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005722:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005726:	b974      	cbnz	r4, 8005746 <_dtoa_r+0x36>
 8005728:	2010      	movs	r0, #16
 800572a:	f000 fde3 	bl	80062f4 <malloc>
 800572e:	4602      	mov	r2, r0
 8005730:	6268      	str	r0, [r5, #36]	; 0x24
 8005732:	b920      	cbnz	r0, 800573e <_dtoa_r+0x2e>
 8005734:	21ea      	movs	r1, #234	; 0xea
 8005736:	4ba8      	ldr	r3, [pc, #672]	; (80059d8 <_dtoa_r+0x2c8>)
 8005738:	48a8      	ldr	r0, [pc, #672]	; (80059dc <_dtoa_r+0x2cc>)
 800573a:	f001 fbdd 	bl	8006ef8 <__assert_func>
 800573e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005742:	6004      	str	r4, [r0, #0]
 8005744:	60c4      	str	r4, [r0, #12]
 8005746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	b151      	cbz	r1, 8005762 <_dtoa_r+0x52>
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	2301      	movs	r3, #1
 8005750:	4093      	lsls	r3, r2
 8005752:	604a      	str	r2, [r1, #4]
 8005754:	608b      	str	r3, [r1, #8]
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fe30 	bl	80063bc <_Bfree>
 800575c:	2200      	movs	r2, #0
 800575e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	1e3b      	subs	r3, r7, #0
 8005764:	bfaf      	iteee	ge
 8005766:	2300      	movge	r3, #0
 8005768:	2201      	movlt	r2, #1
 800576a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800576e:	9305      	strlt	r3, [sp, #20]
 8005770:	bfa8      	it	ge
 8005772:	f8c8 3000 	strge.w	r3, [r8]
 8005776:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800577a:	4b99      	ldr	r3, [pc, #612]	; (80059e0 <_dtoa_r+0x2d0>)
 800577c:	bfb8      	it	lt
 800577e:	f8c8 2000 	strlt.w	r2, [r8]
 8005782:	ea33 0309 	bics.w	r3, r3, r9
 8005786:	d119      	bne.n	80057bc <_dtoa_r+0xac>
 8005788:	f242 730f 	movw	r3, #9999	; 0x270f
 800578c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005794:	4333      	orrs	r3, r6
 8005796:	f000 857f 	beq.w	8006298 <_dtoa_r+0xb88>
 800579a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800579c:	b953      	cbnz	r3, 80057b4 <_dtoa_r+0xa4>
 800579e:	4b91      	ldr	r3, [pc, #580]	; (80059e4 <_dtoa_r+0x2d4>)
 80057a0:	e022      	b.n	80057e8 <_dtoa_r+0xd8>
 80057a2:	4b91      	ldr	r3, [pc, #580]	; (80059e8 <_dtoa_r+0x2d8>)
 80057a4:	9303      	str	r3, [sp, #12]
 80057a6:	3308      	adds	r3, #8
 80057a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	9803      	ldr	r0, [sp, #12]
 80057ae:	b019      	add	sp, #100	; 0x64
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	4b8b      	ldr	r3, [pc, #556]	; (80059e4 <_dtoa_r+0x2d4>)
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	3303      	adds	r3, #3
 80057ba:	e7f5      	b.n	80057a8 <_dtoa_r+0x98>
 80057bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80057c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c8:	2200      	movs	r2, #0
 80057ca:	2300      	movs	r3, #0
 80057cc:	f7fb f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80057d0:	4680      	mov	r8, r0
 80057d2:	b158      	cbz	r0, 80057ec <_dtoa_r+0xdc>
 80057d4:	2301      	movs	r3, #1
 80057d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8558 	beq.w	8006292 <_dtoa_r+0xb82>
 80057e2:	4882      	ldr	r0, [pc, #520]	; (80059ec <_dtoa_r+0x2dc>)
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	1e43      	subs	r3, r0, #1
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	e7df      	b.n	80057ac <_dtoa_r+0x9c>
 80057ec:	ab16      	add	r3, sp, #88	; 0x58
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	ab17      	add	r3, sp, #92	; 0x5c
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	4628      	mov	r0, r5
 80057f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057fa:	f001 f8c5 	bl	8006988 <__d2b>
 80057fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005802:	4683      	mov	fp, r0
 8005804:	2c00      	cmp	r4, #0
 8005806:	d07f      	beq.n	8005908 <_dtoa_r+0x1f8>
 8005808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800580c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005816:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800581a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800581e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005822:	2200      	movs	r2, #0
 8005824:	4b72      	ldr	r3, [pc, #456]	; (80059f0 <_dtoa_r+0x2e0>)
 8005826:	f7fa fc9f 	bl	8000168 <__aeabi_dsub>
 800582a:	a365      	add	r3, pc, #404	; (adr r3, 80059c0 <_dtoa_r+0x2b0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fe52 	bl	80004d8 <__aeabi_dmul>
 8005834:	a364      	add	r3, pc, #400	; (adr r3, 80059c8 <_dtoa_r+0x2b8>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fc97 	bl	800016c <__adddf3>
 800583e:	4606      	mov	r6, r0
 8005840:	4620      	mov	r0, r4
 8005842:	460f      	mov	r7, r1
 8005844:	f7fa fdde 	bl	8000404 <__aeabi_i2d>
 8005848:	a361      	add	r3, pc, #388	; (adr r3, 80059d0 <_dtoa_r+0x2c0>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fe43 	bl	80004d8 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4630      	mov	r0, r6
 8005858:	4639      	mov	r1, r7
 800585a:	f7fa fc87 	bl	800016c <__adddf3>
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
 8005862:	f7fb f8e9 	bl	8000a38 <__aeabi_d2iz>
 8005866:	2200      	movs	r2, #0
 8005868:	4682      	mov	sl, r0
 800586a:	2300      	movs	r3, #0
 800586c:	4630      	mov	r0, r6
 800586e:	4639      	mov	r1, r7
 8005870:	f7fb f8a4 	bl	80009bc <__aeabi_dcmplt>
 8005874:	b148      	cbz	r0, 800588a <_dtoa_r+0x17a>
 8005876:	4650      	mov	r0, sl
 8005878:	f7fa fdc4 	bl	8000404 <__aeabi_i2d>
 800587c:	4632      	mov	r2, r6
 800587e:	463b      	mov	r3, r7
 8005880:	f7fb f892 	bl	80009a8 <__aeabi_dcmpeq>
 8005884:	b908      	cbnz	r0, 800588a <_dtoa_r+0x17a>
 8005886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800588a:	f1ba 0f16 	cmp.w	sl, #22
 800588e:	d858      	bhi.n	8005942 <_dtoa_r+0x232>
 8005890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005894:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <_dtoa_r+0x2e4>)
 8005896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fb f88d 	bl	80009bc <__aeabi_dcmplt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d04f      	beq.n	8005946 <_dtoa_r+0x236>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058b0:	1b1c      	subs	r4, r3, r4
 80058b2:	1e63      	subs	r3, r4, #1
 80058b4:	9309      	str	r3, [sp, #36]	; 0x24
 80058b6:	bf49      	itett	mi
 80058b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80058bc:	2300      	movpl	r3, #0
 80058be:	9306      	strmi	r3, [sp, #24]
 80058c0:	2300      	movmi	r3, #0
 80058c2:	bf54      	ite	pl
 80058c4:	9306      	strpl	r3, [sp, #24]
 80058c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80058c8:	f1ba 0f00 	cmp.w	sl, #0
 80058cc:	db3d      	blt.n	800594a <_dtoa_r+0x23a>
 80058ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80058d4:	4453      	add	r3, sl
 80058d6:	9309      	str	r3, [sp, #36]	; 0x24
 80058d8:	2300      	movs	r3, #0
 80058da:	930a      	str	r3, [sp, #40]	; 0x28
 80058dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058de:	2b09      	cmp	r3, #9
 80058e0:	f200 808c 	bhi.w	80059fc <_dtoa_r+0x2ec>
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	bfc4      	itt	gt
 80058e8:	3b04      	subgt	r3, #4
 80058ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80058ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ee:	bfc8      	it	gt
 80058f0:	2400      	movgt	r4, #0
 80058f2:	f1a3 0302 	sub.w	r3, r3, #2
 80058f6:	bfd8      	it	le
 80058f8:	2401      	movle	r4, #1
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f200 808a 	bhi.w	8005a14 <_dtoa_r+0x304>
 8005900:	e8df f003 	tbb	[pc, r3]
 8005904:	5b4d4f2d 	.word	0x5b4d4f2d
 8005908:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800590c:	441c      	add	r4, r3
 800590e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005912:	2b20      	cmp	r3, #32
 8005914:	bfc3      	ittte	gt
 8005916:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800591a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800591e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005922:	f1c3 0320 	rsble	r3, r3, #32
 8005926:	bfc6      	itte	gt
 8005928:	fa26 f000 	lsrgt.w	r0, r6, r0
 800592c:	4318      	orrgt	r0, r3
 800592e:	fa06 f003 	lslle.w	r0, r6, r3
 8005932:	f7fa fd57 	bl	80003e4 <__aeabi_ui2d>
 8005936:	2301      	movs	r3, #1
 8005938:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800593c:	3c01      	subs	r4, #1
 800593e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005940:	e76f      	b.n	8005822 <_dtoa_r+0x112>
 8005942:	2301      	movs	r3, #1
 8005944:	e7b2      	b.n	80058ac <_dtoa_r+0x19c>
 8005946:	900f      	str	r0, [sp, #60]	; 0x3c
 8005948:	e7b1      	b.n	80058ae <_dtoa_r+0x19e>
 800594a:	9b06      	ldr	r3, [sp, #24]
 800594c:	eba3 030a 	sub.w	r3, r3, sl
 8005950:	9306      	str	r3, [sp, #24]
 8005952:	f1ca 0300 	rsb	r3, sl, #0
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	2300      	movs	r3, #0
 800595a:	930e      	str	r3, [sp, #56]	; 0x38
 800595c:	e7be      	b.n	80058dc <_dtoa_r+0x1cc>
 800595e:	2300      	movs	r3, #0
 8005960:	930b      	str	r3, [sp, #44]	; 0x2c
 8005962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005964:	2b00      	cmp	r3, #0
 8005966:	dc58      	bgt.n	8005a1a <_dtoa_r+0x30a>
 8005968:	f04f 0901 	mov.w	r9, #1
 800596c:	464b      	mov	r3, r9
 800596e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005972:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005976:	2200      	movs	r2, #0
 8005978:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800597a:	6042      	str	r2, [r0, #4]
 800597c:	2204      	movs	r2, #4
 800597e:	f102 0614 	add.w	r6, r2, #20
 8005982:	429e      	cmp	r6, r3
 8005984:	6841      	ldr	r1, [r0, #4]
 8005986:	d94e      	bls.n	8005a26 <_dtoa_r+0x316>
 8005988:	4628      	mov	r0, r5
 800598a:	f000 fcd7 	bl	800633c <_Balloc>
 800598e:	9003      	str	r0, [sp, #12]
 8005990:	2800      	cmp	r0, #0
 8005992:	d14c      	bne.n	8005a2e <_dtoa_r+0x31e>
 8005994:	4602      	mov	r2, r0
 8005996:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <_dtoa_r+0x2e8>)
 800599c:	e6cc      	b.n	8005738 <_dtoa_r+0x28>
 800599e:	2301      	movs	r3, #1
 80059a0:	e7de      	b.n	8005960 <_dtoa_r+0x250>
 80059a2:	2300      	movs	r3, #0
 80059a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80059a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059a8:	eb0a 0903 	add.w	r9, sl, r3
 80059ac:	f109 0301 	add.w	r3, r9, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	9308      	str	r3, [sp, #32]
 80059b4:	bfb8      	it	lt
 80059b6:	2301      	movlt	r3, #1
 80059b8:	e7dd      	b.n	8005976 <_dtoa_r+0x266>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7f2      	b.n	80059a4 <_dtoa_r+0x294>
 80059be:	bf00      	nop
 80059c0:	636f4361 	.word	0x636f4361
 80059c4:	3fd287a7 	.word	0x3fd287a7
 80059c8:	8b60c8b3 	.word	0x8b60c8b3
 80059cc:	3fc68a28 	.word	0x3fc68a28
 80059d0:	509f79fb 	.word	0x509f79fb
 80059d4:	3fd34413 	.word	0x3fd34413
 80059d8:	08007b45 	.word	0x08007b45
 80059dc:	08007b5c 	.word	0x08007b5c
 80059e0:	7ff00000 	.word	0x7ff00000
 80059e4:	08007b41 	.word	0x08007b41
 80059e8:	08007b38 	.word	0x08007b38
 80059ec:	08007b15 	.word	0x08007b15
 80059f0:	3ff80000 	.word	0x3ff80000
 80059f4:	08007c50 	.word	0x08007c50
 80059f8:	08007bb7 	.word	0x08007bb7
 80059fc:	2401      	movs	r4, #1
 80059fe:	2300      	movs	r3, #0
 8005a00:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a02:	9322      	str	r3, [sp, #136]	; 0x88
 8005a04:	f04f 39ff 	mov.w	r9, #4294967295
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2312      	movs	r3, #18
 8005a0c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a10:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a12:	e7b0      	b.n	8005976 <_dtoa_r+0x266>
 8005a14:	2301      	movs	r3, #1
 8005a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a18:	e7f4      	b.n	8005a04 <_dtoa_r+0x2f4>
 8005a1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005a1e:	464b      	mov	r3, r9
 8005a20:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a24:	e7a7      	b.n	8005976 <_dtoa_r+0x266>
 8005a26:	3101      	adds	r1, #1
 8005a28:	6041      	str	r1, [r0, #4]
 8005a2a:	0052      	lsls	r2, r2, #1
 8005a2c:	e7a7      	b.n	800597e <_dtoa_r+0x26e>
 8005a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a30:	9a03      	ldr	r2, [sp, #12]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	9b08      	ldr	r3, [sp, #32]
 8005a36:	2b0e      	cmp	r3, #14
 8005a38:	f200 80a8 	bhi.w	8005b8c <_dtoa_r+0x47c>
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	f000 80a5 	beq.w	8005b8c <_dtoa_r+0x47c>
 8005a42:	f1ba 0f00 	cmp.w	sl, #0
 8005a46:	dd34      	ble.n	8005ab2 <_dtoa_r+0x3a2>
 8005a48:	4a9a      	ldr	r2, [pc, #616]	; (8005cb4 <_dtoa_r+0x5a4>)
 8005a4a:	f00a 030f 	and.w	r3, sl, #15
 8005a4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a52:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005a62:	d016      	beq.n	8005a92 <_dtoa_r+0x382>
 8005a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a68:	4b93      	ldr	r3, [pc, #588]	; (8005cb8 <_dtoa_r+0x5a8>)
 8005a6a:	2703      	movs	r7, #3
 8005a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a70:	f7fa fe5c 	bl	800072c <__aeabi_ddiv>
 8005a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a78:	f004 040f 	and.w	r4, r4, #15
 8005a7c:	4e8e      	ldr	r6, [pc, #568]	; (8005cb8 <_dtoa_r+0x5a8>)
 8005a7e:	b954      	cbnz	r4, 8005a96 <_dtoa_r+0x386>
 8005a80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a88:	f7fa fe50 	bl	800072c <__aeabi_ddiv>
 8005a8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a90:	e029      	b.n	8005ae6 <_dtoa_r+0x3d6>
 8005a92:	2702      	movs	r7, #2
 8005a94:	e7f2      	b.n	8005a7c <_dtoa_r+0x36c>
 8005a96:	07e1      	lsls	r1, r4, #31
 8005a98:	d508      	bpl.n	8005aac <_dtoa_r+0x39c>
 8005a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aa2:	f7fa fd19 	bl	80004d8 <__aeabi_dmul>
 8005aa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aaa:	3701      	adds	r7, #1
 8005aac:	1064      	asrs	r4, r4, #1
 8005aae:	3608      	adds	r6, #8
 8005ab0:	e7e5      	b.n	8005a7e <_dtoa_r+0x36e>
 8005ab2:	f000 80a5 	beq.w	8005c00 <_dtoa_r+0x4f0>
 8005ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aba:	f1ca 0400 	rsb	r4, sl, #0
 8005abe:	4b7d      	ldr	r3, [pc, #500]	; (8005cb4 <_dtoa_r+0x5a4>)
 8005ac0:	f004 020f 	and.w	r2, r4, #15
 8005ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd04 	bl	80004d8 <__aeabi_dmul>
 8005ad0:	2702      	movs	r7, #2
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ad8:	4e77      	ldr	r6, [pc, #476]	; (8005cb8 <_dtoa_r+0x5a8>)
 8005ada:	1124      	asrs	r4, r4, #4
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	f040 8084 	bne.w	8005bea <_dtoa_r+0x4da>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1d2      	bne.n	8005a8c <_dtoa_r+0x37c>
 8005ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 808b 	beq.w	8005c04 <_dtoa_r+0x4f4>
 8005aee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005af2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005af6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b6f      	ldr	r3, [pc, #444]	; (8005cbc <_dtoa_r+0x5ac>)
 8005afe:	f7fa ff5d 	bl	80009bc <__aeabi_dcmplt>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d07e      	beq.n	8005c04 <_dtoa_r+0x4f4>
 8005b06:	9b08      	ldr	r3, [sp, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d07b      	beq.n	8005c04 <_dtoa_r+0x4f4>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	dd38      	ble.n	8005b84 <_dtoa_r+0x474>
 8005b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b16:	2200      	movs	r2, #0
 8005b18:	4b69      	ldr	r3, [pc, #420]	; (8005cc0 <_dtoa_r+0x5b0>)
 8005b1a:	f7fa fcdd 	bl	80004d8 <__aeabi_dmul>
 8005b1e:	464c      	mov	r4, r9
 8005b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b24:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005b28:	3701      	adds	r7, #1
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	f7fa fc6a 	bl	8000404 <__aeabi_i2d>
 8005b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b34:	f7fa fcd0 	bl	80004d8 <__aeabi_dmul>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <_dtoa_r+0x5b4>)
 8005b3c:	f7fa fb16 	bl	800016c <__adddf3>
 8005b40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b48:	9611      	str	r6, [sp, #68]	; 0x44
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d15d      	bne.n	8005c0a <_dtoa_r+0x4fa>
 8005b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b52:	2200      	movs	r2, #0
 8005b54:	4b5c      	ldr	r3, [pc, #368]	; (8005cc8 <_dtoa_r+0x5b8>)
 8005b56:	f7fa fb07 	bl	8000168 <__aeabi_dsub>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b62:	4633      	mov	r3, r6
 8005b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b66:	f7fa ff47 	bl	80009f8 <__aeabi_dcmpgt>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f040 829c 	bne.w	80060a8 <_dtoa_r+0x998>
 8005b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b7a:	f7fa ff1f 	bl	80009bc <__aeabi_dcmplt>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f040 8290 	bne.w	80060a4 <_dtoa_r+0x994>
 8005b84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005b88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f2c0 8152 	blt.w	8005e38 <_dtoa_r+0x728>
 8005b94:	f1ba 0f0e 	cmp.w	sl, #14
 8005b98:	f300 814e 	bgt.w	8005e38 <_dtoa_r+0x728>
 8005b9c:	4b45      	ldr	r3, [pc, #276]	; (8005cb4 <_dtoa_r+0x5a4>)
 8005b9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ba2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ba6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f280 80db 	bge.w	8005d68 <_dtoa_r+0x658>
 8005bb2:	9b08      	ldr	r3, [sp, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f300 80d7 	bgt.w	8005d68 <_dtoa_r+0x658>
 8005bba:	f040 8272 	bne.w	80060a2 <_dtoa_r+0x992>
 8005bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <_dtoa_r+0x5b8>)
 8005bc6:	f7fa fc87 	bl	80004d8 <__aeabi_dmul>
 8005bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bce:	f7fa ff09 	bl	80009e4 <__aeabi_dcmpge>
 8005bd2:	9c08      	ldr	r4, [sp, #32]
 8005bd4:	4626      	mov	r6, r4
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f040 8248 	bne.w	800606c <_dtoa_r+0x95c>
 8005bdc:	2331      	movs	r3, #49	; 0x31
 8005bde:	9f03      	ldr	r7, [sp, #12]
 8005be0:	f10a 0a01 	add.w	sl, sl, #1
 8005be4:	f807 3b01 	strb.w	r3, [r7], #1
 8005be8:	e244      	b.n	8006074 <_dtoa_r+0x964>
 8005bea:	07e2      	lsls	r2, r4, #31
 8005bec:	d505      	bpl.n	8005bfa <_dtoa_r+0x4ea>
 8005bee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	3701      	adds	r7, #1
 8005bfa:	1064      	asrs	r4, r4, #1
 8005bfc:	3608      	adds	r6, #8
 8005bfe:	e76d      	b.n	8005adc <_dtoa_r+0x3cc>
 8005c00:	2702      	movs	r7, #2
 8005c02:	e770      	b.n	8005ae6 <_dtoa_r+0x3d6>
 8005c04:	46d0      	mov	r8, sl
 8005c06:	9c08      	ldr	r4, [sp, #32]
 8005c08:	e78f      	b.n	8005b2a <_dtoa_r+0x41a>
 8005c0a:	9903      	ldr	r1, [sp, #12]
 8005c0c:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <_dtoa_r+0x5a4>)
 8005c0e:	4421      	add	r1, r4
 8005c10:	9112      	str	r1, [sp, #72]	; 0x48
 8005c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d055      	beq.n	8005cd0 <_dtoa_r+0x5c0>
 8005c24:	2000      	movs	r0, #0
 8005c26:	4929      	ldr	r1, [pc, #164]	; (8005ccc <_dtoa_r+0x5bc>)
 8005c28:	f7fa fd80 	bl	800072c <__aeabi_ddiv>
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	4632      	mov	r2, r6
 8005c30:	f7fa fa9a 	bl	8000168 <__aeabi_dsub>
 8005c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c38:	9f03      	ldr	r7, [sp, #12]
 8005c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c3e:	f7fa fefb 	bl	8000a38 <__aeabi_d2iz>
 8005c42:	4604      	mov	r4, r0
 8005c44:	f7fa fbde 	bl	8000404 <__aeabi_i2d>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c50:	f7fa fa8a 	bl	8000168 <__aeabi_dsub>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	3430      	adds	r4, #48	; 0x30
 8005c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c62:	f807 4b01 	strb.w	r4, [r7], #1
 8005c66:	f7fa fea9 	bl	80009bc <__aeabi_dcmplt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d174      	bne.n	8005d58 <_dtoa_r+0x648>
 8005c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c72:	2000      	movs	r0, #0
 8005c74:	4911      	ldr	r1, [pc, #68]	; (8005cbc <_dtoa_r+0x5ac>)
 8005c76:	f7fa fa77 	bl	8000168 <__aeabi_dsub>
 8005c7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c7e:	f7fa fe9d 	bl	80009bc <__aeabi_dcmplt>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f040 80b7 	bne.w	8005df6 <_dtoa_r+0x6e6>
 8005c88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c8a:	429f      	cmp	r7, r3
 8005c8c:	f43f af7a 	beq.w	8005b84 <_dtoa_r+0x474>
 8005c90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c94:	2200      	movs	r2, #0
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <_dtoa_r+0x5b0>)
 8005c98:	f7fa fc1e 	bl	80004d8 <__aeabi_dmul>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <_dtoa_r+0x5b0>)
 8005ca8:	f7fa fc16 	bl	80004d8 <__aeabi_dmul>
 8005cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cb0:	e7c3      	b.n	8005c3a <_dtoa_r+0x52a>
 8005cb2:	bf00      	nop
 8005cb4:	08007c50 	.word	0x08007c50
 8005cb8:	08007c28 	.word	0x08007c28
 8005cbc:	3ff00000 	.word	0x3ff00000
 8005cc0:	40240000 	.word	0x40240000
 8005cc4:	401c0000 	.word	0x401c0000
 8005cc8:	40140000 	.word	0x40140000
 8005ccc:	3fe00000 	.word	0x3fe00000
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa fc00 	bl	80004d8 <__aeabi_dmul>
 8005cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cde:	9c03      	ldr	r4, [sp, #12]
 8005ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8005ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce6:	f7fa fea7 	bl	8000a38 <__aeabi_d2iz>
 8005cea:	9015      	str	r0, [sp, #84]	; 0x54
 8005cec:	f7fa fb8a 	bl	8000404 <__aeabi_i2d>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf8:	f7fa fa36 	bl	8000168 <__aeabi_dsub>
 8005cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cfe:	4606      	mov	r6, r0
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	f804 3b01 	strb.w	r3, [r4], #1
 8005d06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d08:	460f      	mov	r7, r1
 8005d0a:	429c      	cmp	r4, r3
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	d124      	bne.n	8005d5c <_dtoa_r+0x64c>
 8005d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d16:	4bb0      	ldr	r3, [pc, #704]	; (8005fd8 <_dtoa_r+0x8c8>)
 8005d18:	f7fa fa28 	bl	800016c <__adddf3>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fe68 	bl	80009f8 <__aeabi_dcmpgt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d163      	bne.n	8005df4 <_dtoa_r+0x6e4>
 8005d2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d30:	2000      	movs	r0, #0
 8005d32:	49a9      	ldr	r1, [pc, #676]	; (8005fd8 <_dtoa_r+0x8c8>)
 8005d34:	f7fa fa18 	bl	8000168 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fe3c 	bl	80009bc <__aeabi_dcmplt>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f43f af1d 	beq.w	8005b84 <_dtoa_r+0x474>
 8005d4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d4c:	1e7b      	subs	r3, r7, #1
 8005d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8005d50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d54:	2b30      	cmp	r3, #48	; 0x30
 8005d56:	d0f8      	beq.n	8005d4a <_dtoa_r+0x63a>
 8005d58:	46c2      	mov	sl, r8
 8005d5a:	e03b      	b.n	8005dd4 <_dtoa_r+0x6c4>
 8005d5c:	4b9f      	ldr	r3, [pc, #636]	; (8005fdc <_dtoa_r+0x8cc>)
 8005d5e:	f7fa fbbb 	bl	80004d8 <__aeabi_dmul>
 8005d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d66:	e7bc      	b.n	8005ce2 <_dtoa_r+0x5d2>
 8005d68:	9f03      	ldr	r7, [sp, #12]
 8005d6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d72:	4640      	mov	r0, r8
 8005d74:	4649      	mov	r1, r9
 8005d76:	f7fa fcd9 	bl	800072c <__aeabi_ddiv>
 8005d7a:	f7fa fe5d 	bl	8000a38 <__aeabi_d2iz>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	f7fa fb40 	bl	8000404 <__aeabi_i2d>
 8005d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d88:	f7fa fba6 	bl	80004d8 <__aeabi_dmul>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4640      	mov	r0, r8
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa f9e8 	bl	8000168 <__aeabi_dsub>
 8005d98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005d9c:	f807 6b01 	strb.w	r6, [r7], #1
 8005da0:	9e03      	ldr	r6, [sp, #12]
 8005da2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005da6:	1bbe      	subs	r6, r7, r6
 8005da8:	45b4      	cmp	ip, r6
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	d136      	bne.n	8005e1e <_dtoa_r+0x70e>
 8005db0:	f7fa f9dc 	bl	800016c <__adddf3>
 8005db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005db8:	4680      	mov	r8, r0
 8005dba:	4689      	mov	r9, r1
 8005dbc:	f7fa fe1c 	bl	80009f8 <__aeabi_dcmpgt>
 8005dc0:	bb58      	cbnz	r0, 8005e1a <_dtoa_r+0x70a>
 8005dc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fded 	bl	80009a8 <__aeabi_dcmpeq>
 8005dce:	b108      	cbz	r0, 8005dd4 <_dtoa_r+0x6c4>
 8005dd0:	07e1      	lsls	r1, r4, #31
 8005dd2:	d422      	bmi.n	8005e1a <_dtoa_r+0x70a>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	f000 faf0 	bl	80063bc <_Bfree>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	703b      	strb	r3, [r7, #0]
 8005de0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005de2:	f10a 0001 	add.w	r0, sl, #1
 8005de6:	6018      	str	r0, [r3, #0]
 8005de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f43f acde 	beq.w	80057ac <_dtoa_r+0x9c>
 8005df0:	601f      	str	r7, [r3, #0]
 8005df2:	e4db      	b.n	80057ac <_dtoa_r+0x9c>
 8005df4:	4627      	mov	r7, r4
 8005df6:	463b      	mov	r3, r7
 8005df8:	461f      	mov	r7, r3
 8005dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dfe:	2a39      	cmp	r2, #57	; 0x39
 8005e00:	d107      	bne.n	8005e12 <_dtoa_r+0x702>
 8005e02:	9a03      	ldr	r2, [sp, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d1f7      	bne.n	8005df8 <_dtoa_r+0x6e8>
 8005e08:	2230      	movs	r2, #48	; 0x30
 8005e0a:	9903      	ldr	r1, [sp, #12]
 8005e0c:	f108 0801 	add.w	r8, r8, #1
 8005e10:	700a      	strb	r2, [r1, #0]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	3201      	adds	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e79e      	b.n	8005d58 <_dtoa_r+0x648>
 8005e1a:	46d0      	mov	r8, sl
 8005e1c:	e7eb      	b.n	8005df6 <_dtoa_r+0x6e6>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4b6e      	ldr	r3, [pc, #440]	; (8005fdc <_dtoa_r+0x8cc>)
 8005e22:	f7fa fb59 	bl	80004d8 <__aeabi_dmul>
 8005e26:	2200      	movs	r2, #0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4680      	mov	r8, r0
 8005e2c:	4689      	mov	r9, r1
 8005e2e:	f7fa fdbb 	bl	80009a8 <__aeabi_dcmpeq>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d09b      	beq.n	8005d6e <_dtoa_r+0x65e>
 8005e36:	e7cd      	b.n	8005dd4 <_dtoa_r+0x6c4>
 8005e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	f000 80d0 	beq.w	8005fe0 <_dtoa_r+0x8d0>
 8005e40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	f300 80ae 	bgt.w	8005fa4 <_dtoa_r+0x894>
 8005e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	f000 80a6 	beq.w	8005f9c <_dtoa_r+0x88c>
 8005e50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e56:	9f06      	ldr	r7, [sp, #24]
 8005e58:	9a06      	ldr	r2, [sp, #24]
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	9206      	str	r2, [sp, #24]
 8005e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e62:	4628      	mov	r0, r5
 8005e64:	441a      	add	r2, r3
 8005e66:	9209      	str	r2, [sp, #36]	; 0x24
 8005e68:	f000 fb5e 	bl	8006528 <__i2b>
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	2f00      	cmp	r7, #0
 8005e70:	dd0c      	ble.n	8005e8c <_dtoa_r+0x77c>
 8005e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd09      	ble.n	8005e8c <_dtoa_r+0x77c>
 8005e78:	42bb      	cmp	r3, r7
 8005e7a:	bfa8      	it	ge
 8005e7c:	463b      	movge	r3, r7
 8005e7e:	9a06      	ldr	r2, [sp, #24]
 8005e80:	1aff      	subs	r7, r7, r3
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	9206      	str	r2, [sp, #24]
 8005e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8e:	b1f3      	cbz	r3, 8005ece <_dtoa_r+0x7be>
 8005e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a8 	beq.w	8005fe8 <_dtoa_r+0x8d8>
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	dd10      	ble.n	8005ebe <_dtoa_r+0x7ae>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 fbff 	bl	80066a4 <__pow5mult>
 8005ea6:	465a      	mov	r2, fp
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4606      	mov	r6, r0
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 fb51 	bl	8006554 <__multiply>
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 fa80 	bl	80063bc <_Bfree>
 8005ebc:	46c3      	mov	fp, r8
 8005ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec0:	1b1a      	subs	r2, r3, r4
 8005ec2:	d004      	beq.n	8005ece <_dtoa_r+0x7be>
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fbec 	bl	80066a4 <__pow5mult>
 8005ecc:	4683      	mov	fp, r0
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 fb29 	bl	8006528 <__i2b>
 8005ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed8:	4604      	mov	r4, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f340 8086 	ble.w	8005fec <_dtoa_r+0x8dc>
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f000 fbdd 	bl	80066a4 <__pow5mult>
 8005eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eec:	4604      	mov	r4, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	dd7f      	ble.n	8005ff2 <_dtoa_r+0x8e2>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005efc:	6918      	ldr	r0, [r3, #16]
 8005efe:	f000 fac5 	bl	800648c <__hi0bits>
 8005f02:	f1c0 0020 	rsb	r0, r0, #32
 8005f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f08:	4418      	add	r0, r3
 8005f0a:	f010 001f 	ands.w	r0, r0, #31
 8005f0e:	f000 8092 	beq.w	8006036 <_dtoa_r+0x926>
 8005f12:	f1c0 0320 	rsb	r3, r0, #32
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	f340 808a 	ble.w	8006030 <_dtoa_r+0x920>
 8005f1c:	f1c0 001c 	rsb	r0, r0, #28
 8005f20:	9b06      	ldr	r3, [sp, #24]
 8005f22:	4407      	add	r7, r0
 8005f24:	4403      	add	r3, r0
 8005f26:	9306      	str	r3, [sp, #24]
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	4403      	add	r3, r0
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	dd05      	ble.n	8005f40 <_dtoa_r+0x830>
 8005f34:	4659      	mov	r1, fp
 8005f36:	461a      	mov	r2, r3
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 fc0d 	bl	8006758 <__lshift>
 8005f3e:	4683      	mov	fp, r0
 8005f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dd05      	ble.n	8005f52 <_dtoa_r+0x842>
 8005f46:	4621      	mov	r1, r4
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 fc04 	bl	8006758 <__lshift>
 8005f50:	4604      	mov	r4, r0
 8005f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d070      	beq.n	800603a <_dtoa_r+0x92a>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fc6c 	bl	8006838 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	da6a      	bge.n	800603a <_dtoa_r+0x92a>
 8005f64:	2300      	movs	r3, #0
 8005f66:	4659      	mov	r1, fp
 8005f68:	220a      	movs	r2, #10
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f000 fa48 	bl	8006400 <__multadd>
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	4683      	mov	fp, r0
 8005f74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8194 	beq.w	80062a6 <_dtoa_r+0xb96>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	2300      	movs	r3, #0
 8005f82:	220a      	movs	r2, #10
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 fa3b 	bl	8006400 <__multadd>
 8005f8a:	f1b9 0f00 	cmp.w	r9, #0
 8005f8e:	4606      	mov	r6, r0
 8005f90:	f300 8093 	bgt.w	80060ba <_dtoa_r+0x9aa>
 8005f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	dc57      	bgt.n	800604a <_dtoa_r+0x93a>
 8005f9a:	e08e      	b.n	80060ba <_dtoa_r+0x9aa>
 8005f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fa2:	e757      	b.n	8005e54 <_dtoa_r+0x744>
 8005fa4:	9b08      	ldr	r3, [sp, #32]
 8005fa6:	1e5c      	subs	r4, r3, #1
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	bfb7      	itett	lt
 8005fae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fb0:	1b1c      	subge	r4, r3, r4
 8005fb2:	1ae2      	sublt	r2, r4, r3
 8005fb4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005fb6:	bfbe      	ittt	lt
 8005fb8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005fba:	189b      	addlt	r3, r3, r2
 8005fbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005fbe:	9b08      	ldr	r3, [sp, #32]
 8005fc0:	bfb8      	it	lt
 8005fc2:	2400      	movlt	r4, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bfbb      	ittet	lt
 8005fc8:	9b06      	ldrlt	r3, [sp, #24]
 8005fca:	9a08      	ldrlt	r2, [sp, #32]
 8005fcc:	9f06      	ldrge	r7, [sp, #24]
 8005fce:	1a9f      	sublt	r7, r3, r2
 8005fd0:	bfac      	ite	ge
 8005fd2:	9b08      	ldrge	r3, [sp, #32]
 8005fd4:	2300      	movlt	r3, #0
 8005fd6:	e73f      	b.n	8005e58 <_dtoa_r+0x748>
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	40240000 	.word	0x40240000
 8005fe0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fe2:	9f06      	ldr	r7, [sp, #24]
 8005fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005fe6:	e742      	b.n	8005e6e <_dtoa_r+0x75e>
 8005fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fea:	e76b      	b.n	8005ec4 <_dtoa_r+0x7b4>
 8005fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	dc19      	bgt.n	8006026 <_dtoa_r+0x916>
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	b9bb      	cbnz	r3, 8006026 <_dtoa_r+0x916>
 8005ff6:	9b05      	ldr	r3, [sp, #20]
 8005ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ffc:	b99b      	cbnz	r3, 8006026 <_dtoa_r+0x916>
 8005ffe:	9b05      	ldr	r3, [sp, #20]
 8006000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006004:	0d1b      	lsrs	r3, r3, #20
 8006006:	051b      	lsls	r3, r3, #20
 8006008:	b183      	cbz	r3, 800602c <_dtoa_r+0x91c>
 800600a:	f04f 0801 	mov.w	r8, #1
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	3301      	adds	r3, #1
 8006012:	9306      	str	r3, [sp, #24]
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	3301      	adds	r3, #1
 8006018:	9309      	str	r3, [sp, #36]	; 0x24
 800601a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f af6a 	bne.w	8005ef6 <_dtoa_r+0x7e6>
 8006022:	2001      	movs	r0, #1
 8006024:	e76f      	b.n	8005f06 <_dtoa_r+0x7f6>
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	e7f6      	b.n	800601a <_dtoa_r+0x90a>
 800602c:	4698      	mov	r8, r3
 800602e:	e7f4      	b.n	800601a <_dtoa_r+0x90a>
 8006030:	f43f af7d 	beq.w	8005f2e <_dtoa_r+0x81e>
 8006034:	4618      	mov	r0, r3
 8006036:	301c      	adds	r0, #28
 8006038:	e772      	b.n	8005f20 <_dtoa_r+0x810>
 800603a:	9b08      	ldr	r3, [sp, #32]
 800603c:	2b00      	cmp	r3, #0
 800603e:	dc36      	bgt.n	80060ae <_dtoa_r+0x99e>
 8006040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006042:	2b02      	cmp	r3, #2
 8006044:	dd33      	ble.n	80060ae <_dtoa_r+0x99e>
 8006046:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	d10d      	bne.n	800606c <_dtoa_r+0x95c>
 8006050:	4621      	mov	r1, r4
 8006052:	464b      	mov	r3, r9
 8006054:	2205      	movs	r2, #5
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f9d2 	bl	8006400 <__multadd>
 800605c:	4601      	mov	r1, r0
 800605e:	4604      	mov	r4, r0
 8006060:	4658      	mov	r0, fp
 8006062:	f000 fbe9 	bl	8006838 <__mcmp>
 8006066:	2800      	cmp	r0, #0
 8006068:	f73f adb8 	bgt.w	8005bdc <_dtoa_r+0x4cc>
 800606c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800606e:	9f03      	ldr	r7, [sp, #12]
 8006070:	ea6f 0a03 	mvn.w	sl, r3
 8006074:	f04f 0800 	mov.w	r8, #0
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f99e 	bl	80063bc <_Bfree>
 8006080:	2e00      	cmp	r6, #0
 8006082:	f43f aea7 	beq.w	8005dd4 <_dtoa_r+0x6c4>
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	d005      	beq.n	8006098 <_dtoa_r+0x988>
 800608c:	45b0      	cmp	r8, r6
 800608e:	d003      	beq.n	8006098 <_dtoa_r+0x988>
 8006090:	4641      	mov	r1, r8
 8006092:	4628      	mov	r0, r5
 8006094:	f000 f992 	bl	80063bc <_Bfree>
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	f000 f98e 	bl	80063bc <_Bfree>
 80060a0:	e698      	b.n	8005dd4 <_dtoa_r+0x6c4>
 80060a2:	2400      	movs	r4, #0
 80060a4:	4626      	mov	r6, r4
 80060a6:	e7e1      	b.n	800606c <_dtoa_r+0x95c>
 80060a8:	46c2      	mov	sl, r8
 80060aa:	4626      	mov	r6, r4
 80060ac:	e596      	b.n	8005bdc <_dtoa_r+0x4cc>
 80060ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80fd 	beq.w	80062b4 <_dtoa_r+0xba4>
 80060ba:	2f00      	cmp	r7, #0
 80060bc:	dd05      	ble.n	80060ca <_dtoa_r+0x9ba>
 80060be:	4631      	mov	r1, r6
 80060c0:	463a      	mov	r2, r7
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 fb48 	bl	8006758 <__lshift>
 80060c8:	4606      	mov	r6, r0
 80060ca:	f1b8 0f00 	cmp.w	r8, #0
 80060ce:	d05c      	beq.n	800618a <_dtoa_r+0xa7a>
 80060d0:	4628      	mov	r0, r5
 80060d2:	6871      	ldr	r1, [r6, #4]
 80060d4:	f000 f932 	bl	800633c <_Balloc>
 80060d8:	4607      	mov	r7, r0
 80060da:	b928      	cbnz	r0, 80060e8 <_dtoa_r+0x9d8>
 80060dc:	4602      	mov	r2, r0
 80060de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060e2:	4b7f      	ldr	r3, [pc, #508]	; (80062e0 <_dtoa_r+0xbd0>)
 80060e4:	f7ff bb28 	b.w	8005738 <_dtoa_r+0x28>
 80060e8:	6932      	ldr	r2, [r6, #16]
 80060ea:	f106 010c 	add.w	r1, r6, #12
 80060ee:	3202      	adds	r2, #2
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	300c      	adds	r0, #12
 80060f4:	f000 f914 	bl	8006320 <memcpy>
 80060f8:	2201      	movs	r2, #1
 80060fa:	4639      	mov	r1, r7
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fb2b 	bl	8006758 <__lshift>
 8006102:	46b0      	mov	r8, r6
 8006104:	4606      	mov	r6, r0
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	9308      	str	r3, [sp, #32]
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	444b      	add	r3, r9
 8006110:	930a      	str	r3, [sp, #40]	; 0x28
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	9309      	str	r3, [sp, #36]	; 0x24
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	4621      	mov	r1, r4
 800611e:	3b01      	subs	r3, #1
 8006120:	4658      	mov	r0, fp
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	f7ff fa68 	bl	80055f8 <quorem>
 8006128:	4603      	mov	r3, r0
 800612a:	4641      	mov	r1, r8
 800612c:	3330      	adds	r3, #48	; 0x30
 800612e:	9006      	str	r0, [sp, #24]
 8006130:	4658      	mov	r0, fp
 8006132:	930b      	str	r3, [sp, #44]	; 0x2c
 8006134:	f000 fb80 	bl	8006838 <__mcmp>
 8006138:	4632      	mov	r2, r6
 800613a:	4681      	mov	r9, r0
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fb96 	bl	8006870 <__mdiff>
 8006144:	68c2      	ldr	r2, [r0, #12]
 8006146:	4607      	mov	r7, r0
 8006148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800614a:	bb02      	cbnz	r2, 800618e <_dtoa_r+0xa7e>
 800614c:	4601      	mov	r1, r0
 800614e:	4658      	mov	r0, fp
 8006150:	f000 fb72 	bl	8006838 <__mcmp>
 8006154:	4602      	mov	r2, r0
 8006156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006158:	4639      	mov	r1, r7
 800615a:	4628      	mov	r0, r5
 800615c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006160:	f000 f92c 	bl	80063bc <_Bfree>
 8006164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006168:	9f08      	ldr	r7, [sp, #32]
 800616a:	ea43 0102 	orr.w	r1, r3, r2
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	430b      	orrs	r3, r1
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	d10d      	bne.n	8006192 <_dtoa_r+0xa82>
 8006176:	2b39      	cmp	r3, #57	; 0x39
 8006178:	d029      	beq.n	80061ce <_dtoa_r+0xabe>
 800617a:	f1b9 0f00 	cmp.w	r9, #0
 800617e:	dd01      	ble.n	8006184 <_dtoa_r+0xa74>
 8006180:	9b06      	ldr	r3, [sp, #24]
 8006182:	3331      	adds	r3, #49	; 0x31
 8006184:	9a04      	ldr	r2, [sp, #16]
 8006186:	7013      	strb	r3, [r2, #0]
 8006188:	e776      	b.n	8006078 <_dtoa_r+0x968>
 800618a:	4630      	mov	r0, r6
 800618c:	e7b9      	b.n	8006102 <_dtoa_r+0x9f2>
 800618e:	2201      	movs	r2, #1
 8006190:	e7e2      	b.n	8006158 <_dtoa_r+0xa48>
 8006192:	f1b9 0f00 	cmp.w	r9, #0
 8006196:	db06      	blt.n	80061a6 <_dtoa_r+0xa96>
 8006198:	9922      	ldr	r1, [sp, #136]	; 0x88
 800619a:	ea41 0909 	orr.w	r9, r1, r9
 800619e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a0:	ea59 0101 	orrs.w	r1, r9, r1
 80061a4:	d120      	bne.n	80061e8 <_dtoa_r+0xad8>
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	ddec      	ble.n	8006184 <_dtoa_r+0xa74>
 80061aa:	4659      	mov	r1, fp
 80061ac:	2201      	movs	r2, #1
 80061ae:	4628      	mov	r0, r5
 80061b0:	9308      	str	r3, [sp, #32]
 80061b2:	f000 fad1 	bl	8006758 <__lshift>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4683      	mov	fp, r0
 80061ba:	f000 fb3d 	bl	8006838 <__mcmp>
 80061be:	2800      	cmp	r0, #0
 80061c0:	9b08      	ldr	r3, [sp, #32]
 80061c2:	dc02      	bgt.n	80061ca <_dtoa_r+0xaba>
 80061c4:	d1de      	bne.n	8006184 <_dtoa_r+0xa74>
 80061c6:	07da      	lsls	r2, r3, #31
 80061c8:	d5dc      	bpl.n	8006184 <_dtoa_r+0xa74>
 80061ca:	2b39      	cmp	r3, #57	; 0x39
 80061cc:	d1d8      	bne.n	8006180 <_dtoa_r+0xa70>
 80061ce:	2339      	movs	r3, #57	; 0x39
 80061d0:	9a04      	ldr	r2, [sp, #16]
 80061d2:	7013      	strb	r3, [r2, #0]
 80061d4:	463b      	mov	r3, r7
 80061d6:	461f      	mov	r7, r3
 80061d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80061dc:	3b01      	subs	r3, #1
 80061de:	2a39      	cmp	r2, #57	; 0x39
 80061e0:	d050      	beq.n	8006284 <_dtoa_r+0xb74>
 80061e2:	3201      	adds	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e747      	b.n	8006078 <_dtoa_r+0x968>
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	dd03      	ble.n	80061f4 <_dtoa_r+0xae4>
 80061ec:	2b39      	cmp	r3, #57	; 0x39
 80061ee:	d0ee      	beq.n	80061ce <_dtoa_r+0xabe>
 80061f0:	3301      	adds	r3, #1
 80061f2:	e7c7      	b.n	8006184 <_dtoa_r+0xa74>
 80061f4:	9a08      	ldr	r2, [sp, #32]
 80061f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80061f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061fc:	428a      	cmp	r2, r1
 80061fe:	d02a      	beq.n	8006256 <_dtoa_r+0xb46>
 8006200:	4659      	mov	r1, fp
 8006202:	2300      	movs	r3, #0
 8006204:	220a      	movs	r2, #10
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f8fa 	bl	8006400 <__multadd>
 800620c:	45b0      	cmp	r8, r6
 800620e:	4683      	mov	fp, r0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	f04f 020a 	mov.w	r2, #10
 8006218:	4641      	mov	r1, r8
 800621a:	4628      	mov	r0, r5
 800621c:	d107      	bne.n	800622e <_dtoa_r+0xb1e>
 800621e:	f000 f8ef 	bl	8006400 <__multadd>
 8006222:	4680      	mov	r8, r0
 8006224:	4606      	mov	r6, r0
 8006226:	9b08      	ldr	r3, [sp, #32]
 8006228:	3301      	adds	r3, #1
 800622a:	9308      	str	r3, [sp, #32]
 800622c:	e775      	b.n	800611a <_dtoa_r+0xa0a>
 800622e:	f000 f8e7 	bl	8006400 <__multadd>
 8006232:	4631      	mov	r1, r6
 8006234:	4680      	mov	r8, r0
 8006236:	2300      	movs	r3, #0
 8006238:	220a      	movs	r2, #10
 800623a:	4628      	mov	r0, r5
 800623c:	f000 f8e0 	bl	8006400 <__multadd>
 8006240:	4606      	mov	r6, r0
 8006242:	e7f0      	b.n	8006226 <_dtoa_r+0xb16>
 8006244:	f1b9 0f00 	cmp.w	r9, #0
 8006248:	bfcc      	ite	gt
 800624a:	464f      	movgt	r7, r9
 800624c:	2701      	movle	r7, #1
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	9a03      	ldr	r2, [sp, #12]
 8006254:	4417      	add	r7, r2
 8006256:	4659      	mov	r1, fp
 8006258:	2201      	movs	r2, #1
 800625a:	4628      	mov	r0, r5
 800625c:	9308      	str	r3, [sp, #32]
 800625e:	f000 fa7b 	bl	8006758 <__lshift>
 8006262:	4621      	mov	r1, r4
 8006264:	4683      	mov	fp, r0
 8006266:	f000 fae7 	bl	8006838 <__mcmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	dcb2      	bgt.n	80061d4 <_dtoa_r+0xac4>
 800626e:	d102      	bne.n	8006276 <_dtoa_r+0xb66>
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d4ae      	bmi.n	80061d4 <_dtoa_r+0xac4>
 8006276:	463b      	mov	r3, r7
 8006278:	461f      	mov	r7, r3
 800627a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800627e:	2a30      	cmp	r2, #48	; 0x30
 8006280:	d0fa      	beq.n	8006278 <_dtoa_r+0xb68>
 8006282:	e6f9      	b.n	8006078 <_dtoa_r+0x968>
 8006284:	9a03      	ldr	r2, [sp, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d1a5      	bne.n	80061d6 <_dtoa_r+0xac6>
 800628a:	2331      	movs	r3, #49	; 0x31
 800628c:	f10a 0a01 	add.w	sl, sl, #1
 8006290:	e779      	b.n	8006186 <_dtoa_r+0xa76>
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <_dtoa_r+0xbd4>)
 8006294:	f7ff baa8 	b.w	80057e8 <_dtoa_r+0xd8>
 8006298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f aa81 	bne.w	80057a2 <_dtoa_r+0x92>
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <_dtoa_r+0xbd8>)
 80062a2:	f7ff baa1 	b.w	80057e8 <_dtoa_r+0xd8>
 80062a6:	f1b9 0f00 	cmp.w	r9, #0
 80062aa:	dc03      	bgt.n	80062b4 <_dtoa_r+0xba4>
 80062ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f73f aecb 	bgt.w	800604a <_dtoa_r+0x93a>
 80062b4:	9f03      	ldr	r7, [sp, #12]
 80062b6:	4621      	mov	r1, r4
 80062b8:	4658      	mov	r0, fp
 80062ba:	f7ff f99d 	bl	80055f8 <quorem>
 80062be:	9a03      	ldr	r2, [sp, #12]
 80062c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062c4:	f807 3b01 	strb.w	r3, [r7], #1
 80062c8:	1aba      	subs	r2, r7, r2
 80062ca:	4591      	cmp	r9, r2
 80062cc:	ddba      	ble.n	8006244 <_dtoa_r+0xb34>
 80062ce:	4659      	mov	r1, fp
 80062d0:	2300      	movs	r3, #0
 80062d2:	220a      	movs	r2, #10
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 f893 	bl	8006400 <__multadd>
 80062da:	4683      	mov	fp, r0
 80062dc:	e7eb      	b.n	80062b6 <_dtoa_r+0xba6>
 80062de:	bf00      	nop
 80062e0:	08007bb7 	.word	0x08007bb7
 80062e4:	08007b14 	.word	0x08007b14
 80062e8:	08007b38 	.word	0x08007b38

080062ec <_localeconv_r>:
 80062ec:	4800      	ldr	r0, [pc, #0]	; (80062f0 <_localeconv_r+0x4>)
 80062ee:	4770      	bx	lr
 80062f0:	20000194 	.word	0x20000194

080062f4 <malloc>:
 80062f4:	4b02      	ldr	r3, [pc, #8]	; (8006300 <malloc+0xc>)
 80062f6:	4601      	mov	r1, r0
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f000 bc1d 	b.w	8006b38 <_malloc_r>
 80062fe:	bf00      	nop
 8006300:	20000040 	.word	0x20000040

08006304 <memchr>:
 8006304:	4603      	mov	r3, r0
 8006306:	b510      	push	{r4, lr}
 8006308:	b2c9      	uxtb	r1, r1
 800630a:	4402      	add	r2, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	4618      	mov	r0, r3
 8006310:	d101      	bne.n	8006316 <memchr+0x12>
 8006312:	2000      	movs	r0, #0
 8006314:	e003      	b.n	800631e <memchr+0x1a>
 8006316:	7804      	ldrb	r4, [r0, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	428c      	cmp	r4, r1
 800631c:	d1f6      	bne.n	800630c <memchr+0x8>
 800631e:	bd10      	pop	{r4, pc}

08006320 <memcpy>:
 8006320:	440a      	add	r2, r1
 8006322:	4291      	cmp	r1, r2
 8006324:	f100 33ff 	add.w	r3, r0, #4294967295
 8006328:	d100      	bne.n	800632c <memcpy+0xc>
 800632a:	4770      	bx	lr
 800632c:	b510      	push	{r4, lr}
 800632e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006332:	4291      	cmp	r1, r2
 8006334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006338:	d1f9      	bne.n	800632e <memcpy+0xe>
 800633a:	bd10      	pop	{r4, pc}

0800633c <_Balloc>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	b976      	cbnz	r6, 8006364 <_Balloc+0x28>
 8006346:	2010      	movs	r0, #16
 8006348:	f7ff ffd4 	bl	80062f4 <malloc>
 800634c:	4602      	mov	r2, r0
 800634e:	6260      	str	r0, [r4, #36]	; 0x24
 8006350:	b920      	cbnz	r0, 800635c <_Balloc+0x20>
 8006352:	2166      	movs	r1, #102	; 0x66
 8006354:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <_Balloc+0x78>)
 8006356:	4818      	ldr	r0, [pc, #96]	; (80063b8 <_Balloc+0x7c>)
 8006358:	f000 fdce 	bl	8006ef8 <__assert_func>
 800635c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006360:	6006      	str	r6, [r0, #0]
 8006362:	60c6      	str	r6, [r0, #12]
 8006364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006366:	68f3      	ldr	r3, [r6, #12]
 8006368:	b183      	cbz	r3, 800638c <_Balloc+0x50>
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006372:	b9b8      	cbnz	r0, 80063a4 <_Balloc+0x68>
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f605 	lsl.w	r6, r1, r5
 800637a:	1d72      	adds	r2, r6, #5
 800637c:	4620      	mov	r0, r4
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	f000 fb5e 	bl	8006a40 <_calloc_r>
 8006384:	b160      	cbz	r0, 80063a0 <_Balloc+0x64>
 8006386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800638a:	e00e      	b.n	80063aa <_Balloc+0x6e>
 800638c:	2221      	movs	r2, #33	; 0x21
 800638e:	2104      	movs	r1, #4
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fb55 	bl	8006a40 <_calloc_r>
 8006396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006398:	60f0      	str	r0, [r6, #12]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e4      	bne.n	800636a <_Balloc+0x2e>
 80063a0:	2000      	movs	r0, #0
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	6802      	ldr	r2, [r0, #0]
 80063a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063aa:	2300      	movs	r3, #0
 80063ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063b0:	e7f7      	b.n	80063a2 <_Balloc+0x66>
 80063b2:	bf00      	nop
 80063b4:	08007b45 	.word	0x08007b45
 80063b8:	08007bc8 	.word	0x08007bc8

080063bc <_Bfree>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	b976      	cbnz	r6, 80063e4 <_Bfree+0x28>
 80063c6:	2010      	movs	r0, #16
 80063c8:	f7ff ff94 	bl	80062f4 <malloc>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6268      	str	r0, [r5, #36]	; 0x24
 80063d0:	b920      	cbnz	r0, 80063dc <_Bfree+0x20>
 80063d2:	218a      	movs	r1, #138	; 0x8a
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <_Bfree+0x3c>)
 80063d6:	4809      	ldr	r0, [pc, #36]	; (80063fc <_Bfree+0x40>)
 80063d8:	f000 fd8e 	bl	8006ef8 <__assert_func>
 80063dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063e0:	6006      	str	r6, [r0, #0]
 80063e2:	60c6      	str	r6, [r0, #12]
 80063e4:	b13c      	cbz	r4, 80063f6 <_Bfree+0x3a>
 80063e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063e8:	6862      	ldr	r2, [r4, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063f0:	6021      	str	r1, [r4, #0]
 80063f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	08007b45 	.word	0x08007b45
 80063fc:	08007bc8 	.word	0x08007bc8

08006400 <__multadd>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	461e      	mov	r6, r3
 800640a:	2000      	movs	r0, #0
 800640c:	690d      	ldr	r5, [r1, #16]
 800640e:	f101 0c14 	add.w	ip, r1, #20
 8006412:	f8dc 3000 	ldr.w	r3, [ip]
 8006416:	3001      	adds	r0, #1
 8006418:	b299      	uxth	r1, r3
 800641a:	fb02 6101 	mla	r1, r2, r1, r6
 800641e:	0c1e      	lsrs	r6, r3, #16
 8006420:	0c0b      	lsrs	r3, r1, #16
 8006422:	fb02 3306 	mla	r3, r2, r6, r3
 8006426:	b289      	uxth	r1, r1
 8006428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800642c:	4285      	cmp	r5, r0
 800642e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006432:	f84c 1b04 	str.w	r1, [ip], #4
 8006436:	dcec      	bgt.n	8006412 <__multadd+0x12>
 8006438:	b30e      	cbz	r6, 800647e <__multadd+0x7e>
 800643a:	68a3      	ldr	r3, [r4, #8]
 800643c:	42ab      	cmp	r3, r5
 800643e:	dc19      	bgt.n	8006474 <__multadd+0x74>
 8006440:	6861      	ldr	r1, [r4, #4]
 8006442:	4638      	mov	r0, r7
 8006444:	3101      	adds	r1, #1
 8006446:	f7ff ff79 	bl	800633c <_Balloc>
 800644a:	4680      	mov	r8, r0
 800644c:	b928      	cbnz	r0, 800645a <__multadd+0x5a>
 800644e:	4602      	mov	r2, r0
 8006450:	21b5      	movs	r1, #181	; 0xb5
 8006452:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <__multadd+0x84>)
 8006454:	480c      	ldr	r0, [pc, #48]	; (8006488 <__multadd+0x88>)
 8006456:	f000 fd4f 	bl	8006ef8 <__assert_func>
 800645a:	6922      	ldr	r2, [r4, #16]
 800645c:	f104 010c 	add.w	r1, r4, #12
 8006460:	3202      	adds	r2, #2
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	300c      	adds	r0, #12
 8006466:	f7ff ff5b 	bl	8006320 <memcpy>
 800646a:	4621      	mov	r1, r4
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff ffa5 	bl	80063bc <_Bfree>
 8006472:	4644      	mov	r4, r8
 8006474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006478:	3501      	adds	r5, #1
 800647a:	615e      	str	r6, [r3, #20]
 800647c:	6125      	str	r5, [r4, #16]
 800647e:	4620      	mov	r0, r4
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	08007bb7 	.word	0x08007bb7
 8006488:	08007bc8 	.word	0x08007bc8

0800648c <__hi0bits>:
 800648c:	0c02      	lsrs	r2, r0, #16
 800648e:	0412      	lsls	r2, r2, #16
 8006490:	4603      	mov	r3, r0
 8006492:	b9ca      	cbnz	r2, 80064c8 <__hi0bits+0x3c>
 8006494:	0403      	lsls	r3, r0, #16
 8006496:	2010      	movs	r0, #16
 8006498:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800649c:	bf04      	itt	eq
 800649e:	021b      	lsleq	r3, r3, #8
 80064a0:	3008      	addeq	r0, #8
 80064a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064a6:	bf04      	itt	eq
 80064a8:	011b      	lsleq	r3, r3, #4
 80064aa:	3004      	addeq	r0, #4
 80064ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064b0:	bf04      	itt	eq
 80064b2:	009b      	lsleq	r3, r3, #2
 80064b4:	3002      	addeq	r0, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	db05      	blt.n	80064c6 <__hi0bits+0x3a>
 80064ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064be:	f100 0001 	add.w	r0, r0, #1
 80064c2:	bf08      	it	eq
 80064c4:	2020      	moveq	r0, #32
 80064c6:	4770      	bx	lr
 80064c8:	2000      	movs	r0, #0
 80064ca:	e7e5      	b.n	8006498 <__hi0bits+0xc>

080064cc <__lo0bits>:
 80064cc:	6803      	ldr	r3, [r0, #0]
 80064ce:	4602      	mov	r2, r0
 80064d0:	f013 0007 	ands.w	r0, r3, #7
 80064d4:	d00b      	beq.n	80064ee <__lo0bits+0x22>
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	d421      	bmi.n	800651e <__lo0bits+0x52>
 80064da:	0798      	lsls	r0, r3, #30
 80064dc:	bf49      	itett	mi
 80064de:	085b      	lsrmi	r3, r3, #1
 80064e0:	089b      	lsrpl	r3, r3, #2
 80064e2:	2001      	movmi	r0, #1
 80064e4:	6013      	strmi	r3, [r2, #0]
 80064e6:	bf5c      	itt	pl
 80064e8:	2002      	movpl	r0, #2
 80064ea:	6013      	strpl	r3, [r2, #0]
 80064ec:	4770      	bx	lr
 80064ee:	b299      	uxth	r1, r3
 80064f0:	b909      	cbnz	r1, 80064f6 <__lo0bits+0x2a>
 80064f2:	2010      	movs	r0, #16
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	b2d9      	uxtb	r1, r3
 80064f8:	b909      	cbnz	r1, 80064fe <__lo0bits+0x32>
 80064fa:	3008      	adds	r0, #8
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	0719      	lsls	r1, r3, #28
 8006500:	bf04      	itt	eq
 8006502:	091b      	lsreq	r3, r3, #4
 8006504:	3004      	addeq	r0, #4
 8006506:	0799      	lsls	r1, r3, #30
 8006508:	bf04      	itt	eq
 800650a:	089b      	lsreq	r3, r3, #2
 800650c:	3002      	addeq	r0, #2
 800650e:	07d9      	lsls	r1, r3, #31
 8006510:	d403      	bmi.n	800651a <__lo0bits+0x4e>
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	f100 0001 	add.w	r0, r0, #1
 8006518:	d003      	beq.n	8006522 <__lo0bits+0x56>
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	4770      	bx	lr
 800651e:	2000      	movs	r0, #0
 8006520:	4770      	bx	lr
 8006522:	2020      	movs	r0, #32
 8006524:	4770      	bx	lr
	...

08006528 <__i2b>:
 8006528:	b510      	push	{r4, lr}
 800652a:	460c      	mov	r4, r1
 800652c:	2101      	movs	r1, #1
 800652e:	f7ff ff05 	bl	800633c <_Balloc>
 8006532:	4602      	mov	r2, r0
 8006534:	b928      	cbnz	r0, 8006542 <__i2b+0x1a>
 8006536:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800653a:	4b04      	ldr	r3, [pc, #16]	; (800654c <__i2b+0x24>)
 800653c:	4804      	ldr	r0, [pc, #16]	; (8006550 <__i2b+0x28>)
 800653e:	f000 fcdb 	bl	8006ef8 <__assert_func>
 8006542:	2301      	movs	r3, #1
 8006544:	6144      	str	r4, [r0, #20]
 8006546:	6103      	str	r3, [r0, #16]
 8006548:	bd10      	pop	{r4, pc}
 800654a:	bf00      	nop
 800654c:	08007bb7 	.word	0x08007bb7
 8006550:	08007bc8 	.word	0x08007bc8

08006554 <__multiply>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4691      	mov	r9, r2
 800655a:	690a      	ldr	r2, [r1, #16]
 800655c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006560:	460c      	mov	r4, r1
 8006562:	429a      	cmp	r2, r3
 8006564:	bfbe      	ittt	lt
 8006566:	460b      	movlt	r3, r1
 8006568:	464c      	movlt	r4, r9
 800656a:	4699      	movlt	r9, r3
 800656c:	6927      	ldr	r7, [r4, #16]
 800656e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	eb07 060a 	add.w	r6, r7, sl
 800657a:	42b3      	cmp	r3, r6
 800657c:	b085      	sub	sp, #20
 800657e:	bfb8      	it	lt
 8006580:	3101      	addlt	r1, #1
 8006582:	f7ff fedb 	bl	800633c <_Balloc>
 8006586:	b930      	cbnz	r0, 8006596 <__multiply+0x42>
 8006588:	4602      	mov	r2, r0
 800658a:	f240 115d 	movw	r1, #349	; 0x15d
 800658e:	4b43      	ldr	r3, [pc, #268]	; (800669c <__multiply+0x148>)
 8006590:	4843      	ldr	r0, [pc, #268]	; (80066a0 <__multiply+0x14c>)
 8006592:	f000 fcb1 	bl	8006ef8 <__assert_func>
 8006596:	f100 0514 	add.w	r5, r0, #20
 800659a:	462b      	mov	r3, r5
 800659c:	2200      	movs	r2, #0
 800659e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065a2:	4543      	cmp	r3, r8
 80065a4:	d321      	bcc.n	80065ea <__multiply+0x96>
 80065a6:	f104 0314 	add.w	r3, r4, #20
 80065aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065ae:	f109 0314 	add.w	r3, r9, #20
 80065b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065b6:	9202      	str	r2, [sp, #8]
 80065b8:	1b3a      	subs	r2, r7, r4
 80065ba:	3a15      	subs	r2, #21
 80065bc:	f022 0203 	bic.w	r2, r2, #3
 80065c0:	3204      	adds	r2, #4
 80065c2:	f104 0115 	add.w	r1, r4, #21
 80065c6:	428f      	cmp	r7, r1
 80065c8:	bf38      	it	cc
 80065ca:	2204      	movcc	r2, #4
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	9a02      	ldr	r2, [sp, #8]
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d80c      	bhi.n	80065f0 <__multiply+0x9c>
 80065d6:	2e00      	cmp	r6, #0
 80065d8:	dd03      	ble.n	80065e2 <__multiply+0x8e>
 80065da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d059      	beq.n	8006696 <__multiply+0x142>
 80065e2:	6106      	str	r6, [r0, #16]
 80065e4:	b005      	add	sp, #20
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	f843 2b04 	str.w	r2, [r3], #4
 80065ee:	e7d8      	b.n	80065a2 <__multiply+0x4e>
 80065f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80065f4:	f1ba 0f00 	cmp.w	sl, #0
 80065f8:	d023      	beq.n	8006642 <__multiply+0xee>
 80065fa:	46a9      	mov	r9, r5
 80065fc:	f04f 0c00 	mov.w	ip, #0
 8006600:	f104 0e14 	add.w	lr, r4, #20
 8006604:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006608:	f8d9 1000 	ldr.w	r1, [r9]
 800660c:	fa1f fb82 	uxth.w	fp, r2
 8006610:	b289      	uxth	r1, r1
 8006612:	fb0a 110b 	mla	r1, sl, fp, r1
 8006616:	4461      	add	r1, ip
 8006618:	f8d9 c000 	ldr.w	ip, [r9]
 800661c:	0c12      	lsrs	r2, r2, #16
 800661e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006622:	fb0a c202 	mla	r2, sl, r2, ip
 8006626:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800662a:	b289      	uxth	r1, r1
 800662c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006630:	4577      	cmp	r7, lr
 8006632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006636:	f849 1b04 	str.w	r1, [r9], #4
 800663a:	d8e3      	bhi.n	8006604 <__multiply+0xb0>
 800663c:	9a01      	ldr	r2, [sp, #4]
 800663e:	f845 c002 	str.w	ip, [r5, r2]
 8006642:	9a03      	ldr	r2, [sp, #12]
 8006644:	3304      	adds	r3, #4
 8006646:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	d020      	beq.n	8006692 <__multiply+0x13e>
 8006650:	46ae      	mov	lr, r5
 8006652:	f04f 0a00 	mov.w	sl, #0
 8006656:	6829      	ldr	r1, [r5, #0]
 8006658:	f104 0c14 	add.w	ip, r4, #20
 800665c:	f8bc b000 	ldrh.w	fp, [ip]
 8006660:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006664:	b289      	uxth	r1, r1
 8006666:	fb09 220b 	mla	r2, r9, fp, r2
 800666a:	4492      	add	sl, r2
 800666c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006670:	f84e 1b04 	str.w	r1, [lr], #4
 8006674:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006678:	f8be 1000 	ldrh.w	r1, [lr]
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	fb09 1102 	mla	r1, r9, r2, r1
 8006682:	4567      	cmp	r7, ip
 8006684:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006688:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800668c:	d8e6      	bhi.n	800665c <__multiply+0x108>
 800668e:	9a01      	ldr	r2, [sp, #4]
 8006690:	50a9      	str	r1, [r5, r2]
 8006692:	3504      	adds	r5, #4
 8006694:	e79b      	b.n	80065ce <__multiply+0x7a>
 8006696:	3e01      	subs	r6, #1
 8006698:	e79d      	b.n	80065d6 <__multiply+0x82>
 800669a:	bf00      	nop
 800669c:	08007bb7 	.word	0x08007bb7
 80066a0:	08007bc8 	.word	0x08007bc8

080066a4 <__pow5mult>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	4615      	mov	r5, r2
 80066aa:	f012 0203 	ands.w	r2, r2, #3
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	d007      	beq.n	80066c4 <__pow5mult+0x20>
 80066b4:	4c25      	ldr	r4, [pc, #148]	; (800674c <__pow5mult+0xa8>)
 80066b6:	3a01      	subs	r2, #1
 80066b8:	2300      	movs	r3, #0
 80066ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066be:	f7ff fe9f 	bl	8006400 <__multadd>
 80066c2:	4607      	mov	r7, r0
 80066c4:	10ad      	asrs	r5, r5, #2
 80066c6:	d03d      	beq.n	8006744 <__pow5mult+0xa0>
 80066c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066ca:	b97c      	cbnz	r4, 80066ec <__pow5mult+0x48>
 80066cc:	2010      	movs	r0, #16
 80066ce:	f7ff fe11 	bl	80062f4 <malloc>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6270      	str	r0, [r6, #36]	; 0x24
 80066d6:	b928      	cbnz	r0, 80066e4 <__pow5mult+0x40>
 80066d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066dc:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <__pow5mult+0xac>)
 80066de:	481d      	ldr	r0, [pc, #116]	; (8006754 <__pow5mult+0xb0>)
 80066e0:	f000 fc0a 	bl	8006ef8 <__assert_func>
 80066e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066e8:	6004      	str	r4, [r0, #0]
 80066ea:	60c4      	str	r4, [r0, #12]
 80066ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066f4:	b94c      	cbnz	r4, 800670a <__pow5mult+0x66>
 80066f6:	f240 2171 	movw	r1, #625	; 0x271
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff ff14 	bl	8006528 <__i2b>
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	f8c8 0008 	str.w	r0, [r8, #8]
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	07eb      	lsls	r3, r5, #31
 8006710:	d50a      	bpl.n	8006728 <__pow5mult+0x84>
 8006712:	4639      	mov	r1, r7
 8006714:	4622      	mov	r2, r4
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff ff1c 	bl	8006554 <__multiply>
 800671c:	4680      	mov	r8, r0
 800671e:	4639      	mov	r1, r7
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff fe4b 	bl	80063bc <_Bfree>
 8006726:	4647      	mov	r7, r8
 8006728:	106d      	asrs	r5, r5, #1
 800672a:	d00b      	beq.n	8006744 <__pow5mult+0xa0>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	b938      	cbnz	r0, 8006740 <__pow5mult+0x9c>
 8006730:	4622      	mov	r2, r4
 8006732:	4621      	mov	r1, r4
 8006734:	4630      	mov	r0, r6
 8006736:	f7ff ff0d 	bl	8006554 <__multiply>
 800673a:	6020      	str	r0, [r4, #0]
 800673c:	f8c0 9000 	str.w	r9, [r0]
 8006740:	4604      	mov	r4, r0
 8006742:	e7e4      	b.n	800670e <__pow5mult+0x6a>
 8006744:	4638      	mov	r0, r7
 8006746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674a:	bf00      	nop
 800674c:	08007d18 	.word	0x08007d18
 8006750:	08007b45 	.word	0x08007b45
 8006754:	08007bc8 	.word	0x08007bc8

08006758 <__lshift>:
 8006758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	4607      	mov	r7, r0
 8006760:	4691      	mov	r9, r2
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	6849      	ldr	r1, [r1, #4]
 8006766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800676a:	68a3      	ldr	r3, [r4, #8]
 800676c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006770:	f108 0601 	add.w	r6, r8, #1
 8006774:	42b3      	cmp	r3, r6
 8006776:	db0b      	blt.n	8006790 <__lshift+0x38>
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff fddf 	bl	800633c <_Balloc>
 800677e:	4605      	mov	r5, r0
 8006780:	b948      	cbnz	r0, 8006796 <__lshift+0x3e>
 8006782:	4602      	mov	r2, r0
 8006784:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <__lshift+0xd8>)
 800678a:	482a      	ldr	r0, [pc, #168]	; (8006834 <__lshift+0xdc>)
 800678c:	f000 fbb4 	bl	8006ef8 <__assert_func>
 8006790:	3101      	adds	r1, #1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	e7ee      	b.n	8006774 <__lshift+0x1c>
 8006796:	2300      	movs	r3, #0
 8006798:	f100 0114 	add.w	r1, r0, #20
 800679c:	f100 0210 	add.w	r2, r0, #16
 80067a0:	4618      	mov	r0, r3
 80067a2:	4553      	cmp	r3, sl
 80067a4:	db37      	blt.n	8006816 <__lshift+0xbe>
 80067a6:	6920      	ldr	r0, [r4, #16]
 80067a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067ac:	f104 0314 	add.w	r3, r4, #20
 80067b0:	f019 091f 	ands.w	r9, r9, #31
 80067b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067bc:	d02f      	beq.n	800681e <__lshift+0xc6>
 80067be:	468a      	mov	sl, r1
 80067c0:	f04f 0c00 	mov.w	ip, #0
 80067c4:	f1c9 0e20 	rsb	lr, r9, #32
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	fa02 f209 	lsl.w	r2, r2, r9
 80067ce:	ea42 020c 	orr.w	r2, r2, ip
 80067d2:	f84a 2b04 	str.w	r2, [sl], #4
 80067d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067da:	4298      	cmp	r0, r3
 80067dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067e0:	d8f2      	bhi.n	80067c8 <__lshift+0x70>
 80067e2:	1b03      	subs	r3, r0, r4
 80067e4:	3b15      	subs	r3, #21
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	3304      	adds	r3, #4
 80067ec:	f104 0215 	add.w	r2, r4, #21
 80067f0:	4290      	cmp	r0, r2
 80067f2:	bf38      	it	cc
 80067f4:	2304      	movcc	r3, #4
 80067f6:	f841 c003 	str.w	ip, [r1, r3]
 80067fa:	f1bc 0f00 	cmp.w	ip, #0
 80067fe:	d001      	beq.n	8006804 <__lshift+0xac>
 8006800:	f108 0602 	add.w	r6, r8, #2
 8006804:	3e01      	subs	r6, #1
 8006806:	4638      	mov	r0, r7
 8006808:	4621      	mov	r1, r4
 800680a:	612e      	str	r6, [r5, #16]
 800680c:	f7ff fdd6 	bl	80063bc <_Bfree>
 8006810:	4628      	mov	r0, r5
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	f842 0f04 	str.w	r0, [r2, #4]!
 800681a:	3301      	adds	r3, #1
 800681c:	e7c1      	b.n	80067a2 <__lshift+0x4a>
 800681e:	3904      	subs	r1, #4
 8006820:	f853 2b04 	ldr.w	r2, [r3], #4
 8006824:	4298      	cmp	r0, r3
 8006826:	f841 2f04 	str.w	r2, [r1, #4]!
 800682a:	d8f9      	bhi.n	8006820 <__lshift+0xc8>
 800682c:	e7ea      	b.n	8006804 <__lshift+0xac>
 800682e:	bf00      	nop
 8006830:	08007bb7 	.word	0x08007bb7
 8006834:	08007bc8 	.word	0x08007bc8

08006838 <__mcmp>:
 8006838:	4603      	mov	r3, r0
 800683a:	690a      	ldr	r2, [r1, #16]
 800683c:	6900      	ldr	r0, [r0, #16]
 800683e:	b530      	push	{r4, r5, lr}
 8006840:	1a80      	subs	r0, r0, r2
 8006842:	d10d      	bne.n	8006860 <__mcmp+0x28>
 8006844:	3314      	adds	r3, #20
 8006846:	3114      	adds	r1, #20
 8006848:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800684c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006858:	4295      	cmp	r5, r2
 800685a:	d002      	beq.n	8006862 <__mcmp+0x2a>
 800685c:	d304      	bcc.n	8006868 <__mcmp+0x30>
 800685e:	2001      	movs	r0, #1
 8006860:	bd30      	pop	{r4, r5, pc}
 8006862:	42a3      	cmp	r3, r4
 8006864:	d3f4      	bcc.n	8006850 <__mcmp+0x18>
 8006866:	e7fb      	b.n	8006860 <__mcmp+0x28>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	e7f8      	b.n	8006860 <__mcmp+0x28>
	...

08006870 <__mdiff>:
 8006870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	460d      	mov	r5, r1
 8006876:	4607      	mov	r7, r0
 8006878:	4611      	mov	r1, r2
 800687a:	4628      	mov	r0, r5
 800687c:	4614      	mov	r4, r2
 800687e:	f7ff ffdb 	bl	8006838 <__mcmp>
 8006882:	1e06      	subs	r6, r0, #0
 8006884:	d111      	bne.n	80068aa <__mdiff+0x3a>
 8006886:	4631      	mov	r1, r6
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff fd57 	bl	800633c <_Balloc>
 800688e:	4602      	mov	r2, r0
 8006890:	b928      	cbnz	r0, 800689e <__mdiff+0x2e>
 8006892:	f240 2132 	movw	r1, #562	; 0x232
 8006896:	4b3a      	ldr	r3, [pc, #232]	; (8006980 <__mdiff+0x110>)
 8006898:	483a      	ldr	r0, [pc, #232]	; (8006984 <__mdiff+0x114>)
 800689a:	f000 fb2d 	bl	8006ef8 <__assert_func>
 800689e:	2301      	movs	r3, #1
 80068a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068a4:	4610      	mov	r0, r2
 80068a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	bfa4      	itt	ge
 80068ac:	4623      	movge	r3, r4
 80068ae:	462c      	movge	r4, r5
 80068b0:	4638      	mov	r0, r7
 80068b2:	6861      	ldr	r1, [r4, #4]
 80068b4:	bfa6      	itte	ge
 80068b6:	461d      	movge	r5, r3
 80068b8:	2600      	movge	r6, #0
 80068ba:	2601      	movlt	r6, #1
 80068bc:	f7ff fd3e 	bl	800633c <_Balloc>
 80068c0:	4602      	mov	r2, r0
 80068c2:	b918      	cbnz	r0, 80068cc <__mdiff+0x5c>
 80068c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068c8:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <__mdiff+0x110>)
 80068ca:	e7e5      	b.n	8006898 <__mdiff+0x28>
 80068cc:	f102 0814 	add.w	r8, r2, #20
 80068d0:	46c2      	mov	sl, r8
 80068d2:	f04f 0c00 	mov.w	ip, #0
 80068d6:	6927      	ldr	r7, [r4, #16]
 80068d8:	60c6      	str	r6, [r0, #12]
 80068da:	692e      	ldr	r6, [r5, #16]
 80068dc:	f104 0014 	add.w	r0, r4, #20
 80068e0:	f105 0914 	add.w	r9, r5, #20
 80068e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068ec:	3410      	adds	r4, #16
 80068ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80068f6:	fa1f f18b 	uxth.w	r1, fp
 80068fa:	448c      	add	ip, r1
 80068fc:	b299      	uxth	r1, r3
 80068fe:	0c1b      	lsrs	r3, r3, #16
 8006900:	ebac 0101 	sub.w	r1, ip, r1
 8006904:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006908:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800690c:	b289      	uxth	r1, r1
 800690e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006912:	454e      	cmp	r6, r9
 8006914:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006918:	f84a 3b04 	str.w	r3, [sl], #4
 800691c:	d8e7      	bhi.n	80068ee <__mdiff+0x7e>
 800691e:	1b73      	subs	r3, r6, r5
 8006920:	3b15      	subs	r3, #21
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	3515      	adds	r5, #21
 8006928:	3304      	adds	r3, #4
 800692a:	42ae      	cmp	r6, r5
 800692c:	bf38      	it	cc
 800692e:	2304      	movcc	r3, #4
 8006930:	4418      	add	r0, r3
 8006932:	4443      	add	r3, r8
 8006934:	461e      	mov	r6, r3
 8006936:	4605      	mov	r5, r0
 8006938:	4575      	cmp	r5, lr
 800693a:	d30e      	bcc.n	800695a <__mdiff+0xea>
 800693c:	f10e 0103 	add.w	r1, lr, #3
 8006940:	1a09      	subs	r1, r1, r0
 8006942:	f021 0103 	bic.w	r1, r1, #3
 8006946:	3803      	subs	r0, #3
 8006948:	4586      	cmp	lr, r0
 800694a:	bf38      	it	cc
 800694c:	2100      	movcc	r1, #0
 800694e:	4419      	add	r1, r3
 8006950:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006954:	b18b      	cbz	r3, 800697a <__mdiff+0x10a>
 8006956:	6117      	str	r7, [r2, #16]
 8006958:	e7a4      	b.n	80068a4 <__mdiff+0x34>
 800695a:	f855 8b04 	ldr.w	r8, [r5], #4
 800695e:	fa1f f188 	uxth.w	r1, r8
 8006962:	4461      	add	r1, ip
 8006964:	140c      	asrs	r4, r1, #16
 8006966:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800696a:	b289      	uxth	r1, r1
 800696c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006970:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006974:	f846 1b04 	str.w	r1, [r6], #4
 8006978:	e7de      	b.n	8006938 <__mdiff+0xc8>
 800697a:	3f01      	subs	r7, #1
 800697c:	e7e8      	b.n	8006950 <__mdiff+0xe0>
 800697e:	bf00      	nop
 8006980:	08007bb7 	.word	0x08007bb7
 8006984:	08007bc8 	.word	0x08007bc8

08006988 <__d2b>:
 8006988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800698c:	2101      	movs	r1, #1
 800698e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006992:	4690      	mov	r8, r2
 8006994:	461d      	mov	r5, r3
 8006996:	f7ff fcd1 	bl	800633c <_Balloc>
 800699a:	4604      	mov	r4, r0
 800699c:	b930      	cbnz	r0, 80069ac <__d2b+0x24>
 800699e:	4602      	mov	r2, r0
 80069a0:	f240 310a 	movw	r1, #778	; 0x30a
 80069a4:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <__d2b+0xb0>)
 80069a6:	4825      	ldr	r0, [pc, #148]	; (8006a3c <__d2b+0xb4>)
 80069a8:	f000 faa6 	bl	8006ef8 <__assert_func>
 80069ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069b4:	bb2d      	cbnz	r5, 8006a02 <__d2b+0x7a>
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	f1b8 0300 	subs.w	r3, r8, #0
 80069bc:	d026      	beq.n	8006a0c <__d2b+0x84>
 80069be:	4668      	mov	r0, sp
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	f7ff fd83 	bl	80064cc <__lo0bits>
 80069c6:	9900      	ldr	r1, [sp, #0]
 80069c8:	b1f0      	cbz	r0, 8006a08 <__d2b+0x80>
 80069ca:	9a01      	ldr	r2, [sp, #4]
 80069cc:	f1c0 0320 	rsb	r3, r0, #32
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	430b      	orrs	r3, r1
 80069d6:	40c2      	lsrs	r2, r0
 80069d8:	6163      	str	r3, [r4, #20]
 80069da:	9201      	str	r2, [sp, #4]
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2102      	movne	r1, #2
 80069e4:	2101      	moveq	r1, #1
 80069e6:	61a3      	str	r3, [r4, #24]
 80069e8:	6121      	str	r1, [r4, #16]
 80069ea:	b1c5      	cbz	r5, 8006a1e <__d2b+0x96>
 80069ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069f0:	4405      	add	r5, r0
 80069f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069f6:	603d      	str	r5, [r7, #0]
 80069f8:	6030      	str	r0, [r6, #0]
 80069fa:	4620      	mov	r0, r4
 80069fc:	b002      	add	sp, #8
 80069fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a06:	e7d6      	b.n	80069b6 <__d2b+0x2e>
 8006a08:	6161      	str	r1, [r4, #20]
 8006a0a:	e7e7      	b.n	80069dc <__d2b+0x54>
 8006a0c:	a801      	add	r0, sp, #4
 8006a0e:	f7ff fd5d 	bl	80064cc <__lo0bits>
 8006a12:	2101      	movs	r1, #1
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	6121      	str	r1, [r4, #16]
 8006a18:	6163      	str	r3, [r4, #20]
 8006a1a:	3020      	adds	r0, #32
 8006a1c:	e7e5      	b.n	80069ea <__d2b+0x62>
 8006a1e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a26:	6038      	str	r0, [r7, #0]
 8006a28:	6918      	ldr	r0, [r3, #16]
 8006a2a:	f7ff fd2f 	bl	800648c <__hi0bits>
 8006a2e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a32:	6031      	str	r1, [r6, #0]
 8006a34:	e7e1      	b.n	80069fa <__d2b+0x72>
 8006a36:	bf00      	nop
 8006a38:	08007bb7 	.word	0x08007bb7
 8006a3c:	08007bc8 	.word	0x08007bc8

08006a40 <_calloc_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	fba1 5402 	umull	r5, r4, r1, r2
 8006a46:	b934      	cbnz	r4, 8006a56 <_calloc_r+0x16>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f000 f875 	bl	8006b38 <_malloc_r>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	b928      	cbnz	r0, 8006a5e <_calloc_r+0x1e>
 8006a52:	4630      	mov	r0, r6
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	220c      	movs	r2, #12
 8006a58:	2600      	movs	r6, #0
 8006a5a:	6002      	str	r2, [r0, #0]
 8006a5c:	e7f9      	b.n	8006a52 <_calloc_r+0x12>
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4621      	mov	r1, r4
 8006a62:	f7fe f941 	bl	8004ce8 <memset>
 8006a66:	e7f4      	b.n	8006a52 <_calloc_r+0x12>

08006a68 <_free_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d040      	beq.n	8006af2 <_free_r+0x8a>
 8006a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a74:	1f0c      	subs	r4, r1, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bfb8      	it	lt
 8006a7a:	18e4      	addlt	r4, r4, r3
 8006a7c:	f000 fa98 	bl	8006fb0 <__malloc_lock>
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <_free_r+0x8c>)
 8006a82:	6813      	ldr	r3, [r2, #0]
 8006a84:	b933      	cbnz	r3, 8006a94 <_free_r+0x2c>
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	6014      	str	r4, [r2, #0]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a90:	f000 ba94 	b.w	8006fbc <__malloc_unlock>
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d908      	bls.n	8006aaa <_free_r+0x42>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	1821      	adds	r1, r4, r0
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	bf01      	itttt	eq
 8006aa0:	6819      	ldreq	r1, [r3, #0]
 8006aa2:	685b      	ldreq	r3, [r3, #4]
 8006aa4:	1809      	addeq	r1, r1, r0
 8006aa6:	6021      	streq	r1, [r4, #0]
 8006aa8:	e7ed      	b.n	8006a86 <_free_r+0x1e>
 8006aaa:	461a      	mov	r2, r3
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b10b      	cbz	r3, 8006ab4 <_free_r+0x4c>
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	d9fa      	bls.n	8006aaa <_free_r+0x42>
 8006ab4:	6811      	ldr	r1, [r2, #0]
 8006ab6:	1850      	adds	r0, r2, r1
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d10b      	bne.n	8006ad4 <_free_r+0x6c>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	4401      	add	r1, r0
 8006ac0:	1850      	adds	r0, r2, r1
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	d1e0      	bne.n	8006a8a <_free_r+0x22>
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4401      	add	r1, r0
 8006ace:	6011      	str	r1, [r2, #0]
 8006ad0:	6053      	str	r3, [r2, #4]
 8006ad2:	e7da      	b.n	8006a8a <_free_r+0x22>
 8006ad4:	d902      	bls.n	8006adc <_free_r+0x74>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	e7d6      	b.n	8006a8a <_free_r+0x22>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	bf01      	itttt	eq
 8006ae4:	6819      	ldreq	r1, [r3, #0]
 8006ae6:	685b      	ldreq	r3, [r3, #4]
 8006ae8:	1809      	addeq	r1, r1, r0
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	6054      	str	r4, [r2, #4]
 8006af0:	e7cb      	b.n	8006a8a <_free_r+0x22>
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	200003dc 	.word	0x200003dc

08006af8 <sbrk_aligned>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4e0e      	ldr	r6, [pc, #56]	; (8006b34 <sbrk_aligned+0x3c>)
 8006afc:	460c      	mov	r4, r1
 8006afe:	6831      	ldr	r1, [r6, #0]
 8006b00:	4605      	mov	r5, r0
 8006b02:	b911      	cbnz	r1, 8006b0a <sbrk_aligned+0x12>
 8006b04:	f000 f9e8 	bl	8006ed8 <_sbrk_r>
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f9e3 	bl	8006ed8 <_sbrk_r>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d00a      	beq.n	8006b2c <sbrk_aligned+0x34>
 8006b16:	1cc4      	adds	r4, r0, #3
 8006b18:	f024 0403 	bic.w	r4, r4, #3
 8006b1c:	42a0      	cmp	r0, r4
 8006b1e:	d007      	beq.n	8006b30 <sbrk_aligned+0x38>
 8006b20:	1a21      	subs	r1, r4, r0
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 f9d8 	bl	8006ed8 <_sbrk_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d101      	bne.n	8006b30 <sbrk_aligned+0x38>
 8006b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b30:	4620      	mov	r0, r4
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	200003e0 	.word	0x200003e0

08006b38 <_malloc_r>:
 8006b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	1ccd      	adds	r5, r1, #3
 8006b3e:	f025 0503 	bic.w	r5, r5, #3
 8006b42:	3508      	adds	r5, #8
 8006b44:	2d0c      	cmp	r5, #12
 8006b46:	bf38      	it	cc
 8006b48:	250c      	movcc	r5, #12
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	db01      	blt.n	8006b54 <_malloc_r+0x1c>
 8006b50:	42a9      	cmp	r1, r5
 8006b52:	d905      	bls.n	8006b60 <_malloc_r+0x28>
 8006b54:	230c      	movs	r3, #12
 8006b56:	2600      	movs	r6, #0
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b60:	4e2e      	ldr	r6, [pc, #184]	; (8006c1c <_malloc_r+0xe4>)
 8006b62:	f000 fa25 	bl	8006fb0 <__malloc_lock>
 8006b66:	6833      	ldr	r3, [r6, #0]
 8006b68:	461c      	mov	r4, r3
 8006b6a:	bb34      	cbnz	r4, 8006bba <_malloc_r+0x82>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff ffc2 	bl	8006af8 <sbrk_aligned>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	4604      	mov	r4, r0
 8006b78:	d14d      	bne.n	8006c16 <_malloc_r+0xde>
 8006b7a:	6834      	ldr	r4, [r6, #0]
 8006b7c:	4626      	mov	r6, r4
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	d140      	bne.n	8006c04 <_malloc_r+0xcc>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	4631      	mov	r1, r6
 8006b86:	4638      	mov	r0, r7
 8006b88:	eb04 0803 	add.w	r8, r4, r3
 8006b8c:	f000 f9a4 	bl	8006ed8 <_sbrk_r>
 8006b90:	4580      	cmp	r8, r0
 8006b92:	d13a      	bne.n	8006c0a <_malloc_r+0xd2>
 8006b94:	6821      	ldr	r1, [r4, #0]
 8006b96:	3503      	adds	r5, #3
 8006b98:	1a6d      	subs	r5, r5, r1
 8006b9a:	f025 0503 	bic.w	r5, r5, #3
 8006b9e:	3508      	adds	r5, #8
 8006ba0:	2d0c      	cmp	r5, #12
 8006ba2:	bf38      	it	cc
 8006ba4:	250c      	movcc	r5, #12
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7ff ffa5 	bl	8006af8 <sbrk_aligned>
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d02b      	beq.n	8006c0a <_malloc_r+0xd2>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	442b      	add	r3, r5
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	e00e      	b.n	8006bd8 <_malloc_r+0xa0>
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	1b52      	subs	r2, r2, r5
 8006bbe:	d41e      	bmi.n	8006bfe <_malloc_r+0xc6>
 8006bc0:	2a0b      	cmp	r2, #11
 8006bc2:	d916      	bls.n	8006bf2 <_malloc_r+0xba>
 8006bc4:	1961      	adds	r1, r4, r5
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	6025      	str	r5, [r4, #0]
 8006bca:	bf18      	it	ne
 8006bcc:	6059      	strne	r1, [r3, #4]
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	bf08      	it	eq
 8006bd2:	6031      	streq	r1, [r6, #0]
 8006bd4:	5162      	str	r2, [r4, r5]
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f104 060b 	add.w	r6, r4, #11
 8006bde:	f000 f9ed 	bl	8006fbc <__malloc_unlock>
 8006be2:	f026 0607 	bic.w	r6, r6, #7
 8006be6:	1d23      	adds	r3, r4, #4
 8006be8:	1af2      	subs	r2, r6, r3
 8006bea:	d0b6      	beq.n	8006b5a <_malloc_r+0x22>
 8006bec:	1b9b      	subs	r3, r3, r6
 8006bee:	50a3      	str	r3, [r4, r2]
 8006bf0:	e7b3      	b.n	8006b5a <_malloc_r+0x22>
 8006bf2:	6862      	ldr	r2, [r4, #4]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	bf0c      	ite	eq
 8006bf8:	6032      	streq	r2, [r6, #0]
 8006bfa:	605a      	strne	r2, [r3, #4]
 8006bfc:	e7ec      	b.n	8006bd8 <_malloc_r+0xa0>
 8006bfe:	4623      	mov	r3, r4
 8006c00:	6864      	ldr	r4, [r4, #4]
 8006c02:	e7b2      	b.n	8006b6a <_malloc_r+0x32>
 8006c04:	4634      	mov	r4, r6
 8006c06:	6876      	ldr	r6, [r6, #4]
 8006c08:	e7b9      	b.n	8006b7e <_malloc_r+0x46>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	f000 f9d4 	bl	8006fbc <__malloc_unlock>
 8006c14:	e7a1      	b.n	8006b5a <_malloc_r+0x22>
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	e7de      	b.n	8006bd8 <_malloc_r+0xa0>
 8006c1a:	bf00      	nop
 8006c1c:	200003dc 	.word	0x200003dc

08006c20 <__ssputs_r>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	688e      	ldr	r6, [r1, #8]
 8006c26:	4682      	mov	sl, r0
 8006c28:	429e      	cmp	r6, r3
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4690      	mov	r8, r2
 8006c2e:	461f      	mov	r7, r3
 8006c30:	d838      	bhi.n	8006ca4 <__ssputs_r+0x84>
 8006c32:	898a      	ldrh	r2, [r1, #12]
 8006c34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c38:	d032      	beq.n	8006ca0 <__ssputs_r+0x80>
 8006c3a:	6825      	ldr	r5, [r4, #0]
 8006c3c:	6909      	ldr	r1, [r1, #16]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	eba5 0901 	sub.w	r9, r5, r1
 8006c44:	6965      	ldr	r5, [r4, #20]
 8006c46:	444b      	add	r3, r9
 8006c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c50:	106d      	asrs	r5, r5, #1
 8006c52:	429d      	cmp	r5, r3
 8006c54:	bf38      	it	cc
 8006c56:	461d      	movcc	r5, r3
 8006c58:	0553      	lsls	r3, r2, #21
 8006c5a:	d531      	bpl.n	8006cc0 <__ssputs_r+0xa0>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7ff ff6b 	bl	8006b38 <_malloc_r>
 8006c62:	4606      	mov	r6, r0
 8006c64:	b950      	cbnz	r0, 8006c7c <__ssputs_r+0x5c>
 8006c66:	230c      	movs	r3, #12
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	f8ca 3000 	str.w	r3, [sl]
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	464a      	mov	r2, r9
 8006c7e:	6921      	ldr	r1, [r4, #16]
 8006c80:	f7ff fb4e 	bl	8006320 <memcpy>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	6126      	str	r6, [r4, #16]
 8006c92:	444e      	add	r6, r9
 8006c94:	6026      	str	r6, [r4, #0]
 8006c96:	463e      	mov	r6, r7
 8006c98:	6165      	str	r5, [r4, #20]
 8006c9a:	eba5 0509 	sub.w	r5, r5, r9
 8006c9e:	60a5      	str	r5, [r4, #8]
 8006ca0:	42be      	cmp	r6, r7
 8006ca2:	d900      	bls.n	8006ca6 <__ssputs_r+0x86>
 8006ca4:	463e      	mov	r6, r7
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	4641      	mov	r1, r8
 8006caa:	6820      	ldr	r0, [r4, #0]
 8006cac:	f000 f966 	bl	8006f7c <memmove>
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	1b9b      	subs	r3, r3, r6
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	4433      	add	r3, r6
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	e7db      	b.n	8006c78 <__ssputs_r+0x58>
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	f000 f981 	bl	8006fc8 <_realloc_r>
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d1e1      	bne.n	8006c90 <__ssputs_r+0x70>
 8006ccc:	4650      	mov	r0, sl
 8006cce:	6921      	ldr	r1, [r4, #16]
 8006cd0:	f7ff feca 	bl	8006a68 <_free_r>
 8006cd4:	e7c7      	b.n	8006c66 <__ssputs_r+0x46>
	...

08006cd8 <_svfiprintf_r>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	4698      	mov	r8, r3
 8006cde:	898b      	ldrh	r3, [r1, #12]
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	b09d      	sub	sp, #116	; 0x74
 8006cea:	d50e      	bpl.n	8006d0a <_svfiprintf_r+0x32>
 8006cec:	690b      	ldr	r3, [r1, #16]
 8006cee:	b963      	cbnz	r3, 8006d0a <_svfiprintf_r+0x32>
 8006cf0:	2140      	movs	r1, #64	; 0x40
 8006cf2:	f7ff ff21 	bl	8006b38 <_malloc_r>
 8006cf6:	6028      	str	r0, [r5, #0]
 8006cf8:	6128      	str	r0, [r5, #16]
 8006cfa:	b920      	cbnz	r0, 8006d06 <_svfiprintf_r+0x2e>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	e0d1      	b.n	8006eaa <_svfiprintf_r+0x1d2>
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	616b      	str	r3, [r5, #20]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0e:	2320      	movs	r3, #32
 8006d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	f04f 0901 	mov.w	r9, #1
 8006d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ec4 <_svfiprintf_r+0x1ec>
 8006d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d26:	4623      	mov	r3, r4
 8006d28:	469a      	mov	sl, r3
 8006d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2e:	b10a      	cbz	r2, 8006d34 <_svfiprintf_r+0x5c>
 8006d30:	2a25      	cmp	r2, #37	; 0x25
 8006d32:	d1f9      	bne.n	8006d28 <_svfiprintf_r+0x50>
 8006d34:	ebba 0b04 	subs.w	fp, sl, r4
 8006d38:	d00b      	beq.n	8006d52 <_svfiprintf_r+0x7a>
 8006d3a:	465b      	mov	r3, fp
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff ff6d 	bl	8006c20 <__ssputs_r>
 8006d46:	3001      	adds	r0, #1
 8006d48:	f000 80aa 	beq.w	8006ea0 <_svfiprintf_r+0x1c8>
 8006d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4e:	445a      	add	r2, fp
 8006d50:	9209      	str	r2, [sp, #36]	; 0x24
 8006d52:	f89a 3000 	ldrb.w	r3, [sl]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 80a2 	beq.w	8006ea0 <_svfiprintf_r+0x1c8>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d66:	f10a 0a01 	add.w	sl, sl, #1
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	9307      	str	r3, [sp, #28]
 8006d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d72:	931a      	str	r3, [sp, #104]	; 0x68
 8006d74:	4654      	mov	r4, sl
 8006d76:	2205      	movs	r2, #5
 8006d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7c:	4851      	ldr	r0, [pc, #324]	; (8006ec4 <_svfiprintf_r+0x1ec>)
 8006d7e:	f7ff fac1 	bl	8006304 <memchr>
 8006d82:	9a04      	ldr	r2, [sp, #16]
 8006d84:	b9d8      	cbnz	r0, 8006dbe <_svfiprintf_r+0xe6>
 8006d86:	06d0      	lsls	r0, r2, #27
 8006d88:	bf44      	itt	mi
 8006d8a:	2320      	movmi	r3, #32
 8006d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d90:	0711      	lsls	r1, r2, #28
 8006d92:	bf44      	itt	mi
 8006d94:	232b      	movmi	r3, #43	; 0x2b
 8006d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006da0:	d015      	beq.n	8006dce <_svfiprintf_r+0xf6>
 8006da2:	4654      	mov	r4, sl
 8006da4:	2000      	movs	r0, #0
 8006da6:	f04f 0c0a 	mov.w	ip, #10
 8006daa:	9a07      	ldr	r2, [sp, #28]
 8006dac:	4621      	mov	r1, r4
 8006dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db2:	3b30      	subs	r3, #48	; 0x30
 8006db4:	2b09      	cmp	r3, #9
 8006db6:	d94e      	bls.n	8006e56 <_svfiprintf_r+0x17e>
 8006db8:	b1b0      	cbz	r0, 8006de8 <_svfiprintf_r+0x110>
 8006dba:	9207      	str	r2, [sp, #28]
 8006dbc:	e014      	b.n	8006de8 <_svfiprintf_r+0x110>
 8006dbe:	eba0 0308 	sub.w	r3, r0, r8
 8006dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	46a2      	mov	sl, r4
 8006dca:	9304      	str	r3, [sp, #16]
 8006dcc:	e7d2      	b.n	8006d74 <_svfiprintf_r+0x9c>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	1d19      	adds	r1, r3, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	9103      	str	r1, [sp, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bfbb      	ittet	lt
 8006dda:	425b      	neglt	r3, r3
 8006ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8006de0:	9307      	strge	r3, [sp, #28]
 8006de2:	9307      	strlt	r3, [sp, #28]
 8006de4:	bfb8      	it	lt
 8006de6:	9204      	strlt	r2, [sp, #16]
 8006de8:	7823      	ldrb	r3, [r4, #0]
 8006dea:	2b2e      	cmp	r3, #46	; 0x2e
 8006dec:	d10c      	bne.n	8006e08 <_svfiprintf_r+0x130>
 8006dee:	7863      	ldrb	r3, [r4, #1]
 8006df0:	2b2a      	cmp	r3, #42	; 0x2a
 8006df2:	d135      	bne.n	8006e60 <_svfiprintf_r+0x188>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	3402      	adds	r4, #2
 8006df8:	1d1a      	adds	r2, r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	9203      	str	r2, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bfb8      	it	lt
 8006e02:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e06:	9305      	str	r3, [sp, #20]
 8006e08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006ec8 <_svfiprintf_r+0x1f0>
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	4650      	mov	r0, sl
 8006e10:	7821      	ldrb	r1, [r4, #0]
 8006e12:	f7ff fa77 	bl	8006304 <memchr>
 8006e16:	b140      	cbz	r0, 8006e2a <_svfiprintf_r+0x152>
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	eba0 000a 	sub.w	r0, r0, sl
 8006e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	3401      	adds	r4, #1
 8006e26:	4303      	orrs	r3, r0
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2e:	2206      	movs	r2, #6
 8006e30:	4826      	ldr	r0, [pc, #152]	; (8006ecc <_svfiprintf_r+0x1f4>)
 8006e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e36:	f7ff fa65 	bl	8006304 <memchr>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d038      	beq.n	8006eb0 <_svfiprintf_r+0x1d8>
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <_svfiprintf_r+0x1f8>)
 8006e40:	bb1b      	cbnz	r3, 8006e8a <_svfiprintf_r+0x1b2>
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	3307      	adds	r3, #7
 8006e46:	f023 0307 	bic.w	r3, r3, #7
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e50:	4433      	add	r3, r6
 8006e52:	9309      	str	r3, [sp, #36]	; 0x24
 8006e54:	e767      	b.n	8006d26 <_svfiprintf_r+0x4e>
 8006e56:	460c      	mov	r4, r1
 8006e58:	2001      	movs	r0, #1
 8006e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e5e:	e7a5      	b.n	8006dac <_svfiprintf_r+0xd4>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f04f 0c0a 	mov.w	ip, #10
 8006e66:	4619      	mov	r1, r3
 8006e68:	3401      	adds	r4, #1
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e72:	3a30      	subs	r2, #48	; 0x30
 8006e74:	2a09      	cmp	r2, #9
 8006e76:	d903      	bls.n	8006e80 <_svfiprintf_r+0x1a8>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0c5      	beq.n	8006e08 <_svfiprintf_r+0x130>
 8006e7c:	9105      	str	r1, [sp, #20]
 8006e7e:	e7c3      	b.n	8006e08 <_svfiprintf_r+0x130>
 8006e80:	4604      	mov	r4, r0
 8006e82:	2301      	movs	r3, #1
 8006e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e88:	e7f0      	b.n	8006e6c <_svfiprintf_r+0x194>
 8006e8a:	ab03      	add	r3, sp, #12
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4638      	mov	r0, r7
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <_svfiprintf_r+0x1fc>)
 8006e94:	a904      	add	r1, sp, #16
 8006e96:	f7fd ffcd 	bl	8004e34 <_printf_float>
 8006e9a:	1c42      	adds	r2, r0, #1
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	d1d6      	bne.n	8006e4e <_svfiprintf_r+0x176>
 8006ea0:	89ab      	ldrh	r3, [r5, #12]
 8006ea2:	065b      	lsls	r3, r3, #25
 8006ea4:	f53f af2c 	bmi.w	8006d00 <_svfiprintf_r+0x28>
 8006ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eaa:	b01d      	add	sp, #116	; 0x74
 8006eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <_svfiprintf_r+0x1fc>)
 8006eba:	a904      	add	r1, sp, #16
 8006ebc:	f7fe fa56 	bl	800536c <_printf_i>
 8006ec0:	e7eb      	b.n	8006e9a <_svfiprintf_r+0x1c2>
 8006ec2:	bf00      	nop
 8006ec4:	08007d24 	.word	0x08007d24
 8006ec8:	08007d2a 	.word	0x08007d2a
 8006ecc:	08007d2e 	.word	0x08007d2e
 8006ed0:	08004e35 	.word	0x08004e35
 8006ed4:	08006c21 	.word	0x08006c21

08006ed8 <_sbrk_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	2300      	movs	r3, #0
 8006edc:	4d05      	ldr	r5, [pc, #20]	; (8006ef4 <_sbrk_r+0x1c>)
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa ff12 	bl	8001d0c <_sbrk>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_sbrk_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_sbrk_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200003e4 	.word	0x200003e4

08006ef8 <__assert_func>:
 8006ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006efa:	4614      	mov	r4, r2
 8006efc:	461a      	mov	r2, r3
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__assert_func+0x2c>)
 8006f00:	4605      	mov	r5, r0
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68d8      	ldr	r0, [r3, #12]
 8006f06:	b14c      	cbz	r4, 8006f1c <__assert_func+0x24>
 8006f08:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <__assert_func+0x30>)
 8006f0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f0e:	9100      	str	r1, [sp, #0]
 8006f10:	462b      	mov	r3, r5
 8006f12:	4906      	ldr	r1, [pc, #24]	; (8006f2c <__assert_func+0x34>)
 8006f14:	f000 f80e 	bl	8006f34 <fiprintf>
 8006f18:	f000 faaa 	bl	8007470 <abort>
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <__assert_func+0x38>)
 8006f1e:	461c      	mov	r4, r3
 8006f20:	e7f3      	b.n	8006f0a <__assert_func+0x12>
 8006f22:	bf00      	nop
 8006f24:	20000040 	.word	0x20000040
 8006f28:	08007d35 	.word	0x08007d35
 8006f2c:	08007d42 	.word	0x08007d42
 8006f30:	08007d70 	.word	0x08007d70

08006f34 <fiprintf>:
 8006f34:	b40e      	push	{r1, r2, r3}
 8006f36:	b503      	push	{r0, r1, lr}
 8006f38:	4601      	mov	r1, r0
 8006f3a:	ab03      	add	r3, sp, #12
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <fiprintf+0x20>)
 8006f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f42:	6800      	ldr	r0, [r0, #0]
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	f000 f895 	bl	8007074 <_vfiprintf_r>
 8006f4a:	b002      	add	sp, #8
 8006f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f50:	b003      	add	sp, #12
 8006f52:	4770      	bx	lr
 8006f54:	20000040 	.word	0x20000040

08006f58 <__ascii_mbtowc>:
 8006f58:	b082      	sub	sp, #8
 8006f5a:	b901      	cbnz	r1, 8006f5e <__ascii_mbtowc+0x6>
 8006f5c:	a901      	add	r1, sp, #4
 8006f5e:	b142      	cbz	r2, 8006f72 <__ascii_mbtowc+0x1a>
 8006f60:	b14b      	cbz	r3, 8006f76 <__ascii_mbtowc+0x1e>
 8006f62:	7813      	ldrb	r3, [r2, #0]
 8006f64:	600b      	str	r3, [r1, #0]
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	1e10      	subs	r0, r2, #0
 8006f6a:	bf18      	it	ne
 8006f6c:	2001      	movne	r0, #1
 8006f6e:	b002      	add	sp, #8
 8006f70:	4770      	bx	lr
 8006f72:	4610      	mov	r0, r2
 8006f74:	e7fb      	b.n	8006f6e <__ascii_mbtowc+0x16>
 8006f76:	f06f 0001 	mvn.w	r0, #1
 8006f7a:	e7f8      	b.n	8006f6e <__ascii_mbtowc+0x16>

08006f7c <memmove>:
 8006f7c:	4288      	cmp	r0, r1
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	eb01 0402 	add.w	r4, r1, r2
 8006f84:	d902      	bls.n	8006f8c <memmove+0x10>
 8006f86:	4284      	cmp	r4, r0
 8006f88:	4623      	mov	r3, r4
 8006f8a:	d807      	bhi.n	8006f9c <memmove+0x20>
 8006f8c:	1e43      	subs	r3, r0, #1
 8006f8e:	42a1      	cmp	r1, r4
 8006f90:	d008      	beq.n	8006fa4 <memmove+0x28>
 8006f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f9a:	e7f8      	b.n	8006f8e <memmove+0x12>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4402      	add	r2, r0
 8006fa0:	428a      	cmp	r2, r1
 8006fa2:	d100      	bne.n	8006fa6 <memmove+0x2a>
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fae:	e7f7      	b.n	8006fa0 <memmove+0x24>

08006fb0 <__malloc_lock>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__malloc_lock+0x8>)
 8006fb2:	f000 bc19 	b.w	80077e8 <__retarget_lock_acquire_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	200003e8 	.word	0x200003e8

08006fbc <__malloc_unlock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_unlock+0x8>)
 8006fbe:	f000 bc14 	b.w	80077ea <__retarget_lock_release_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200003e8 	.word	0x200003e8

08006fc8 <_realloc_r>:
 8006fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4614      	mov	r4, r2
 8006fd0:	460e      	mov	r6, r1
 8006fd2:	b921      	cbnz	r1, 8006fde <_realloc_r+0x16>
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	f7ff bdad 	b.w	8006b38 <_malloc_r>
 8006fde:	b92a      	cbnz	r2, 8006fec <_realloc_r+0x24>
 8006fe0:	f7ff fd42 	bl	8006a68 <_free_r>
 8006fe4:	4625      	mov	r5, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fec:	f000 fc64 	bl	80078b8 <_malloc_usable_size_r>
 8006ff0:	4284      	cmp	r4, r0
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	d802      	bhi.n	8006ffc <_realloc_r+0x34>
 8006ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ffa:	d812      	bhi.n	8007022 <_realloc_r+0x5a>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff fd9a 	bl	8006b38 <_malloc_r>
 8007004:	4605      	mov	r5, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d0ed      	beq.n	8006fe6 <_realloc_r+0x1e>
 800700a:	42bc      	cmp	r4, r7
 800700c:	4622      	mov	r2, r4
 800700e:	4631      	mov	r1, r6
 8007010:	bf28      	it	cs
 8007012:	463a      	movcs	r2, r7
 8007014:	f7ff f984 	bl	8006320 <memcpy>
 8007018:	4631      	mov	r1, r6
 800701a:	4640      	mov	r0, r8
 800701c:	f7ff fd24 	bl	8006a68 <_free_r>
 8007020:	e7e1      	b.n	8006fe6 <_realloc_r+0x1e>
 8007022:	4635      	mov	r5, r6
 8007024:	e7df      	b.n	8006fe6 <_realloc_r+0x1e>

08007026 <__sfputc_r>:
 8007026:	6893      	ldr	r3, [r2, #8]
 8007028:	b410      	push	{r4}
 800702a:	3b01      	subs	r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	6093      	str	r3, [r2, #8]
 8007030:	da07      	bge.n	8007042 <__sfputc_r+0x1c>
 8007032:	6994      	ldr	r4, [r2, #24]
 8007034:	42a3      	cmp	r3, r4
 8007036:	db01      	blt.n	800703c <__sfputc_r+0x16>
 8007038:	290a      	cmp	r1, #10
 800703a:	d102      	bne.n	8007042 <__sfputc_r+0x1c>
 800703c:	bc10      	pop	{r4}
 800703e:	f000 b949 	b.w	80072d4 <__swbuf_r>
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	1c58      	adds	r0, r3, #1
 8007046:	6010      	str	r0, [r2, #0]
 8007048:	7019      	strb	r1, [r3, #0]
 800704a:	4608      	mov	r0, r1
 800704c:	bc10      	pop	{r4}
 800704e:	4770      	bx	lr

08007050 <__sfputs_r>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	4606      	mov	r6, r0
 8007054:	460f      	mov	r7, r1
 8007056:	4614      	mov	r4, r2
 8007058:	18d5      	adds	r5, r2, r3
 800705a:	42ac      	cmp	r4, r5
 800705c:	d101      	bne.n	8007062 <__sfputs_r+0x12>
 800705e:	2000      	movs	r0, #0
 8007060:	e007      	b.n	8007072 <__sfputs_r+0x22>
 8007062:	463a      	mov	r2, r7
 8007064:	4630      	mov	r0, r6
 8007066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706a:	f7ff ffdc 	bl	8007026 <__sfputc_r>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d1f3      	bne.n	800705a <__sfputs_r+0xa>
 8007072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007074 <_vfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	460d      	mov	r5, r1
 800707a:	4614      	mov	r4, r2
 800707c:	4698      	mov	r8, r3
 800707e:	4606      	mov	r6, r0
 8007080:	b09d      	sub	sp, #116	; 0x74
 8007082:	b118      	cbz	r0, 800708c <_vfiprintf_r+0x18>
 8007084:	6983      	ldr	r3, [r0, #24]
 8007086:	b90b      	cbnz	r3, 800708c <_vfiprintf_r+0x18>
 8007088:	f000 fb10 	bl	80076ac <__sinit>
 800708c:	4b89      	ldr	r3, [pc, #548]	; (80072b4 <_vfiprintf_r+0x240>)
 800708e:	429d      	cmp	r5, r3
 8007090:	d11b      	bne.n	80070ca <_vfiprintf_r+0x56>
 8007092:	6875      	ldr	r5, [r6, #4]
 8007094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007096:	07d9      	lsls	r1, r3, #31
 8007098:	d405      	bmi.n	80070a6 <_vfiprintf_r+0x32>
 800709a:	89ab      	ldrh	r3, [r5, #12]
 800709c:	059a      	lsls	r2, r3, #22
 800709e:	d402      	bmi.n	80070a6 <_vfiprintf_r+0x32>
 80070a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070a2:	f000 fba1 	bl	80077e8 <__retarget_lock_acquire_recursive>
 80070a6:	89ab      	ldrh	r3, [r5, #12]
 80070a8:	071b      	lsls	r3, r3, #28
 80070aa:	d501      	bpl.n	80070b0 <_vfiprintf_r+0x3c>
 80070ac:	692b      	ldr	r3, [r5, #16]
 80070ae:	b9eb      	cbnz	r3, 80070ec <_vfiprintf_r+0x78>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f96e 	bl	8007394 <__swsetup_r>
 80070b8:	b1c0      	cbz	r0, 80070ec <_vfiprintf_r+0x78>
 80070ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070bc:	07dc      	lsls	r4, r3, #31
 80070be:	d50e      	bpl.n	80070de <_vfiprintf_r+0x6a>
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	b01d      	add	sp, #116	; 0x74
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <_vfiprintf_r+0x244>)
 80070cc:	429d      	cmp	r5, r3
 80070ce:	d101      	bne.n	80070d4 <_vfiprintf_r+0x60>
 80070d0:	68b5      	ldr	r5, [r6, #8]
 80070d2:	e7df      	b.n	8007094 <_vfiprintf_r+0x20>
 80070d4:	4b79      	ldr	r3, [pc, #484]	; (80072bc <_vfiprintf_r+0x248>)
 80070d6:	429d      	cmp	r5, r3
 80070d8:	bf08      	it	eq
 80070da:	68f5      	ldreq	r5, [r6, #12]
 80070dc:	e7da      	b.n	8007094 <_vfiprintf_r+0x20>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	0598      	lsls	r0, r3, #22
 80070e2:	d4ed      	bmi.n	80070c0 <_vfiprintf_r+0x4c>
 80070e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e6:	f000 fb80 	bl	80077ea <__retarget_lock_release_recursive>
 80070ea:	e7e9      	b.n	80070c0 <_vfiprintf_r+0x4c>
 80070ec:	2300      	movs	r3, #0
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	2320      	movs	r3, #32
 80070f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070f6:	2330      	movs	r3, #48	; 0x30
 80070f8:	f04f 0901 	mov.w	r9, #1
 80070fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007100:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80072c0 <_vfiprintf_r+0x24c>
 8007104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007108:	4623      	mov	r3, r4
 800710a:	469a      	mov	sl, r3
 800710c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007110:	b10a      	cbz	r2, 8007116 <_vfiprintf_r+0xa2>
 8007112:	2a25      	cmp	r2, #37	; 0x25
 8007114:	d1f9      	bne.n	800710a <_vfiprintf_r+0x96>
 8007116:	ebba 0b04 	subs.w	fp, sl, r4
 800711a:	d00b      	beq.n	8007134 <_vfiprintf_r+0xc0>
 800711c:	465b      	mov	r3, fp
 800711e:	4622      	mov	r2, r4
 8007120:	4629      	mov	r1, r5
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ff94 	bl	8007050 <__sfputs_r>
 8007128:	3001      	adds	r0, #1
 800712a:	f000 80aa 	beq.w	8007282 <_vfiprintf_r+0x20e>
 800712e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007130:	445a      	add	r2, fp
 8007132:	9209      	str	r2, [sp, #36]	; 0x24
 8007134:	f89a 3000 	ldrb.w	r3, [sl]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80a2 	beq.w	8007282 <_vfiprintf_r+0x20e>
 800713e:	2300      	movs	r3, #0
 8007140:	f04f 32ff 	mov.w	r2, #4294967295
 8007144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007148:	f10a 0a01 	add.w	sl, sl, #1
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007154:	931a      	str	r3, [sp, #104]	; 0x68
 8007156:	4654      	mov	r4, sl
 8007158:	2205      	movs	r2, #5
 800715a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715e:	4858      	ldr	r0, [pc, #352]	; (80072c0 <_vfiprintf_r+0x24c>)
 8007160:	f7ff f8d0 	bl	8006304 <memchr>
 8007164:	9a04      	ldr	r2, [sp, #16]
 8007166:	b9d8      	cbnz	r0, 80071a0 <_vfiprintf_r+0x12c>
 8007168:	06d1      	lsls	r1, r2, #27
 800716a:	bf44      	itt	mi
 800716c:	2320      	movmi	r3, #32
 800716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007172:	0713      	lsls	r3, r2, #28
 8007174:	bf44      	itt	mi
 8007176:	232b      	movmi	r3, #43	; 0x2b
 8007178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717c:	f89a 3000 	ldrb.w	r3, [sl]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d015      	beq.n	80071b0 <_vfiprintf_r+0x13c>
 8007184:	4654      	mov	r4, sl
 8007186:	2000      	movs	r0, #0
 8007188:	f04f 0c0a 	mov.w	ip, #10
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	4621      	mov	r1, r4
 8007190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007194:	3b30      	subs	r3, #48	; 0x30
 8007196:	2b09      	cmp	r3, #9
 8007198:	d94e      	bls.n	8007238 <_vfiprintf_r+0x1c4>
 800719a:	b1b0      	cbz	r0, 80071ca <_vfiprintf_r+0x156>
 800719c:	9207      	str	r2, [sp, #28]
 800719e:	e014      	b.n	80071ca <_vfiprintf_r+0x156>
 80071a0:	eba0 0308 	sub.w	r3, r0, r8
 80071a4:	fa09 f303 	lsl.w	r3, r9, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	46a2      	mov	sl, r4
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	e7d2      	b.n	8007156 <_vfiprintf_r+0xe2>
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	1d19      	adds	r1, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	9103      	str	r1, [sp, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bfbb      	ittet	lt
 80071bc:	425b      	neglt	r3, r3
 80071be:	f042 0202 	orrlt.w	r2, r2, #2
 80071c2:	9307      	strge	r3, [sp, #28]
 80071c4:	9307      	strlt	r3, [sp, #28]
 80071c6:	bfb8      	it	lt
 80071c8:	9204      	strlt	r2, [sp, #16]
 80071ca:	7823      	ldrb	r3, [r4, #0]
 80071cc:	2b2e      	cmp	r3, #46	; 0x2e
 80071ce:	d10c      	bne.n	80071ea <_vfiprintf_r+0x176>
 80071d0:	7863      	ldrb	r3, [r4, #1]
 80071d2:	2b2a      	cmp	r3, #42	; 0x2a
 80071d4:	d135      	bne.n	8007242 <_vfiprintf_r+0x1ce>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	3402      	adds	r4, #2
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9203      	str	r2, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfb8      	it	lt
 80071e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80072c4 <_vfiprintf_r+0x250>
 80071ee:	2203      	movs	r2, #3
 80071f0:	4650      	mov	r0, sl
 80071f2:	7821      	ldrb	r1, [r4, #0]
 80071f4:	f7ff f886 	bl	8006304 <memchr>
 80071f8:	b140      	cbz	r0, 800720c <_vfiprintf_r+0x198>
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	eba0 000a 	sub.w	r0, r0, sl
 8007200:	fa03 f000 	lsl.w	r0, r3, r0
 8007204:	9b04      	ldr	r3, [sp, #16]
 8007206:	3401      	adds	r4, #1
 8007208:	4303      	orrs	r3, r0
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007210:	2206      	movs	r2, #6
 8007212:	482d      	ldr	r0, [pc, #180]	; (80072c8 <_vfiprintf_r+0x254>)
 8007214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007218:	f7ff f874 	bl	8006304 <memchr>
 800721c:	2800      	cmp	r0, #0
 800721e:	d03f      	beq.n	80072a0 <_vfiprintf_r+0x22c>
 8007220:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <_vfiprintf_r+0x258>)
 8007222:	bb1b      	cbnz	r3, 800726c <_vfiprintf_r+0x1f8>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	3307      	adds	r3, #7
 8007228:	f023 0307 	bic.w	r3, r3, #7
 800722c:	3308      	adds	r3, #8
 800722e:	9303      	str	r3, [sp, #12]
 8007230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007232:	443b      	add	r3, r7
 8007234:	9309      	str	r3, [sp, #36]	; 0x24
 8007236:	e767      	b.n	8007108 <_vfiprintf_r+0x94>
 8007238:	460c      	mov	r4, r1
 800723a:	2001      	movs	r0, #1
 800723c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007240:	e7a5      	b.n	800718e <_vfiprintf_r+0x11a>
 8007242:	2300      	movs	r3, #0
 8007244:	f04f 0c0a 	mov.w	ip, #10
 8007248:	4619      	mov	r1, r3
 800724a:	3401      	adds	r4, #1
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	4620      	mov	r0, r4
 8007250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007254:	3a30      	subs	r2, #48	; 0x30
 8007256:	2a09      	cmp	r2, #9
 8007258:	d903      	bls.n	8007262 <_vfiprintf_r+0x1ee>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0c5      	beq.n	80071ea <_vfiprintf_r+0x176>
 800725e:	9105      	str	r1, [sp, #20]
 8007260:	e7c3      	b.n	80071ea <_vfiprintf_r+0x176>
 8007262:	4604      	mov	r4, r0
 8007264:	2301      	movs	r3, #1
 8007266:	fb0c 2101 	mla	r1, ip, r1, r2
 800726a:	e7f0      	b.n	800724e <_vfiprintf_r+0x1da>
 800726c:	ab03      	add	r3, sp, #12
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	462a      	mov	r2, r5
 8007272:	4630      	mov	r0, r6
 8007274:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <_vfiprintf_r+0x25c>)
 8007276:	a904      	add	r1, sp, #16
 8007278:	f7fd fddc 	bl	8004e34 <_printf_float>
 800727c:	4607      	mov	r7, r0
 800727e:	1c78      	adds	r0, r7, #1
 8007280:	d1d6      	bne.n	8007230 <_vfiprintf_r+0x1bc>
 8007282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007284:	07d9      	lsls	r1, r3, #31
 8007286:	d405      	bmi.n	8007294 <_vfiprintf_r+0x220>
 8007288:	89ab      	ldrh	r3, [r5, #12]
 800728a:	059a      	lsls	r2, r3, #22
 800728c:	d402      	bmi.n	8007294 <_vfiprintf_r+0x220>
 800728e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007290:	f000 faab 	bl	80077ea <__retarget_lock_release_recursive>
 8007294:	89ab      	ldrh	r3, [r5, #12]
 8007296:	065b      	lsls	r3, r3, #25
 8007298:	f53f af12 	bmi.w	80070c0 <_vfiprintf_r+0x4c>
 800729c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729e:	e711      	b.n	80070c4 <_vfiprintf_r+0x50>
 80072a0:	ab03      	add	r3, sp, #12
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	462a      	mov	r2, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <_vfiprintf_r+0x25c>)
 80072aa:	a904      	add	r1, sp, #16
 80072ac:	f7fe f85e 	bl	800536c <_printf_i>
 80072b0:	e7e4      	b.n	800727c <_vfiprintf_r+0x208>
 80072b2:	bf00      	nop
 80072b4:	08007e9c 	.word	0x08007e9c
 80072b8:	08007ebc 	.word	0x08007ebc
 80072bc:	08007e7c 	.word	0x08007e7c
 80072c0:	08007d24 	.word	0x08007d24
 80072c4:	08007d2a 	.word	0x08007d2a
 80072c8:	08007d2e 	.word	0x08007d2e
 80072cc:	08004e35 	.word	0x08004e35
 80072d0:	08007051 	.word	0x08007051

080072d4 <__swbuf_r>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	460e      	mov	r6, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	4605      	mov	r5, r0
 80072dc:	b118      	cbz	r0, 80072e6 <__swbuf_r+0x12>
 80072de:	6983      	ldr	r3, [r0, #24]
 80072e0:	b90b      	cbnz	r3, 80072e6 <__swbuf_r+0x12>
 80072e2:	f000 f9e3 	bl	80076ac <__sinit>
 80072e6:	4b21      	ldr	r3, [pc, #132]	; (800736c <__swbuf_r+0x98>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	d12b      	bne.n	8007344 <__swbuf_r+0x70>
 80072ec:	686c      	ldr	r4, [r5, #4]
 80072ee:	69a3      	ldr	r3, [r4, #24]
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	071a      	lsls	r2, r3, #28
 80072f6:	d52f      	bpl.n	8007358 <__swbuf_r+0x84>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	b36b      	cbz	r3, 8007358 <__swbuf_r+0x84>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	b2f6      	uxtb	r6, r6
 8007302:	1ac0      	subs	r0, r0, r3
 8007304:	6963      	ldr	r3, [r4, #20]
 8007306:	4637      	mov	r7, r6
 8007308:	4283      	cmp	r3, r0
 800730a:	dc04      	bgt.n	8007316 <__swbuf_r+0x42>
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 f938 	bl	8007584 <_fflush_r>
 8007314:	bb30      	cbnz	r0, 8007364 <__swbuf_r+0x90>
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	3001      	adds	r0, #1
 800731a:	3b01      	subs	r3, #1
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	6022      	str	r2, [r4, #0]
 8007324:	701e      	strb	r6, [r3, #0]
 8007326:	6963      	ldr	r3, [r4, #20]
 8007328:	4283      	cmp	r3, r0
 800732a:	d004      	beq.n	8007336 <__swbuf_r+0x62>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	07db      	lsls	r3, r3, #31
 8007330:	d506      	bpl.n	8007340 <__swbuf_r+0x6c>
 8007332:	2e0a      	cmp	r6, #10
 8007334:	d104      	bne.n	8007340 <__swbuf_r+0x6c>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	f000 f923 	bl	8007584 <_fflush_r>
 800733e:	b988      	cbnz	r0, 8007364 <__swbuf_r+0x90>
 8007340:	4638      	mov	r0, r7
 8007342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007344:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <__swbuf_r+0x9c>)
 8007346:	429c      	cmp	r4, r3
 8007348:	d101      	bne.n	800734e <__swbuf_r+0x7a>
 800734a:	68ac      	ldr	r4, [r5, #8]
 800734c:	e7cf      	b.n	80072ee <__swbuf_r+0x1a>
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <__swbuf_r+0xa0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	bf08      	it	eq
 8007354:	68ec      	ldreq	r4, [r5, #12]
 8007356:	e7ca      	b.n	80072ee <__swbuf_r+0x1a>
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f81a 	bl	8007394 <__swsetup_r>
 8007360:	2800      	cmp	r0, #0
 8007362:	d0cb      	beq.n	80072fc <__swbuf_r+0x28>
 8007364:	f04f 37ff 	mov.w	r7, #4294967295
 8007368:	e7ea      	b.n	8007340 <__swbuf_r+0x6c>
 800736a:	bf00      	nop
 800736c:	08007e9c 	.word	0x08007e9c
 8007370:	08007ebc 	.word	0x08007ebc
 8007374:	08007e7c 	.word	0x08007e7c

08007378 <__ascii_wctomb>:
 8007378:	4603      	mov	r3, r0
 800737a:	4608      	mov	r0, r1
 800737c:	b141      	cbz	r1, 8007390 <__ascii_wctomb+0x18>
 800737e:	2aff      	cmp	r2, #255	; 0xff
 8007380:	d904      	bls.n	800738c <__ascii_wctomb+0x14>
 8007382:	228a      	movs	r2, #138	; 0x8a
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	4770      	bx	lr
 800738c:	2001      	movs	r0, #1
 800738e:	700a      	strb	r2, [r1, #0]
 8007390:	4770      	bx	lr
	...

08007394 <__swsetup_r>:
 8007394:	4b32      	ldr	r3, [pc, #200]	; (8007460 <__swsetup_r+0xcc>)
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	681d      	ldr	r5, [r3, #0]
 800739a:	4606      	mov	r6, r0
 800739c:	460c      	mov	r4, r1
 800739e:	b125      	cbz	r5, 80073aa <__swsetup_r+0x16>
 80073a0:	69ab      	ldr	r3, [r5, #24]
 80073a2:	b913      	cbnz	r3, 80073aa <__swsetup_r+0x16>
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 f981 	bl	80076ac <__sinit>
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <__swsetup_r+0xd0>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d10f      	bne.n	80073d0 <__swsetup_r+0x3c>
 80073b0:	686c      	ldr	r4, [r5, #4]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073b8:	0719      	lsls	r1, r3, #28
 80073ba:	d42c      	bmi.n	8007416 <__swsetup_r+0x82>
 80073bc:	06dd      	lsls	r5, r3, #27
 80073be:	d411      	bmi.n	80073e4 <__swsetup_r+0x50>
 80073c0:	2309      	movs	r3, #9
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	e03e      	b.n	800744e <__swsetup_r+0xba>
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <__swsetup_r+0xd4>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d101      	bne.n	80073da <__swsetup_r+0x46>
 80073d6:	68ac      	ldr	r4, [r5, #8]
 80073d8:	e7eb      	b.n	80073b2 <__swsetup_r+0x1e>
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <__swsetup_r+0xd8>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	bf08      	it	eq
 80073e0:	68ec      	ldreq	r4, [r5, #12]
 80073e2:	e7e6      	b.n	80073b2 <__swsetup_r+0x1e>
 80073e4:	0758      	lsls	r0, r3, #29
 80073e6:	d512      	bpl.n	800740e <__swsetup_r+0x7a>
 80073e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ea:	b141      	cbz	r1, 80073fe <__swsetup_r+0x6a>
 80073ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073f0:	4299      	cmp	r1, r3
 80073f2:	d002      	beq.n	80073fa <__swsetup_r+0x66>
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff fb37 	bl	8006a68 <_free_r>
 80073fa:	2300      	movs	r3, #0
 80073fc:	6363      	str	r3, [r4, #52]	; 0x34
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	2300      	movs	r3, #0
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f043 0308 	orr.w	r3, r3, #8
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	b94b      	cbnz	r3, 800742e <__swsetup_r+0x9a>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d003      	beq.n	800742e <__swsetup_r+0x9a>
 8007426:	4621      	mov	r1, r4
 8007428:	4630      	mov	r0, r6
 800742a:	f000 fa05 	bl	8007838 <__smakebuf_r>
 800742e:	89a0      	ldrh	r0, [r4, #12]
 8007430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007434:	f010 0301 	ands.w	r3, r0, #1
 8007438:	d00a      	beq.n	8007450 <__swsetup_r+0xbc>
 800743a:	2300      	movs	r3, #0
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	6963      	ldr	r3, [r4, #20]
 8007440:	425b      	negs	r3, r3
 8007442:	61a3      	str	r3, [r4, #24]
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	b943      	cbnz	r3, 800745a <__swsetup_r+0xc6>
 8007448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800744c:	d1ba      	bne.n	80073c4 <__swsetup_r+0x30>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	0781      	lsls	r1, r0, #30
 8007452:	bf58      	it	pl
 8007454:	6963      	ldrpl	r3, [r4, #20]
 8007456:	60a3      	str	r3, [r4, #8]
 8007458:	e7f4      	b.n	8007444 <__swsetup_r+0xb0>
 800745a:	2000      	movs	r0, #0
 800745c:	e7f7      	b.n	800744e <__swsetup_r+0xba>
 800745e:	bf00      	nop
 8007460:	20000040 	.word	0x20000040
 8007464:	08007e9c 	.word	0x08007e9c
 8007468:	08007ebc 	.word	0x08007ebc
 800746c:	08007e7c 	.word	0x08007e7c

08007470 <abort>:
 8007470:	2006      	movs	r0, #6
 8007472:	b508      	push	{r3, lr}
 8007474:	f000 fa50 	bl	8007918 <raise>
 8007478:	2001      	movs	r0, #1
 800747a:	f7fa fbd4 	bl	8001c26 <_exit>
	...

08007480 <__sflush_r>:
 8007480:	898a      	ldrh	r2, [r1, #12]
 8007482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007484:	4605      	mov	r5, r0
 8007486:	0710      	lsls	r0, r2, #28
 8007488:	460c      	mov	r4, r1
 800748a:	d457      	bmi.n	800753c <__sflush_r+0xbc>
 800748c:	684b      	ldr	r3, [r1, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dc04      	bgt.n	800749c <__sflush_r+0x1c>
 8007492:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	dc01      	bgt.n	800749c <__sflush_r+0x1c>
 8007498:	2000      	movs	r0, #0
 800749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800749c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800749e:	2e00      	cmp	r6, #0
 80074a0:	d0fa      	beq.n	8007498 <__sflush_r+0x18>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074a8:	682f      	ldr	r7, [r5, #0]
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	d032      	beq.n	8007514 <__sflush_r+0x94>
 80074ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	075a      	lsls	r2, r3, #29
 80074b4:	d505      	bpl.n	80074c2 <__sflush_r+0x42>
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	1ac0      	subs	r0, r0, r3
 80074ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074bc:	b10b      	cbz	r3, 80074c2 <__sflush_r+0x42>
 80074be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074c0:	1ac0      	subs	r0, r0, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	4602      	mov	r2, r0
 80074c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c8:	4628      	mov	r0, r5
 80074ca:	6a21      	ldr	r1, [r4, #32]
 80074cc:	47b0      	blx	r6
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	d106      	bne.n	80074e2 <__sflush_r+0x62>
 80074d4:	6829      	ldr	r1, [r5, #0]
 80074d6:	291d      	cmp	r1, #29
 80074d8:	d82c      	bhi.n	8007534 <__sflush_r+0xb4>
 80074da:	4a29      	ldr	r2, [pc, #164]	; (8007580 <__sflush_r+0x100>)
 80074dc:	40ca      	lsrs	r2, r1
 80074de:	07d6      	lsls	r6, r2, #31
 80074e0:	d528      	bpl.n	8007534 <__sflush_r+0xb4>
 80074e2:	2200      	movs	r2, #0
 80074e4:	6062      	str	r2, [r4, #4]
 80074e6:	6922      	ldr	r2, [r4, #16]
 80074e8:	04d9      	lsls	r1, r3, #19
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	d504      	bpl.n	80074f8 <__sflush_r+0x78>
 80074ee:	1c42      	adds	r2, r0, #1
 80074f0:	d101      	bne.n	80074f6 <__sflush_r+0x76>
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	b903      	cbnz	r3, 80074f8 <__sflush_r+0x78>
 80074f6:	6560      	str	r0, [r4, #84]	; 0x54
 80074f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fa:	602f      	str	r7, [r5, #0]
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d0cb      	beq.n	8007498 <__sflush_r+0x18>
 8007500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007504:	4299      	cmp	r1, r3
 8007506:	d002      	beq.n	800750e <__sflush_r+0x8e>
 8007508:	4628      	mov	r0, r5
 800750a:	f7ff faad 	bl	8006a68 <_free_r>
 800750e:	2000      	movs	r0, #0
 8007510:	6360      	str	r0, [r4, #52]	; 0x34
 8007512:	e7c2      	b.n	800749a <__sflush_r+0x1a>
 8007514:	6a21      	ldr	r1, [r4, #32]
 8007516:	2301      	movs	r3, #1
 8007518:	4628      	mov	r0, r5
 800751a:	47b0      	blx	r6
 800751c:	1c41      	adds	r1, r0, #1
 800751e:	d1c7      	bne.n	80074b0 <__sflush_r+0x30>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0c4      	beq.n	80074b0 <__sflush_r+0x30>
 8007526:	2b1d      	cmp	r3, #29
 8007528:	d001      	beq.n	800752e <__sflush_r+0xae>
 800752a:	2b16      	cmp	r3, #22
 800752c:	d101      	bne.n	8007532 <__sflush_r+0xb2>
 800752e:	602f      	str	r7, [r5, #0]
 8007530:	e7b2      	b.n	8007498 <__sflush_r+0x18>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	e7ae      	b.n	800749a <__sflush_r+0x1a>
 800753c:	690f      	ldr	r7, [r1, #16]
 800753e:	2f00      	cmp	r7, #0
 8007540:	d0aa      	beq.n	8007498 <__sflush_r+0x18>
 8007542:	0793      	lsls	r3, r2, #30
 8007544:	bf18      	it	ne
 8007546:	2300      	movne	r3, #0
 8007548:	680e      	ldr	r6, [r1, #0]
 800754a:	bf08      	it	eq
 800754c:	694b      	ldreq	r3, [r1, #20]
 800754e:	1bf6      	subs	r6, r6, r7
 8007550:	600f      	str	r7, [r1, #0]
 8007552:	608b      	str	r3, [r1, #8]
 8007554:	2e00      	cmp	r6, #0
 8007556:	dd9f      	ble.n	8007498 <__sflush_r+0x18>
 8007558:	4633      	mov	r3, r6
 800755a:	463a      	mov	r2, r7
 800755c:	4628      	mov	r0, r5
 800755e:	6a21      	ldr	r1, [r4, #32]
 8007560:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007564:	47e0      	blx	ip
 8007566:	2800      	cmp	r0, #0
 8007568:	dc06      	bgt.n	8007578 <__sflush_r+0xf8>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	e790      	b.n	800749a <__sflush_r+0x1a>
 8007578:	4407      	add	r7, r0
 800757a:	1a36      	subs	r6, r6, r0
 800757c:	e7ea      	b.n	8007554 <__sflush_r+0xd4>
 800757e:	bf00      	nop
 8007580:	20400001 	.word	0x20400001

08007584 <_fflush_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	690b      	ldr	r3, [r1, #16]
 8007588:	4605      	mov	r5, r0
 800758a:	460c      	mov	r4, r1
 800758c:	b913      	cbnz	r3, 8007594 <_fflush_r+0x10>
 800758e:	2500      	movs	r5, #0
 8007590:	4628      	mov	r0, r5
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	b118      	cbz	r0, 800759e <_fflush_r+0x1a>
 8007596:	6983      	ldr	r3, [r0, #24]
 8007598:	b90b      	cbnz	r3, 800759e <_fflush_r+0x1a>
 800759a:	f000 f887 	bl	80076ac <__sinit>
 800759e:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <_fflush_r+0x6c>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	d11b      	bne.n	80075dc <_fflush_r+0x58>
 80075a4:	686c      	ldr	r4, [r5, #4]
 80075a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0ef      	beq.n	800758e <_fflush_r+0xa>
 80075ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075b0:	07d0      	lsls	r0, r2, #31
 80075b2:	d404      	bmi.n	80075be <_fflush_r+0x3a>
 80075b4:	0599      	lsls	r1, r3, #22
 80075b6:	d402      	bmi.n	80075be <_fflush_r+0x3a>
 80075b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ba:	f000 f915 	bl	80077e8 <__retarget_lock_acquire_recursive>
 80075be:	4628      	mov	r0, r5
 80075c0:	4621      	mov	r1, r4
 80075c2:	f7ff ff5d 	bl	8007480 <__sflush_r>
 80075c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075c8:	4605      	mov	r5, r0
 80075ca:	07da      	lsls	r2, r3, #31
 80075cc:	d4e0      	bmi.n	8007590 <_fflush_r+0xc>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	059b      	lsls	r3, r3, #22
 80075d2:	d4dd      	bmi.n	8007590 <_fflush_r+0xc>
 80075d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075d6:	f000 f908 	bl	80077ea <__retarget_lock_release_recursive>
 80075da:	e7d9      	b.n	8007590 <_fflush_r+0xc>
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <_fflush_r+0x70>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	d101      	bne.n	80075e6 <_fflush_r+0x62>
 80075e2:	68ac      	ldr	r4, [r5, #8]
 80075e4:	e7df      	b.n	80075a6 <_fflush_r+0x22>
 80075e6:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <_fflush_r+0x74>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	bf08      	it	eq
 80075ec:	68ec      	ldreq	r4, [r5, #12]
 80075ee:	e7da      	b.n	80075a6 <_fflush_r+0x22>
 80075f0:	08007e9c 	.word	0x08007e9c
 80075f4:	08007ebc 	.word	0x08007ebc
 80075f8:	08007e7c 	.word	0x08007e7c

080075fc <std>:
 80075fc:	2300      	movs	r3, #0
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
 8007602:	e9c0 3300 	strd	r3, r3, [r0]
 8007606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800760a:	6083      	str	r3, [r0, #8]
 800760c:	8181      	strh	r1, [r0, #12]
 800760e:	6643      	str	r3, [r0, #100]	; 0x64
 8007610:	81c2      	strh	r2, [r0, #14]
 8007612:	6183      	str	r3, [r0, #24]
 8007614:	4619      	mov	r1, r3
 8007616:	2208      	movs	r2, #8
 8007618:	305c      	adds	r0, #92	; 0x5c
 800761a:	f7fd fb65 	bl	8004ce8 <memset>
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <std+0x38>)
 8007620:	6224      	str	r4, [r4, #32]
 8007622:	6263      	str	r3, [r4, #36]	; 0x24
 8007624:	4b04      	ldr	r3, [pc, #16]	; (8007638 <std+0x3c>)
 8007626:	62a3      	str	r3, [r4, #40]	; 0x28
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <std+0x40>)
 800762a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <std+0x44>)
 800762e:	6323      	str	r3, [r4, #48]	; 0x30
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	08007951 	.word	0x08007951
 8007638:	08007973 	.word	0x08007973
 800763c:	080079ab 	.word	0x080079ab
 8007640:	080079cf 	.word	0x080079cf

08007644 <_cleanup_r>:
 8007644:	4901      	ldr	r1, [pc, #4]	; (800764c <_cleanup_r+0x8>)
 8007646:	f000 b8af 	b.w	80077a8 <_fwalk_reent>
 800764a:	bf00      	nop
 800764c:	08007585 	.word	0x08007585

08007650 <__sfmoreglue>:
 8007650:	2268      	movs	r2, #104	; 0x68
 8007652:	b570      	push	{r4, r5, r6, lr}
 8007654:	1e4d      	subs	r5, r1, #1
 8007656:	4355      	muls	r5, r2
 8007658:	460e      	mov	r6, r1
 800765a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800765e:	f7ff fa6b 	bl	8006b38 <_malloc_r>
 8007662:	4604      	mov	r4, r0
 8007664:	b140      	cbz	r0, 8007678 <__sfmoreglue+0x28>
 8007666:	2100      	movs	r1, #0
 8007668:	e9c0 1600 	strd	r1, r6, [r0]
 800766c:	300c      	adds	r0, #12
 800766e:	60a0      	str	r0, [r4, #8]
 8007670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007674:	f7fd fb38 	bl	8004ce8 <memset>
 8007678:	4620      	mov	r0, r4
 800767a:	bd70      	pop	{r4, r5, r6, pc}

0800767c <__sfp_lock_acquire>:
 800767c:	4801      	ldr	r0, [pc, #4]	; (8007684 <__sfp_lock_acquire+0x8>)
 800767e:	f000 b8b3 	b.w	80077e8 <__retarget_lock_acquire_recursive>
 8007682:	bf00      	nop
 8007684:	200003e9 	.word	0x200003e9

08007688 <__sfp_lock_release>:
 8007688:	4801      	ldr	r0, [pc, #4]	; (8007690 <__sfp_lock_release+0x8>)
 800768a:	f000 b8ae 	b.w	80077ea <__retarget_lock_release_recursive>
 800768e:	bf00      	nop
 8007690:	200003e9 	.word	0x200003e9

08007694 <__sinit_lock_acquire>:
 8007694:	4801      	ldr	r0, [pc, #4]	; (800769c <__sinit_lock_acquire+0x8>)
 8007696:	f000 b8a7 	b.w	80077e8 <__retarget_lock_acquire_recursive>
 800769a:	bf00      	nop
 800769c:	200003ea 	.word	0x200003ea

080076a0 <__sinit_lock_release>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__sinit_lock_release+0x8>)
 80076a2:	f000 b8a2 	b.w	80077ea <__retarget_lock_release_recursive>
 80076a6:	bf00      	nop
 80076a8:	200003ea 	.word	0x200003ea

080076ac <__sinit>:
 80076ac:	b510      	push	{r4, lr}
 80076ae:	4604      	mov	r4, r0
 80076b0:	f7ff fff0 	bl	8007694 <__sinit_lock_acquire>
 80076b4:	69a3      	ldr	r3, [r4, #24]
 80076b6:	b11b      	cbz	r3, 80076c0 <__sinit+0x14>
 80076b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076bc:	f7ff bff0 	b.w	80076a0 <__sinit_lock_release>
 80076c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076c4:	6523      	str	r3, [r4, #80]	; 0x50
 80076c6:	4b13      	ldr	r3, [pc, #76]	; (8007714 <__sinit+0x68>)
 80076c8:	4a13      	ldr	r2, [pc, #76]	; (8007718 <__sinit+0x6c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	bf08      	it	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	4620      	mov	r0, r4
 80076d6:	bf08      	it	eq
 80076d8:	61a3      	streq	r3, [r4, #24]
 80076da:	f000 f81f 	bl	800771c <__sfp>
 80076de:	6060      	str	r0, [r4, #4]
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 f81b 	bl	800771c <__sfp>
 80076e6:	60a0      	str	r0, [r4, #8]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 f817 	bl	800771c <__sfp>
 80076ee:	2200      	movs	r2, #0
 80076f0:	2104      	movs	r1, #4
 80076f2:	60e0      	str	r0, [r4, #12]
 80076f4:	6860      	ldr	r0, [r4, #4]
 80076f6:	f7ff ff81 	bl	80075fc <std>
 80076fa:	2201      	movs	r2, #1
 80076fc:	2109      	movs	r1, #9
 80076fe:	68a0      	ldr	r0, [r4, #8]
 8007700:	f7ff ff7c 	bl	80075fc <std>
 8007704:	2202      	movs	r2, #2
 8007706:	2112      	movs	r1, #18
 8007708:	68e0      	ldr	r0, [r4, #12]
 800770a:	f7ff ff77 	bl	80075fc <std>
 800770e:	2301      	movs	r3, #1
 8007710:	61a3      	str	r3, [r4, #24]
 8007712:	e7d1      	b.n	80076b8 <__sinit+0xc>
 8007714:	08007b00 	.word	0x08007b00
 8007718:	08007645 	.word	0x08007645

0800771c <__sfp>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	4607      	mov	r7, r0
 8007720:	f7ff ffac 	bl	800767c <__sfp_lock_acquire>
 8007724:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <__sfp+0x84>)
 8007726:	681e      	ldr	r6, [r3, #0]
 8007728:	69b3      	ldr	r3, [r6, #24]
 800772a:	b913      	cbnz	r3, 8007732 <__sfp+0x16>
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff ffbd 	bl	80076ac <__sinit>
 8007732:	3648      	adds	r6, #72	; 0x48
 8007734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	d503      	bpl.n	8007744 <__sfp+0x28>
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	b30b      	cbz	r3, 8007784 <__sfp+0x68>
 8007740:	6836      	ldr	r6, [r6, #0]
 8007742:	e7f7      	b.n	8007734 <__sfp+0x18>
 8007744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007748:	b9d5      	cbnz	r5, 8007780 <__sfp+0x64>
 800774a:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <__sfp+0x88>)
 800774c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007750:	60e3      	str	r3, [r4, #12]
 8007752:	6665      	str	r5, [r4, #100]	; 0x64
 8007754:	f000 f847 	bl	80077e6 <__retarget_lock_init_recursive>
 8007758:	f7ff ff96 	bl	8007688 <__sfp_lock_release>
 800775c:	2208      	movs	r2, #8
 800775e:	4629      	mov	r1, r5
 8007760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007768:	6025      	str	r5, [r4, #0]
 800776a:	61a5      	str	r5, [r4, #24]
 800776c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007770:	f7fd faba 	bl	8004ce8 <memset>
 8007774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800777c:	4620      	mov	r0, r4
 800777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007780:	3468      	adds	r4, #104	; 0x68
 8007782:	e7d9      	b.n	8007738 <__sfp+0x1c>
 8007784:	2104      	movs	r1, #4
 8007786:	4638      	mov	r0, r7
 8007788:	f7ff ff62 	bl	8007650 <__sfmoreglue>
 800778c:	4604      	mov	r4, r0
 800778e:	6030      	str	r0, [r6, #0]
 8007790:	2800      	cmp	r0, #0
 8007792:	d1d5      	bne.n	8007740 <__sfp+0x24>
 8007794:	f7ff ff78 	bl	8007688 <__sfp_lock_release>
 8007798:	230c      	movs	r3, #12
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	e7ee      	b.n	800777c <__sfp+0x60>
 800779e:	bf00      	nop
 80077a0:	08007b00 	.word	0x08007b00
 80077a4:	ffff0001 	.word	0xffff0001

080077a8 <_fwalk_reent>:
 80077a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ac:	4606      	mov	r6, r0
 80077ae:	4688      	mov	r8, r1
 80077b0:	2700      	movs	r7, #0
 80077b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ba:	f1b9 0901 	subs.w	r9, r9, #1
 80077be:	d505      	bpl.n	80077cc <_fwalk_reent+0x24>
 80077c0:	6824      	ldr	r4, [r4, #0]
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d1f7      	bne.n	80077b6 <_fwalk_reent+0xe>
 80077c6:	4638      	mov	r0, r7
 80077c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077cc:	89ab      	ldrh	r3, [r5, #12]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d907      	bls.n	80077e2 <_fwalk_reent+0x3a>
 80077d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077d6:	3301      	adds	r3, #1
 80077d8:	d003      	beq.n	80077e2 <_fwalk_reent+0x3a>
 80077da:	4629      	mov	r1, r5
 80077dc:	4630      	mov	r0, r6
 80077de:	47c0      	blx	r8
 80077e0:	4307      	orrs	r7, r0
 80077e2:	3568      	adds	r5, #104	; 0x68
 80077e4:	e7e9      	b.n	80077ba <_fwalk_reent+0x12>

080077e6 <__retarget_lock_init_recursive>:
 80077e6:	4770      	bx	lr

080077e8 <__retarget_lock_acquire_recursive>:
 80077e8:	4770      	bx	lr

080077ea <__retarget_lock_release_recursive>:
 80077ea:	4770      	bx	lr

080077ec <__swhatbuf_r>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	460e      	mov	r6, r1
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	4614      	mov	r4, r2
 80077f6:	2900      	cmp	r1, #0
 80077f8:	461d      	mov	r5, r3
 80077fa:	b096      	sub	sp, #88	; 0x58
 80077fc:	da08      	bge.n	8007810 <__swhatbuf_r+0x24>
 80077fe:	2200      	movs	r2, #0
 8007800:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	061a      	lsls	r2, r3, #24
 8007808:	d410      	bmi.n	800782c <__swhatbuf_r+0x40>
 800780a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780e:	e00e      	b.n	800782e <__swhatbuf_r+0x42>
 8007810:	466a      	mov	r2, sp
 8007812:	f000 f903 	bl	8007a1c <_fstat_r>
 8007816:	2800      	cmp	r0, #0
 8007818:	dbf1      	blt.n	80077fe <__swhatbuf_r+0x12>
 800781a:	9a01      	ldr	r2, [sp, #4]
 800781c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007824:	425a      	negs	r2, r3
 8007826:	415a      	adcs	r2, r3
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	e7ee      	b.n	800780a <__swhatbuf_r+0x1e>
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	2000      	movs	r0, #0
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	b016      	add	sp, #88	; 0x58
 8007834:	bd70      	pop	{r4, r5, r6, pc}
	...

08007838 <__smakebuf_r>:
 8007838:	898b      	ldrh	r3, [r1, #12]
 800783a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800783c:	079d      	lsls	r5, r3, #30
 800783e:	4606      	mov	r6, r0
 8007840:	460c      	mov	r4, r1
 8007842:	d507      	bpl.n	8007854 <__smakebuf_r+0x1c>
 8007844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	2301      	movs	r3, #1
 800784e:	6163      	str	r3, [r4, #20]
 8007850:	b002      	add	sp, #8
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	466a      	mov	r2, sp
 8007856:	ab01      	add	r3, sp, #4
 8007858:	f7ff ffc8 	bl	80077ec <__swhatbuf_r>
 800785c:	9900      	ldr	r1, [sp, #0]
 800785e:	4605      	mov	r5, r0
 8007860:	4630      	mov	r0, r6
 8007862:	f7ff f969 	bl	8006b38 <_malloc_r>
 8007866:	b948      	cbnz	r0, 800787c <__smakebuf_r+0x44>
 8007868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786c:	059a      	lsls	r2, r3, #22
 800786e:	d4ef      	bmi.n	8007850 <__smakebuf_r+0x18>
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	f043 0302 	orr.w	r3, r3, #2
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e7e3      	b.n	8007844 <__smakebuf_r+0xc>
 800787c:	4b0d      	ldr	r3, [pc, #52]	; (80078b4 <__smakebuf_r+0x7c>)
 800787e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	6020      	str	r0, [r4, #0]
 8007884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	9b00      	ldr	r3, [sp, #0]
 800788c:	6120      	str	r0, [r4, #16]
 800788e:	6163      	str	r3, [r4, #20]
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	b15b      	cbz	r3, 80078ac <__smakebuf_r+0x74>
 8007894:	4630      	mov	r0, r6
 8007896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789a:	f000 f8d1 	bl	8007a40 <_isatty_r>
 800789e:	b128      	cbz	r0, 80078ac <__smakebuf_r+0x74>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f023 0303 	bic.w	r3, r3, #3
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	89a0      	ldrh	r0, [r4, #12]
 80078ae:	4305      	orrs	r5, r0
 80078b0:	81a5      	strh	r5, [r4, #12]
 80078b2:	e7cd      	b.n	8007850 <__smakebuf_r+0x18>
 80078b4:	08007645 	.word	0x08007645

080078b8 <_malloc_usable_size_r>:
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f18      	subs	r0, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbc      	itt	lt
 80078c2:	580b      	ldrlt	r3, [r1, r0]
 80078c4:	18c0      	addlt	r0, r0, r3
 80078c6:	4770      	bx	lr

080078c8 <_raise_r>:
 80078c8:	291f      	cmp	r1, #31
 80078ca:	b538      	push	{r3, r4, r5, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	d904      	bls.n	80078dc <_raise_r+0x14>
 80078d2:	2316      	movs	r3, #22
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078de:	b112      	cbz	r2, 80078e6 <_raise_r+0x1e>
 80078e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078e4:	b94b      	cbnz	r3, 80078fa <_raise_r+0x32>
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 f830 	bl	800794c <_getpid_r>
 80078ec:	462a      	mov	r2, r5
 80078ee:	4601      	mov	r1, r0
 80078f0:	4620      	mov	r0, r4
 80078f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f6:	f000 b817 	b.w	8007928 <_kill_r>
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d00a      	beq.n	8007914 <_raise_r+0x4c>
 80078fe:	1c59      	adds	r1, r3, #1
 8007900:	d103      	bne.n	800790a <_raise_r+0x42>
 8007902:	2316      	movs	r3, #22
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	2001      	movs	r0, #1
 8007908:	e7e7      	b.n	80078da <_raise_r+0x12>
 800790a:	2400      	movs	r4, #0
 800790c:	4628      	mov	r0, r5
 800790e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007912:	4798      	blx	r3
 8007914:	2000      	movs	r0, #0
 8007916:	e7e0      	b.n	80078da <_raise_r+0x12>

08007918 <raise>:
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <raise+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f7ff bfd3 	b.w	80078c8 <_raise_r>
 8007922:	bf00      	nop
 8007924:	20000040 	.word	0x20000040

08007928 <_kill_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	2300      	movs	r3, #0
 800792c:	4d06      	ldr	r5, [pc, #24]	; (8007948 <_kill_r+0x20>)
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f7fa f966 	bl	8001c06 <_kill>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d102      	bne.n	8007944 <_kill_r+0x1c>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	b103      	cbz	r3, 8007944 <_kill_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	200003e4 	.word	0x200003e4

0800794c <_getpid_r>:
 800794c:	f7fa b954 	b.w	8001bf8 <_getpid>

08007950 <__sread>:
 8007950:	b510      	push	{r4, lr}
 8007952:	460c      	mov	r4, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f000 f894 	bl	8007a84 <_read_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	bfab      	itete	ge
 8007960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007962:	89a3      	ldrhlt	r3, [r4, #12]
 8007964:	181b      	addge	r3, r3, r0
 8007966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800796a:	bfac      	ite	ge
 800796c:	6563      	strge	r3, [r4, #84]	; 0x54
 800796e:	81a3      	strhlt	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__swrite>:
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	461f      	mov	r7, r3
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	4605      	mov	r5, r0
 800797c:	05db      	lsls	r3, r3, #23
 800797e:	460c      	mov	r4, r1
 8007980:	4616      	mov	r6, r2
 8007982:	d505      	bpl.n	8007990 <__swrite+0x1e>
 8007984:	2302      	movs	r3, #2
 8007986:	2200      	movs	r2, #0
 8007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798c:	f000 f868 	bl	8007a60 <_lseek_r>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	4632      	mov	r2, r6
 8007994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	4628      	mov	r0, r5
 800799c:	463b      	mov	r3, r7
 800799e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	f000 b817 	b.w	80079d8 <_write_r>

080079aa <__sseek>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 f855 	bl	8007a60 <_lseek_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	bf15      	itete	ne
 80079bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079c6:	81a3      	strheq	r3, [r4, #12]
 80079c8:	bf18      	it	ne
 80079ca:	81a3      	strhne	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__sclose>:
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 b813 	b.w	80079fc <_close_r>
	...

080079d8 <_write_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	4d05      	ldr	r5, [pc, #20]	; (80079f8 <_write_r+0x20>)
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fa f944 	bl	8001c74 <_write>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_write_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_write_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	200003e4 	.word	0x200003e4

080079fc <_close_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	2300      	movs	r3, #0
 8007a00:	4d05      	ldr	r5, [pc, #20]	; (8007a18 <_close_r+0x1c>)
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7fa f950 	bl	8001cac <_close>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_close_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_close_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	200003e4 	.word	0x200003e4

08007a1c <_fstat_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_fstat_r+0x20>)
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	f7fa f94a 	bl	8001cc2 <_fstat>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	d102      	bne.n	8007a38 <_fstat_r+0x1c>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	b103      	cbz	r3, 8007a38 <_fstat_r+0x1c>
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	bd38      	pop	{r3, r4, r5, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200003e4 	.word	0x200003e4

08007a40 <_isatty_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	2300      	movs	r3, #0
 8007a44:	4d05      	ldr	r5, [pc, #20]	; (8007a5c <_isatty_r+0x1c>)
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa f948 	bl	8001ce0 <_isatty>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_isatty_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_isatty_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200003e4 	.word	0x200003e4

08007a60 <_lseek_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4d05      	ldr	r5, [pc, #20]	; (8007a80 <_lseek_r+0x20>)
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7fa f940 	bl	8001cf4 <_lseek>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_lseek_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_lseek_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	200003e4 	.word	0x200003e4

08007a84 <_read_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4d05      	ldr	r5, [pc, #20]	; (8007aa4 <_read_r+0x20>)
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7fa f8d1 	bl	8001c3a <_read>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_read_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_read_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	200003e4 	.word	0x200003e4

08007aa8 <_init>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_fini>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr
